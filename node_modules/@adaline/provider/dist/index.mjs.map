{"version":3,"sources":["../src/errors/provider.error.ts","../src/errors/model.error.ts","../src/errors/model-response.error.ts","../src/errors/invalid-model-request.error.ts","../src/errors/invalid-config.error.ts","../src/errors/invalid-messages.error.ts","../src/errors/invalid-tools.error.ts","../src/errors/invalid-embedding-requests.error.ts","../src/types/config/multi-string-config-item.ts","../src/types/config/object-schema-config-item.ts","../src/types/config/range-config-item.ts","../src/types/config/select-boolean-config-item.ts","../src/types/config/select-string-config-item.ts","../src/types/config/config-item.ts","../src/model/chat-model/chat-model.schema.v1.ts","../src/model/embedding-model/embedding-model.schema.v1.ts","../src/types/headers.ts","../src/types/params.ts","../src/types/url.ts","../src/utils/common-config.def.chat-model.ts","../src/utils/common-config.def.word-embedding.ts","../src/utils/get-error-message.ts","../src/utils/remove-undefined-entries.ts","../src/utils/is-running-in-browser.ts","../src/utils/base64.ts","../src/utils/url.ts"],"names":["ProviderErrorLiteral","ProviderError","_ProviderError","GatewayBaseError","info","cause","error","ModelErrorLiteral","ModelError","_ModelError","ModelResponseErrorLiteral","ModelResponseError","_ModelResponseError","InvalidModelRequestErrorLiteral","InvalidModelRequestError","_InvalidModelRequestError","InvalidConfigErrorLiteral","InvalidConfigError","_InvalidConfigError","InvalidMessagesErrorLiteral","InvalidMessagesError","_InvalidMessagesError","InvalidToolsErrorLiteral","InvalidToolsError","_InvalidToolsError","InvalidEmbeddingRequestsErrorLiteral","InvalidEmbeddingRequestsError","_InvalidEmbeddingRequestsError","MultiStringConfigItemTypeLiteral","MultiStringConfigItemDef","z","MultiStringConfigItemSchema","max","MultiStringConfigItem","data","__spreadValues","ObjectSchemaConfigItemTypeLiteral","ObjectSchemaConfigItemDef","ObjectSchemaConfigItemSchema","schema","ObjectSchemaConfigItem","RangeConfigItemTypeLiteral","RangeConfigItemDef","RangeConfigItemSchema","min","step","defaultValue","RangeConfigItem","SelectBooleanConfigItemTypeLiteral","SelectBooleanConfigItemDef","SelectBooleanConfigItemSchema","SelectBooleanConfigItem","SelectStringConfigItemTypeLiteral","SelectStringConfigItemDef","SelectStringConfigItemSchema","choices","SelectStringConfigItem","ConfigItemLiterals","ConfigItemEnum","ConfigItemDef","ChatModelSchema","Roles","RoleEnum","Modalities","ModalityEnum","config","_a","_b","defKeys","schemaKeys","key","EmbeddingModelSchema","EmbeddingModalityEnum","Headers","Params","Url","TEMPERATURE","MAX_TOKENS","MAX_REASONING_TOKENS","STOP","TOP_A","TOP_P","TOP_K","MIN_P","FREQUENCY_PENALTY","PRESENCE_PENALTY","SEED","REPETITION_PENALTY","LOG_PROBS","TOP_LOG_PROBS","ECHO","RESPONSE_FORMAT","RESPONSE_FORMAT_WITH_SCHEMA","RESPONSE_SCHEMA","CHAT_CONFIG","DIMENSIONS","ENCODING_FORMAT","EMBEDDING_CONFIG","getErrorMessage","removeUndefinedEntries","record","_","value","isRunningInBrowser","convertBase64ToUint8Array","base64String","base64Url","latin1string","byte","convertUint8ArrayToBase64","array","i","encodedBase64ToString","base64","binaryString","bytes","getMimeTypeFromBase64","urlWithoutTrailingSlash","url"],"mappings":"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","file":"index.mjs","sourcesContent":["import { GatewayBaseError } from \"@adaline/types\";\n\nconst ProviderErrorLiteral = \"ProviderError\" as const;\nexport class ProviderError extends GatewayBaseError {\n  readonly name = ProviderErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, ProviderErrorLiteral);\n    this.info = info;\n    this.cause = cause;\n  }\n\n  static isProviderError(error: unknown): error is ProviderError {\n    return error instanceof ProviderError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst ModelErrorLiteral = \"ModelError\" as const;\nexport class ModelError extends GatewayBaseError {\n  readonly name = ModelErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, ModelErrorLiteral);\n    this.info = info;\n    this.cause = cause;\n  }\n\n  static isModelError(error: unknown): error is ModelError {\n    return error instanceof ModelError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst ModelResponseErrorLiteral = \"ModelResponseError\" as const;\nexport class ModelResponseError extends GatewayBaseError {\n  readonly name = ModelResponseErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, ModelResponseErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n  }\n\n  static isModelResponseError(error: unknown): error is ModelResponseError {\n    return error instanceof ModelResponseError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidModelRequestErrorLiteral = \"InvalidModelRequestError\" as const;\nexport class InvalidModelRequestError extends GatewayBaseError {\n  readonly name = InvalidModelRequestErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidModelRequestErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidModelRequestError(error: unknown): error is InvalidModelRequestError {\n    return error instanceof InvalidModelRequestError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidConfigErrorLiteral = \"InvalidConfigError\" as const;\nexport class InvalidConfigError extends GatewayBaseError {\n  readonly name = InvalidConfigErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidConfigErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidConfigError(error: unknown): error is InvalidConfigError {\n    return error instanceof InvalidConfigError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidMessagesErrorLiteral = \"InvalidMessagesError\" as const;\nexport class InvalidMessagesError extends GatewayBaseError {\n  readonly name = InvalidMessagesErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidMessagesErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidMessagesError(error: unknown): error is InvalidMessagesError {\n    return error instanceof InvalidMessagesError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidToolsErrorLiteral = \"InvalidToolsError\" as const;\nexport class InvalidToolsError extends GatewayBaseError {\n  readonly name = InvalidToolsErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidToolsErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidToolsError(error: unknown): error is InvalidToolsError {\n    return error instanceof InvalidToolsError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidEmbeddingRequestsErrorLiteral = \"InvalidEmbeddingRequestsError\" as const;\nexport class InvalidEmbeddingRequestsError extends GatewayBaseError {\n  readonly name = InvalidEmbeddingRequestsErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidEmbeddingRequestsErrorLiteral);\n    this.info = info;\n    this.cause = cause;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidEmbeddingRequestsError(error: unknown): error is InvalidEmbeddingRequestsError {\n    return error instanceof InvalidEmbeddingRequestsError;\n  }\n}\n","import { z } from \"zod\";\n\nconst MultiStringConfigItemTypeLiteral = \"multi-string\" as const;\n\nconst MultiStringConfigItemDef = z.object({\n  type: z.literal(MultiStringConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  max: z.number().int().positive(),\n});\ntype MultiStringConfigItemType = z.infer<typeof MultiStringConfigItemDef>;\n\nconst MultiStringConfigItemSchema = (max: number) => z.array(z.string()).max(max).default([]).optional();\ntype MultiStringConfigItemSchemaType = z.infer<ReturnType<typeof MultiStringConfigItemSchema>>;\n\nconst MultiStringConfigItem = (data: Omit<MultiStringConfigItemType, \"type\">) => {\n  return {\n    def: MultiStringConfigItemDef.parse({\n      type: MultiStringConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: MultiStringConfigItemSchema(data.max),\n  };\n};\n\nexport {\n  MultiStringConfigItem,\n  MultiStringConfigItemDef,\n  MultiStringConfigItemSchema,\n  MultiStringConfigItemTypeLiteral,\n  type MultiStringConfigItemSchemaType,\n  type MultiStringConfigItemType,\n};\n","import { z } from \"zod\";\n\nconst ObjectSchemaConfigItemTypeLiteral = \"object-schema\" as const;\n\nconst ObjectSchemaConfigItemDef = z.object({\n  type: z.literal(ObjectSchemaConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  objectSchema: z.any(),\n});\ntype ObjectSchemaConfigItemType = z.infer<typeof ObjectSchemaConfigItemDef>;\n\nconst ObjectSchemaConfigItemSchema = <S extends z.ZodRawShape>(schema: z.ZodObject<S>) => schema.optional();\ntype ObjectSchemaConfigItemSchemaType<S extends z.ZodRawShape = z.ZodRawShape> = z.infer<\n  ReturnType<typeof ObjectSchemaConfigItemSchema<S>>\n>;\n\nconst ObjectSchemaConfigItem = (data: Omit<ObjectSchemaConfigItemType, \"type\">) => {\n  return {\n    def: ObjectSchemaConfigItemDef.parse({\n      type: ObjectSchemaConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: ObjectSchemaConfigItemSchema(data.objectSchema),\n  };\n};\n\nexport {\n  ObjectSchemaConfigItem,\n  ObjectSchemaConfigItemDef,\n  ObjectSchemaConfigItemSchema,\n  ObjectSchemaConfigItemTypeLiteral,\n  type ObjectSchemaConfigItemType,\n  type ObjectSchemaConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nconst RangeConfigItemTypeLiteral = \"range\" as const;\n\nconst RangeConfigItemDef = z.object({\n  type: z.literal(RangeConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  min: z.number().int(),\n  max: z.number().int(),\n  step: z.number().positive(),\n  default: z.number(),\n});\ntype RangeConfigItemDefType = z.infer<typeof RangeConfigItemDef>;\n\nconst RangeConfigItemSchema = (min: number, max: number, step: number, defaultValue: number) =>\n  z.number().min(min).max(max).step(step).default(defaultValue).optional();\ntype RangeConfigItemSchemaType = z.infer<ReturnType<typeof RangeConfigItemSchema>>;\n\nconst RangeConfigItem = (data: Omit<RangeConfigItemDefType, \"type\">) => {\n  return {\n    def: RangeConfigItemDef.parse({\n      type: RangeConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: RangeConfigItemSchema(data.min, data.max, data.step, data.default),\n  };\n};\n\nexport {\n  RangeConfigItem,\n  RangeConfigItemDef,\n  RangeConfigItemSchema,\n  RangeConfigItemTypeLiteral,\n  type RangeConfigItemDefType,\n  type RangeConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nconst SelectBooleanConfigItemTypeLiteral = \"select-boolean\" as const;\n\nconst SelectBooleanConfigItemDef = z.object({\n  type: z.literal(SelectBooleanConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  default: z.boolean().nullable(),\n});\ntype SelectBooleanConfigItemDefType = z.infer<typeof SelectBooleanConfigItemDef>;\n\nconst SelectBooleanConfigItemSchema = (defaultValue: boolean | null) => z.boolean().nullable().default(defaultValue).optional();\ntype SelectBooleanConfigItemSchemaType = z.infer<ReturnType<typeof SelectBooleanConfigItemSchema>>;\n\nconst SelectBooleanConfigItem = (data: Omit<SelectBooleanConfigItemDefType, \"type\">) => {\n  return {\n    def: SelectBooleanConfigItemDef.parse({\n      type: SelectBooleanConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: SelectBooleanConfigItemSchema(data.default),\n  };\n};\n\nexport {\n  SelectBooleanConfigItem,\n  SelectBooleanConfigItemDef,\n  SelectBooleanConfigItemSchema,\n  SelectBooleanConfigItemTypeLiteral,\n  type SelectBooleanConfigItemDefType,\n  type SelectBooleanConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nconst SelectStringConfigItemTypeLiteral = \"select-string\" as const;\n\nconst SelectStringConfigItemDef = z.object({\n  type: z.literal(SelectStringConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  default: z.string(),\n  choices: z.array(z.string()),\n});\ntype SelectStringConfigItemDefType = z.infer<typeof SelectStringConfigItemDef>;\n\nconst SelectStringConfigItemSchema = (defaultValue: string | null, choices: string[]) =>\n  z\n    .enum(choices as [string, ...string[]])\n    .nullable()\n    .default(defaultValue)\n    .optional();\ntype SelectStringConfigItemSchemaType = z.infer<ReturnType<typeof SelectStringConfigItemSchema>>;\n\nconst SelectStringConfigItem = (data: Omit<SelectStringConfigItemDefType, \"type\">) => {\n  return {\n    def: SelectStringConfigItemDef.parse({\n      type: SelectStringConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: SelectStringConfigItemSchema(data.default, data.choices),\n  };\n};\n\nexport {\n  SelectStringConfigItem,\n  SelectStringConfigItemDef,\n  SelectStringConfigItemSchema,\n  SelectStringConfigItemTypeLiteral,\n  type SelectStringConfigItemDefType,\n  type SelectStringConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nimport { MultiStringConfigItemDef, MultiStringConfigItemTypeLiteral } from \"./multi-string-config-item\";\nimport { ObjectSchemaConfigItemDef, ObjectSchemaConfigItemTypeLiteral } from \"./object-schema-config-item\";\nimport { RangeConfigItemDef, RangeConfigItemTypeLiteral } from \"./range-config-item\";\nimport { SelectBooleanConfigItemDef, SelectBooleanConfigItemTypeLiteral } from \"./select-boolean-config-item\";\nimport { SelectStringConfigItemDef, SelectStringConfigItemTypeLiteral } from \"./select-string-config-item\";\n\nconst ConfigItemLiterals = [\n  RangeConfigItemTypeLiteral,\n  MultiStringConfigItemTypeLiteral,\n  SelectStringConfigItemTypeLiteral,\n  ObjectSchemaConfigItemTypeLiteral,\n  SelectBooleanConfigItemTypeLiteral,\n] as const;\nconst ConfigItemEnum = z.enum(ConfigItemLiterals);\ntype ConfigItemEnumType = z.infer<typeof ConfigItemEnum>;\n\nconst ConfigItemDef = z.discriminatedUnion(\"type\", [\n  RangeConfigItemDef,\n  MultiStringConfigItemDef,\n  SelectStringConfigItemDef,\n  SelectBooleanConfigItemDef,\n  ObjectSchemaConfigItemDef,\n]);\ntype ConfigItemDefType = z.infer<typeof ConfigItemDef>;\n\nexport { ConfigItemDef, ConfigItemEnum, ConfigItemLiterals, type ConfigItemDefType, type ConfigItemEnumType };\n","import { z } from \"zod\";\n\nimport { ChatModelPriceType, ModalityEnum, RoleEnum } from \"@adaline/types\";\n\nimport { ConfigItemDef } from \"../../types/config\";\n\nconst ChatModelSchema = <\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  M extends z.ZodEnum<[string, ...string[]]> = typeof ModalityEnum,\n>(\n  Roles: R = RoleEnum as unknown as R,\n  Modalities: M = ModalityEnum as unknown as M\n) =>\n  z.object({\n    name: z.string().min(1),\n    description: z.string().min(1),\n    roles: z.record(Roles, z.string().min(1).optional()),\n    modalities: z.array(Modalities).nonempty(),\n    maxInputTokens: z.number().int().positive().min(1),\n    maxOutputTokens: z.number().int().positive().min(1),\n    maxReasoningTokens: z.number().int().positive().min(1).optional(),\n    config: z\n      .object({\n        def: z.record(z.string().min(1), ConfigItemDef),\n        schema: z.instanceof(z.ZodObject),\n      })\n      .refine(\n        (config) => {\n          const defKeys = Object.keys(config.def);\n          const schemaKeys = Object.keys(config.schema?.shape ?? {});\n          return defKeys.every((key) => schemaKeys.includes(key)) && schemaKeys.every((key) => defKeys.includes(key));\n        },\n        {\n          message: \"Keys in 'config.def' must exactly match keys in 'config.schema'\",\n        }\n      ),\n    price: z.custom<ChatModelPriceType>(),\n  });\ntype ChatModelSchemaType<\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  M extends z.ZodEnum<[string, ...string[]]> = typeof ModalityEnum,\n> = z.infer<ReturnType<typeof ChatModelSchema<R, M>>>;\n\nexport { ChatModelSchema, type ChatModelSchemaType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModalityEnum } from \"@adaline/types\";\n\nimport { ConfigItemDef } from \"../../types/config\";\n\n// TODO: add embedding model properties (dimensions, etc)\nconst EmbeddingModelSchema = <M extends z.ZodEnum<[string, ...string[]]> = typeof EmbeddingModalityEnum>(\n  Modalities: M = EmbeddingModalityEnum as unknown as M\n) =>\n  z.object({\n    name: z.string().min(1),\n    description: z.string().min(1),\n    modalities: z.array(Modalities).nonempty(),\n    maxInputTokens: z.number().int().positive().min(1),\n    maxOutputTokens: z.number().int().positive().min(1),\n    config: z\n      .object({\n        def: z.record(z.string().min(1), ConfigItemDef),\n        schema: z.instanceof(z.ZodObject),\n      })\n      .refine(\n        (config) => {\n          const defKeys = Object.keys(config.def);\n          const schemaKeys = Object.keys(config.schema?.shape ?? {});\n          return defKeys.every((key) => schemaKeys.includes(key)) && schemaKeys.every((key) => defKeys.includes(key));\n        },\n        {\n          message: \"Keys in 'config.def' must exactly match keys in 'config.schema'\",\n        }\n      ),\n  });\ntype EmbeddingModelSchemaType<M extends z.ZodEnum<[string, ...string[]]> = typeof EmbeddingModalityEnum> = z.infer<\n  ReturnType<typeof EmbeddingModelSchema<M>>\n>;\n\nexport { EmbeddingModelSchema, type EmbeddingModelSchemaType };\n","import { z } from \"zod\";\n\nconst Headers = z.record(z.string());\ntype HeadersType = z.infer<typeof Headers>;\n\nexport { Headers, type HeadersType };\n","import { z } from \"zod\";\n\nconst Params = z.record(\n  z.union([\n    z.boolean(),\n    z.string(),\n    z.number(),\n    z.object({}),\n    z.array(z.any()),\n    z.null(),\n    z.undefined(),\n  ])\n);\ntype ParamsType = z.infer<typeof Params>;\n\nexport { Params, type ParamsType };\n","import { z } from \"zod\";\n\nconst Url = z.string().url();\ntype UrlType = z.infer<typeof Url>;\n\nexport { Url, type UrlType };\n","const TEMPERATURE = {\n  type: \"range\",\n  title: \"Temperature\",\n  description:\n    \"Adjusts the model's creativity level. With a setting of 0, the model strictly picks the most probable next word. \\\n    For endeavors that benefit from a dash of inventiveness, consider dialing it up to 0.7 or higher, enabling the model to produce text \\\n    that's unexpectedly fresh.\",\n} as const;\n\nconst MAX_TOKENS = {\n  type: \"range\",\n  title: \"Max tokens\",\n  description:\n    \"Specify the total tokens for generation, where one token approximates four English characters. \\\n    Setting this to 0 defaults to the model's maximum capacity.\",\n} as const;\n\nconst MAX_REASONING_TOKENS = {\n  type: \"range\",\n  title: \"Max reasoning tokens\",\n  description:\n    \"Specify the total tokens for reasoning, where one token approximates four English characters.\",\n} as const;\n\nconst STOP = (max: number) =>\n  ({\n    type: \"multi\",\n    title: \"Stop sequence\",\n    description: `Enter up to ${max} sequences that will halt additional text output. \\\n      The generated text will exclude these sequences.`,\n  }) as const;\n\nconst TOP_A = {\n  type: \"range\",\n  title: \"Top A\",\n  description:\n    \"Considers only the top tokens that have 'sufficiently high' probabilities relative to the most likely token, \\\n    functioning like a dynamic Top-P. \\\n    A lower Top-A value narrows down the token choices based on the highest probability token, \\\n    while a higher Top-A value refines the filtering without necessarily impacting the creativity of the output.\",\n} as const;\n\nconst TOP_P = {\n  type: \"range\",\n  title: \"Top P\",\n  description:\n    \"Selects a subset of likely tokens for generation, restricting choices to the top-P fraction of possibilities, \\\n    such as the top 10% when P=0.1. \\\n    This approach can limit the variety of the output. By default, it's set to 1, indicating no restriction. \\\n    It's advised to adjust this parameter or temperature to modulate output diversity, but not to modify both simultaneously.\",\n} as const;\n\nconst TOP_K = {\n  type: \"range\",\n  title: \"Top K\",\n  description:\n    \"Select only from the highest K probabilities for each following word, effectively eliminating the less likely 'long tail' options.\",\n} as const;\n\nconst MIN_P = {\n  type: \"range\",\n  title: \"Min P\",\n  description:\n    \"Specifies the minimum probability a token must have to be considered, in relation to the probability of the most likely token. \\\n    (This value varies based on the confidence level of the top token.) \\\n    For example, if Min-P is set to 0.1, only tokens with at least 1/10th the probability of the highest-ranked token will be considered.\",\n} as const;\n\nconst FREQUENCY_PENALTY = {\n  type: \"range\",\n  title: \"Frequency penalty\",\n  description:\n    \"Minimize redundancy.\\\n    By assigning a penalty to frequently used tokens within the text, the likelihood of repeating identical phrases is reduced. \\\n    The default setting for this penalty is zero.\",\n} as const;\n\nconst PRESENCE_PENALTY = {\n  type: \"range\",\n  title: \"Presence penalty\",\n  description:\n    \"Enhance the introduction of novel subjects by reducing the preference for tokens that have already appeared in the text, \\\n    thus boosting the chances of exploring fresh topics. \\\n    The standard setting for this is zero.\",\n} as const;\n\nconst SEED = {\n  type: \"range\",\n  title: \"Seed\",\n  description:\n    \"When seed is fixed to a specific value, the model makes a best effort to provide the same response for repeated requests. \\\n    Deterministic output isn't guaranteed. \\\n    Also, changing the model or parameter settings, such as the temperature, \\\n    can cause variations in the response even when you use the same seed value. \\\n    By default, a random seed value is used.\",\n} as const;\n\nconst REPETITION_PENALTY = {\n  type: \"range\",\n  title: \"Repetition penalty\",\n  description:\n    \"Reduces the likelihood of repeating tokens from the input. \\\n    Increasing this value makes the model less prone to repetition, but setting it too high may lead to less coherent output, \\\n    often resulting in run-on sentences missing smaller words. \\\n    The token penalty is scaled according to the original token's probability.\",\n} as const;\n\nconst LOG_PROBS = {\n  type: \"boolean\",\n  title: \"Log probs\",\n  description:\n    \"Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.\",\n} as const;\n\nconst TOP_LOG_PROBS = {\n  type: \"range\",\n  title: \"Top log probs\",\n  description:\n    \"The number of most likely tokens to return at each token position, each with an associated log probability. \\\n    'logprobs' must be set to true if this parameter is used.\",\n} as const;\n\nconst ECHO = {\n  type: \"boolean\",\n  title: \"Echo\",\n  description: \"If true, the response will contain the prompt.\",\n} as const;\n\nconst RESPONSE_FORMAT = {\n  type: \"select\",\n  title: \"Response format\",\n  description:\n    \"Choose the response format of your model. For JSON, you must include the string 'JSON' in some form within your system / user prompt.\",\n} as const;\n\nconst RESPONSE_FORMAT_WITH_SCHEMA = {\n  type: \"select\",\n  title: \"Response format\",\n  description:\n    \"Choose the response format of your model. 'json_object' colloquially known as JSON mode, instructs the model to respond with a valid \\\n  JSON (must include the term 'json' in prompt). 'json_schema' colloquially known as structured outputs, allows you to specify a strict \\\n  response schema that the model will adhere to.\",\n} as const;\n\nconst RESPONSE_SCHEMA = {\n  type: \"object\",\n  title: \"Response schema\",\n  description: \"When response format is set to 'json_schema', the model will return a JSON object of the specified schema.\",\n} as const;\n\nconst CHAT_CONFIG = {\n  TEMPERATURE,\n  MAX_TOKENS,\n  STOP,\n  TOP_A,\n  TOP_P,\n  TOP_K,\n  MIN_P,\n  FREQUENCY_PENALTY,\n  PRESENCE_PENALTY,\n  REPETITION_PENALTY,\n  SEED,\n  LOG_PROBS,\n  TOP_LOG_PROBS,\n  ECHO,\n  RESPONSE_FORMAT,\n  RESPONSE_FORMAT_WITH_SCHEMA,\n  RESPONSE_SCHEMA,\n  MAX_REASONING_TOKENS,\n};\n\nexport { CHAT_CONFIG };\n","const DIMENSIONS = {\n  type: \"range\",\n  title: \"Dimensions\",\n  description: \"Select the number of dimensions for the word embedding.\",\n} as const;\n\nconst ENCODING_FORMAT = {\n  type: \"select\",\n  title: \"Encoding format\",\n  description: \"Select the encoding format for the word embedding.\",\n} as const;\n\nconst EMBEDDING_CONFIG = {\n  DIMENSIONS,\n  ENCODING_FORMAT,\n};\n\nexport { EMBEDDING_CONFIG };\n","const getErrorMessage = (error: unknown | undefined): string => {\n  if (error == null) return \"unknown error\";\n  if (typeof error === \"string\") return error;\n  if (error instanceof Error) return error.message;\n  return JSON.stringify(error);\n};\n\nexport { getErrorMessage };\n","const removeUndefinedEntries = <T = unknown>(record: Record<string, T | undefined>): Record<string, T> => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  return Object.fromEntries(Object.entries(record).filter(([_, value]) => value != null)) as Record<string, T>;\n};\n\nexport { removeUndefinedEntries };\n","const isRunningInBrowser = () => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof navigator !== \"undefined\";\n};\n\nexport { isRunningInBrowser };\n","import { isRunningInBrowser } from \"./is-running-in-browser\";\n\nconst convertBase64ToUint8Array = (base64String: string): Uint8Array => {\n  const base64Url = base64String.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  const latin1string = globalThis.atob(base64Url);\n  return Uint8Array.from(latin1string, (byte) => byte.codePointAt(0)!);\n};\n\nconst convertUint8ArrayToBase64 = (array: Uint8Array): string => {\n  let latin1string = \"\";\n\n  // Note: regular for loop to support older JavaScript versions that\n  // do not support for..of on Uint8Array\n  for (let i = 0; i < array.length; i++) {\n    latin1string += String.fromCodePoint(array[i]);\n  }\n\n  return globalThis.btoa(latin1string);\n};\n\nconst encodedBase64ToString = (base64: string): string => {\n  if (isRunningInBrowser()) {\n    const binaryString = atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    const decoder = new TextDecoder(\"utf-8\");\n    return decoder.decode(bytes);\n  } else {\n    return Buffer.from(base64, \"base64\").toString(\"utf-8\");\n  }\n};\n\nconst getMimeTypeFromBase64 = (base64: string): string => {\n  const mimeTypePrefix = base64.split(\";\")[0];\n  const mimeType = mimeTypePrefix.split(\"/\")[1];\n  return mimeType;\n};\n\nexport { convertBase64ToUint8Array, convertUint8ArrayToBase64, encodedBase64ToString, getMimeTypeFromBase64 };\n","const urlWithoutTrailingSlash = (url: string): string => {\n  return url?.replace(/\\/$/, \"\");\n};\n\nexport { urlWithoutTrailingSlash };\n"]}