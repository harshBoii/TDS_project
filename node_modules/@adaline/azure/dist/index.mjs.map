{"version":3,"sources":["../src/models/chat-models/chat-model-options.azure.ts","../../../../packages/types/src/message/roles.ts","../../../../packages/types/src/message/content/image-content.ts","../../../../packages/types/src/message/content/reasoning-content.ts","../../../../packages/types/src/message/content/text-content.ts","../../../../packages/types/src/message/content/tool-call-content.ts","../../../../packages/types/src/message/content/tool-response-content.ts","../../../../packages/types/src/message/content/content.ts","../../../../packages/types/src/message/message.ts","../../../../packages/types/src/chat/chat-response.ts","../../../../packages/types/src/config/config.ts","../../../../packages/types/src/config/response-schema.config.ts","../../../../packages/types/src/embedding/embedding-requests.ts","../../../../packages/types/src/embedding/embedding-response.ts","../../../../packages/types/src/errors/gateway-base.error.ts","../../../../packages/types/src/pricing/pricing-tiers.ts","../../../../packages/types/src/tool/function-tool.ts","../../../../packages/types/src/tool/tool.ts","../../../../packages/types/src/utils/create-message.ts","../../../../packages/provider/src/errors/provider.error.ts","../../../../packages/provider/src/errors/model.error.ts","../../../../packages/provider/src/errors/model-response.error.ts","../../../../packages/provider/src/errors/invalid-model-request.error.ts","../../../../packages/provider/src/errors/invalid-config.error.ts","../../../../packages/provider/src/errors/invalid-messages.error.ts","../../../../packages/provider/src/errors/invalid-tools.error.ts","../../../../packages/provider/src/errors/invalid-embedding-requests.error.ts","../../../../packages/provider/src/types/config/multi-string-config-item.ts","../../../../packages/provider/src/types/config/object-schema-config-item.ts","../../../../packages/provider/src/types/config/range-config-item.ts","../../../../packages/provider/src/types/config/select-boolean-config-item.ts","../../../../packages/provider/src/types/config/select-string-config-item.ts","../../../../packages/provider/src/types/config/config-item.ts","../../../../packages/provider/src/model/chat-model/chat-model.schema.v1.ts","../../../../packages/provider/src/model/embedding-model/embedding-model.schema.v1.ts","../../../../packages/provider/src/types/headers.ts","../../../../packages/provider/src/types/params.ts","../../../../packages/provider/src/types/url.ts","../../../../packages/provider/src/utils/common-config.def.chat-model.ts","../../../../packages/provider/src/utils/remove-undefined-entries.ts","../../../../packages/provider/src/utils/is-running-in-browser.ts","../../../../packages/provider/src/utils/base64.ts","../../../../packages/provider/src/utils/url.ts","../../openai/src/configs/chat-model/common.config.chat-model.openai.ts","../../openai/src/configs/chat-model/base.config.chat-model.openai.ts","../../openai/src/configs/chat-model/response-schema.config.chat-model.openai.ts","../../openai/src/configs/chat-model/o-series.config.chat-model.openai.ts","../../openai/src/configs/chat-model/response-format.config.chat-model.openai.ts","../../openai/src/configs/embedding-model/common.config.embedding-model.openai.ts","../../openai/src/configs/embedding-model/base.config.embedding-model.openai.ts","../../openai/src/configs/embedding-model/dimensions.config.embedding-model.openai.ts","../../openai/src/configs/configs.openai.ts","../../openai/src/models/pricing.json","../../openai/src/provider/provider.openai.ts","../../openai/src/models/chat-models/types/roles.chat-model.openai.ts","../../openai/src/models/chat-models/types/modalities.chat-model.openai.ts","../../openai/src/models/chat-models/types/response.chat-model.openai.ts","../../openai/src/models/chat-models/types/request.chat-model.openai.ts","../../openai/src/models/chat-models/base-chat-model.openai.ts","../../openai/src/models/chat-models/gpt-3-5-turbo-0125.openai.ts","../../openai/src/models/chat-models/gpt-3-5-turbo-1106.openai.ts","../../openai/src/models/chat-models/gpt-3-5-turbo.openai.ts","../../openai/src/models/chat-models/gpt-4-0125-preview.openai.ts","../../openai/src/models/chat-models/gpt-4-0613.openai.ts","../../openai/src/models/chat-models/gpt-4-1106-preview.openai.ts","../../openai/src/models/chat-models/gpt-4-turbo-2024-04-09.openai.ts","../../openai/src/models/chat-models/gpt-4-turbo-preview.openai.ts","../../openai/src/models/chat-models/gpt-4-turbo.openai.ts","../../openai/src/models/chat-models/gpt-4.openai.ts","../../openai/src/models/chat-models/gpt-4o-2024-05-13.openai.ts","../../openai/src/models/chat-models/gpt-4o-2024-08-06.openai.ts","../../openai/src/models/chat-models/gpt-4o-mini-2024-07-18.openai.ts","../../openai/src/models/chat-models/gpt-4o-mini.openai.ts","../../openai/src/models/chat-models/gpt-4o.openai.ts","../../openai/src/models/chat-models/o1-2024-12-17.openai.ts","../../openai/src/models/chat-models/o1.openai.ts","../../openai/src/models/chat-models/o3-2025-04-16.openai.ts","../../openai/src/models/chat-models/o3.openai.ts","../../openai/src/models/chat-models/o3-mini.openai.ts","../../openai/src/models/chat-models/o3-mini-2025-01-31.openai.ts","../../openai/src/models/chat-models/o4-mini-2025-04-16.openai.ts","../../openai/src/models/chat-models/o4-mini.openai.ts","../../openai/src/models/embedding-models/types/modalitites.embedding-model.openai.ts","../../openai/src/models/embedding-models/types/response.embedding-model.openai.ts","../../openai/src/models/embedding-models/types/request.embedding-model.openai.ts","../../openai/src/models/embedding-models/base-embedding-model.openai.ts","../../openai/src/models/embedding-models/text-embedding-ada-002.openai.ts","../../openai/src/models/embedding-models/text-embedding-3-small.openai.ts","../../openai/src/models/embedding-models/text-embedding-3-large.openai.ts","../src/models/chat-models/openai/base-chat-model-schema.openai.azure.ts","../src/models/chat-models/openai/base-chat-model.openai.azure.ts","../src/models/chat-models/openai/gpt-4o.openai.azure.ts","../src/models/chat-models/openai/gpt-4o-mini.openai.azure.ts","../src/models/chat-models/openai/gpt-4o-mini-2024-07-18.openai.azure.ts","../src/models/chat-models/openai/gpt-4o-2024-08-06.openai.azure.ts","../src/models/chat-models/openai/gpt-4o-2024-05-13.openai.azure.ts","../src/models/chat-models/openai/gpt-4.openai.azure.ts","../src/models/chat-models/openai/gpt-4-turbo-2024-04-09.openai.azure.ts","../src/models/chat-models/openai/gpt-4-1106-preview.openai.azure.ts","../src/models/chat-models/openai/gpt-4-0613.openai.azure.ts","../src/models/chat-models/openai/gpt-3-5-turbo.openai.azure.ts","../src/models/chat-models/openai/gpt-3-5-turbo-1106.openai.azure.ts","../src/models/chat-models/openai/gpt-3-5-turbo-0125.openai.azure.ts","../src/models/embedding-models/embedding-model-options.azure.ts","../src/models/embedding-models/openai/base-embedding-model-schema.openai.azure.ts","../src/models/embedding-models/openai/base-embedding-model.openai.azure.ts","../src/models/embedding-models/openai/text-embedding-3-large.openai.azure.ts","../src/models/embedding-models/openai/text-embedding-ada-002.openai.azure.ts","../src/models/embedding-models/openai/text-embedding-3-small.openai.azure.ts","../src/provider/provider.azure.ts"],"names":["BaseChatModelOptions","z","SystemRoleLiteral","UserRoleLiteral","AssistantRoleLiteral","ToolRoleLiteral","RoleLiterals","RoleEnum","PartialRoleLiterals","PartialRoleEnum","ImageModalityLiteral","Base64ImageContentTypeLiteral","Base64ImageContentMediaTypeLiterals","Base64ImageContentValue","UrlImageContentTypeLiteral","UrlImageContentValue","ImageContentValue","ImageContentDetails","ImageContentDetailsLiteral","ImageContent","Metadata","ReasoningModalityLiteral","PartialReasoningModalityLiteral","ReasoningContentTypeLiteral","RedactedReasoningContentTypeLiteral","ReasoningContentValue","RedactedReasoningContentValue","ReasoningContentValueUnion","ReasoningContent","PartialReasoningContentValue","PartialReasoningContentValueUnion","PartialReasoningContent","TextModalityLiteral","TextContent","PartialTextModalityLiteral","PartialTextContent","ToolCallModalityLiteral","ToolCallContent","PartialToolCallModalityLiteral","PartialToolCallContent","ToolResponseModalityLiteral","ToolResponseContent","ModalityLiterals","ModalityEnum","Content","TextContentMetadata","ImageContentMetadata","ToolCallContentMetadata","ToolResponseContentMetadata","ReasoningContentMetadata","PartialModalityLiterals","PartialContent","PartialTextContentMetadata","PartialToolCallContentMetadata","PartialReasoningContentMetadata","Message","Role","MessageMetadata","PartialMessage","ChatUsage","ChatBaseLogProb","ChatLogProb","ChatLogProbs","ChatResponse","PartialChatUsage","Config","ResponseSchemaTypes","ResponseSchemaTypesLiteral","ResponseSchemaProperty","ResponseSchemaStructure","ResponseSchema","EmbeddingTextModalityLiteral","EmbeddingTokenModalityLiteral","EmbeddingModalityLiterals","EmbeddingModalityEnum","TextEmbeddingRequests","TokenEmbeddingRequests","EmbeddingRequests","FloatEmbeddingLiteral","FloatEmbedding","Base64EmbeddingLiteral","Base64Embedding","EmbeddingsUsage","EmbeddingResponse","safeStringify","obj","seen","key","value","getErrorMessage","error","GatewayBaseErrorLiteral","GatewayBaseError","_GatewayBaseError","info","cause","name","ChatModelTokenPairPrice","ChatModelTokenTypePrice","ChatModelTokenRangePrice","t","data","ctx","tokenRanges","i","prev","curr","last","FunctionToolLiteral","FunctionParameterTypesLiteral","FunctionParameter","FunctionParameters","Function","ToolTypesLiteral","FunctionTool","ToolLiterals","Tool","FunctionToolMetadata","createTextContent","content","createToolCallContent","index","id","args","createPartialTextMessage","role","createPartialToolCallMessage","ProviderErrorLiteral","ProviderError","_ProviderError","ModelErrorLiteral","ModelError","_ModelError","ModelResponseErrorLiteral","ModelResponseError","_ModelResponseError","InvalidModelRequestErrorLiteral","InvalidModelRequestError","_InvalidModelRequestError","InvalidConfigErrorLiteral","InvalidConfigError","_InvalidConfigError","InvalidMessagesErrorLiteral","InvalidMessagesError","_InvalidMessagesError","InvalidToolsErrorLiteral","InvalidToolsError","_InvalidToolsError","InvalidEmbeddingRequestsErrorLiteral","InvalidEmbeddingRequestsError","_InvalidEmbeddingRequestsError","MultiStringConfigItemTypeLiteral","MultiStringConfigItemDef","MultiStringConfigItemSchema","max","MultiStringConfigItem","__spreadValues","ObjectSchemaConfigItemTypeLiteral","ObjectSchemaConfigItemDef","ObjectSchemaConfigItemSchema","schema","ObjectSchemaConfigItem","RangeConfigItemTypeLiteral","RangeConfigItemDef","RangeConfigItemSchema","min","step","defaultValue","RangeConfigItem","SelectBooleanConfigItemTypeLiteral","SelectBooleanConfigItemDef","SelectBooleanConfigItemSchema","SelectBooleanConfigItem","SelectStringConfigItemTypeLiteral","SelectStringConfigItemDef","SelectStringConfigItemSchema","choices","SelectStringConfigItem","ConfigItemLiterals","ConfigItemDef","ChatModelSchema","Roles","Modalities","config","_a","_b","defKeys","schemaKeys","EmbeddingModelSchema","Url","TEMPERATURE","MAX_TOKENS","MAX_REASONING_TOKENS","STOP","TOP_A","TOP_P","TOP_K","MIN_P","FREQUENCY_PENALTY","PRESENCE_PENALTY","SEED","REPETITION_PENALTY","LOG_PROBS","TOP_LOG_PROBS","ECHO","RESPONSE_FORMAT","RESPONSE_FORMAT_WITH_SCHEMA","RESPONSE_SCHEMA","CHAT_CONFIG","removeUndefinedEntries","record","_","getMimeTypeFromBase64","base64","urlWithoutTrailingSlash","url","temperature","maxTokens","maxOutputTokens","stop","maxSequences","topP","frequencyPenalty","presencePenalty","seed","logProbs","topLogProbs","toolChoice","ChatModelBaseConfigSchema","ChatModelBaseConfigDef","responseSchema","responseFormat","ChatModelResponseSchemaConfigDef","__spreadProps","ChatModelResponseSchemaConfigSchema","reasoningEffort","ChatModelOSeriesConfigDef","ChatModelOSeriesConfigSchema","ChatModelResponseFormatConfigDef","ChatModelResponseFormatConfigSchema","encodingFormat","dimensions","maxDimensions","EmbeddingModelBaseConfigSchema","EmbeddingModelBaseConfigDef","EmbeddingModelDimensionsConfigSchema","EmbeddingModelDimensionsConfigDef","OpenAIChatModelConfigs","OpenAIEmbeddingModelConfigs","pricing_default","ProviderLiteral","OpenAI","GPT_3_5_TurboLiteral","GPT_3_5_Turbo","GPT_3_5_TurboOptions","GPT_3_5_TurboSchema","GPT_3_5_Turbo_0125Literal","GPT_3_5_Turbo_0125","GPT_3_5_Turbo_0125Options","GPT_3_5_Turbo_0125Schema","GPT_3_5_Turbo_1106Literal","GPT_3_5_Turbo_1106","GPT_3_5_Turbo_1106Options","GPT_3_5_Turbo_1106Schema","GPT_4_0125_PreviewLiteral","GPT_4_0125_Preview","GPT_4_0125_PreviewOptions","GPT_4_0125_PreviewSchema","GPT_4_0613Literal","GPT_4_0613","GPT_4_0613Options","GPT_4_0613Schema","GPT_4_1106_PreviewLiteral","GPT_4_1106_Preview","GPT_4_1106_PreviewOptions","GPT_4_1106_PreviewSchema","GPT_4_Turbo_2024_04_09Literal","GPT_4_Turbo_2024_04_09","GPT_4_Turbo_2024_04_09Options","GPT_4_Turbo_2024_04_09Schema","GPT_4_Turbo_PreviewLiteral","GPT_4_Turbo_Preview","GPT_4_Turbo_PreviewOptions","GPT_4_Turbo_PreviewSchema","GPT_4_TurboLiteral","GPT_4_Turbo","GPT_4_TurboOptions","GPT_4_TurboSchema","GPT_4Literal","GPT_4","GPT_4Options","GPT_4Schema","GPT_4o_2024_08_06Literal","GPT_4o_2024_08_06","GPT_4o_2024_08_06Options","GPT_4o_2024_08_06Schema","GPT_4o_MiniLiteral","GPT_4o_Mini","GPT_4o_MiniOptions","GPT_4o_MiniSchema","GPT_4oLiteral","GPT_4o","GPT_4oOptions","GPT_4oSchema","GPT_4o_Mini_2024_07_18Literal","GPT_4o_Mini_2024_07_18","GPT_4o_Mini_2024_07_18Options","GPT_4o_Mini_2024_07_18Schema","GPT_4o_2024_05_13Literal","GPT_4o_2024_05_13","GPT_4o_2024_05_13Options","GPT_4o_2024_05_13Schema","O1Literal","O1","O1Options","O1Schema","O1_2024_12_17Literal","O1_2024_12_17","O1_2024_12_17Options","O1_2024_12_17Schema","O3Mini2025_01_31Literal","O3Mini2025_01_31","O3Mini2025_01_31Options","O3Mini2025_01_31Schema","O3MiniLiteral","O3Mini","O3MiniOptions","O3MiniSchema","O3_2025_04_16Literal","O3_2025_04_16","O3_2025_04_16Options","O3_2025_04_16Schema","O3Literal","O3","O3Options","O3Schema","O4_Mini_2025_04_16Literal","O4_Mini_2025_04_16","O4_Mini_2025_04_16Options","O4_Mini_2025_04_16Schema","O4_MiniLiteral","O4_Mini","O4_MiniOptions","O4_MiniSchema","Text_Embedding_Ada002Literal","Text_Embedding_Ada002","Text_Embedding_Ada002_Options","Text_Embedding_Ada002Schema","Text_Embedding_3_SmallLiteral","Text_Embedding_3_Small","Text_Embedding_3_Small_Options","Text_Embedding_3_SmallSchema","Text_Embedding_3_LargeLiteral","Text_Embedding_3_Large","Text_Embedding_3_Large_Options","Text_Embedding_3_LargeSchema","acc","options","modelName","model","parsedOptions","OpenAIChatModelRoles","OpenAIChatModelRolesMap","OpenAIChatModelModalities","OpenAIChatModelModalitiesEnum","OpenAIChatModelTextToolModalities","OpenAIChatModelTextToolModalitiesEnum","OpenAIBaseLogProb","OpenAILogProb","OpenAIToolCallsCompleteChatResponse","OpenAICompleteChatResponse","OpenAIToolCallsStreamChatResponse","OpenAIStreamChatResponse","OpenAIChatRequestTool","OpenAIChatRequestToolChoiceEnum","OpenAIChatRequestToolChoiceFunction","OpenAIChatRequestResponseFormat","OpenAIChatRequestTextContent","OpenAIChatRequestImageContent","OpenAIChatRequestToolCallContent","OpenAIChatRequestSystemMessage","OpenAIChatRequestUserMessage","OpenAIChatRequestAssistantMessage","OpenAIChatRequestToolMessage","OpenAIChatRequestMessage","OpenAIChatRequest","BaseChatModel","modelSchema","responseHeaders","parseDuration","duration","regex","timeUnits","match","totalMs","unit","resetRequestsDelayMs","resetTokensDelayMs","shouldRetry","delayMs","messages","message","request","safeRequest","parsedRequest","_config","toolCallMap","_content","c","assistantContent","toolCall","toolCallContent","toolResponse","tools","tool","_toolChoice","_parsedConfig","parsedConfig","transformedConfig","def","paramKey","paramValue","configToolChoice","parsedMessages","parsedMessage","textContent","toolCalls","imageContent","combinedContent","parsedTool","__async","resolve","transformedMessages","transformedTools","response","safe","parsedResponse","usage","_logProbs","logProb","topLogProb","chunk","buffer","__asyncGenerator","lines","newBuffer","currentIndex","newlineIndex","line","jsonStr","structuredLine","partialResponse","headers","query","__yieldStar","sanitizedHeaders","GPT_3_5_Turbo_0125Description","GPT_3_5_Turbo_1106Description","GPT_3_5_TurboDescription","GPT_4_0125_PreviewDescription","GPT_4_0613Description","GPT_4_1106_PreviewDescription","GPT_4_Turbo_2024_04_09Description","GPT_4_Turbo_PreviewDescription","GPT_4_TurboDescription","GPT_4Description","GPT_4o_2024_05_13Description","GPT_4o_2024_08_06Description","GPT_4o_MiniDescription","GPT_4oDescription","O1_2024_12_17Description","O1Description","O3_2025_04_16Description","O3Description","O3MiniDescription","O3Mini2025_01_31Description","O4_Mini_2025_04_16Description","O4_MiniDescription","OpenAIEmbeddingModelModalities","OpenAIEmbeddingModelModalitiesEnum","OpenAIGetEmbeddingsResponse","OpenAIEmbeddingRequestInput","OpenAIEmbeddingRequest","BaseEmbeddingModelOptions","BaseEmbeddingModel","requests","embeddingRequests","embeddingFormat","_parsedRequests","embeddings","item","Text_Embedding_Ada002Description","Text_Embedding_3_SmallDescription","Text_Embedding_3_LargeDescription","BaseChatModelSchema","jt","g","C","O","r","BaseChatModelOpenAI","u","baseUrl","Azure","azureApiVersion","azureDeploymentUrl","B","Io","Po","bo","Co","Oo","Mo","_o","go","fo","uo","co","mo","BaseEmbeddingModelSchema","At","J","K","v","BaseEmbeddingModelOpenAI","Ho","Text_Embedding_3_LargeOptions","Text_Embedding_Ada_002Literal","Text_Embedding_Ada_002Schema","Uo","Text_Embedding_Ada_002Options","Text_Embedding_Ada_002","Fo","Text_Embedding_3_SmallOptions","resourceName","provider"],"mappings":"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","file":"index.mjs","sourcesContent":["import { z } from \"zod\";\n\nconst BaseChatModelOptions = z.object({\n  apiKey: z.string().min(1),\n  deploymentId: z.string().min(1),\n  resourceName: z.string().min(1).optional(),\n  baseUrl: z.string().optional(),\n});\n\ntype BaseChatModelOptionsType = z.infer<typeof BaseChatModelOptions>;\n\nexport { BaseChatModelOptions, type BaseChatModelOptionsType };\n","import { z } from \"zod\";\n\nconst SystemRoleLiteral = \"system\" as const;\nconst UserRoleLiteral = \"user\" as const;\nconst AssistantRoleLiteral = \"assistant\" as const;\nconst ToolRoleLiteral = \"tool\" as const;\n\nconst RoleLiterals = [SystemRoleLiteral, UserRoleLiteral, AssistantRoleLiteral, ToolRoleLiteral] as const;\nconst RoleEnum = z.enum(RoleLiterals);\ntype RoleEnumType = z.infer<typeof RoleEnum>;\n\nconst PartialRoleLiterals = [AssistantRoleLiteral] as const;\nconst PartialRoleEnum = z.enum(PartialRoleLiterals);\ntype PartialRoleEnumType = z.infer<typeof PartialRoleEnum>;\n\nexport {\n  UserRoleLiteral,\n  ToolRoleLiteral,\n  SystemRoleLiteral,\n  AssistantRoleLiteral,\n  RoleEnum,\n  RoleLiterals,\n  PartialRoleEnum,\n  PartialRoleLiterals,\n  type RoleEnumType,\n  type PartialRoleEnumType,\n};\n","import { z } from \"zod\";\n\nconst ImageModalityLiteral = \"image\" as const;\n\nconst Base64ImageContentTypeLiteral = \"base64\" as const;\nconst Base64ImageContentMediaTypeLiterals = [\"png\", \"jpeg\", \"webp\", \"gif\"] as const;\nconst Base64ImageContentValue = z.object({\n  type: z.literal(Base64ImageContentTypeLiteral),\n  base64: z.string(),\n  mediaType: z.enum(Base64ImageContentMediaTypeLiterals),\n});\ntype Base64ImageContentValueType = z.infer<typeof Base64ImageContentValue>;\n\nconst UrlImageContentTypeLiteral = \"url\" as const;\nconst UrlImageContentValue = z.object({\n  type: z.literal(UrlImageContentTypeLiteral),\n  url: z.string(),\n});\ntype UrlImageContentValueType = z.infer<typeof UrlImageContentValue>;\n\nconst ImageContentValue = z.discriminatedUnion(\"type\", [Base64ImageContentValue, UrlImageContentValue]);\ntype ImageContentValueType = z.infer<typeof ImageContentValue>;\n\nconst ImageContentDetails = [\"low\", \"medium\", \"high\", \"auto\"] as const;\nconst ImageContentDetailsLiteral = z.enum(ImageContentDetails);\ntype ImageContentDetailsLiteralType = z.infer<typeof ImageContentDetailsLiteral>;\nconst ImageContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ImageModalityLiteral),\n    detail: ImageContentDetailsLiteral,\n    value: ImageContentValue,\n    metadata: Metadata,\n  });\ntype ImageContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ImageContent<M>>>;\n\nexport {\n  Base64ImageContentValue,\n  ImageContent,\n  ImageContentDetails,\n  ImageContentDetailsLiteral,\n  ImageModalityLiteral,\n  UrlImageContentValue,\n  UrlImageContentTypeLiteral,\n  Base64ImageContentTypeLiteral,\n  Base64ImageContentMediaTypeLiterals,\n  type Base64ImageContentValueType,\n  type ImageContentDetailsLiteralType,\n  type ImageContentType,\n  type ImageContentValueType,\n  type UrlImageContentValueType,\n};\n","import { z } from \"zod\";\n\nconst ReasoningModalityLiteral = \"reasoning\" as const;\nconst PartialReasoningModalityLiteral = \"partial-reasoning\" as const;\n\nconst ReasoningContentTypeLiteral = \"thinking\" as const;\nconst RedactedReasoningContentTypeLiteral = \"redacted\" as const;\n\nconst ReasoningContentValue = z.object({\n  type: z.literal(ReasoningContentTypeLiteral),\n  thinking: z.string(),\n  signature: z.string(),\n});\ntype ReasoningContentValueType = z.infer<typeof ReasoningContentValue>;\n\nconst RedactedReasoningContentValue = z.object({\n  type: z.literal(RedactedReasoningContentTypeLiteral),\n  data: z.string()\n});\ntype RedactedReasoningContentValueType = z.infer<typeof RedactedReasoningContentValue>;\n\nconst ReasoningContentValueUnion = z.discriminatedUnion(\"type\", [ ReasoningContentValue, RedactedReasoningContentValue ]);\ntype ReasoningContentValueUnionType = z.infer<typeof ReasoningContentValueUnion>;\n\nconst ReasoningContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ReasoningModalityLiteral),\n    value: ReasoningContentValueUnion,\n    metadata: Metadata,\n  });\n\ntype ReasoningContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ReasoningContent<M>>>;\n\nconst PartialReasoningContentValue = z.object({\n  type: z.literal(ReasoningContentTypeLiteral),\n  thinking: ReasoningContentValue.shape.thinking.optional(),\n  signature: ReasoningContentValue.shape.signature.optional(),\n});\nconst PartialReasoningContentValueUnion = z.discriminatedUnion(\"type\", [ \n  PartialReasoningContentValue, \n  RedactedReasoningContentValue \n]);\n\nconst PartialReasoningContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(PartialReasoningModalityLiteral),\n    value: PartialReasoningContentValueUnion,\n    metadata: Metadata,\n  });\ntype PartialReasoningContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof PartialReasoningContent<M>>>;\n\nexport {\n  ReasoningContent,\n  PartialReasoningContent,\n  PartialReasoningModalityLiteral,\n  ReasoningContentTypeLiteral,\n  ReasoningContentValue,\n  PartialReasoningContentValue,\n  ReasoningContentValueUnion,\n  PartialReasoningContentValueUnion,\n  ReasoningModalityLiteral,\n  RedactedReasoningContentTypeLiteral,\n  RedactedReasoningContentValue,\n  type PartialReasoningContentType,\n  type ReasoningContentType,\n  type ReasoningContentValueType,\n  type ReasoningContentValueUnionType,\n  type RedactedReasoningContentValueType,\n};\n","import { z } from \"zod\";\n\nconst TextModalityLiteral = \"text\" as const;\n\nconst TextContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(TextModalityLiteral),\n    value: z.string(),\n    metadata: Metadata,\n  });\ntype TextContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof TextContent<M>>>;\nconst PartialTextModalityLiteral = \"partial-text\" as const;\n\nconst PartialTextContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(PartialTextModalityLiteral),\n    value: z.string(),\n    metadata: Metadata,\n  });\ntype PartialTextContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof PartialTextContent<M>>>;\n\nexport {\n  TextContent,\n  PartialTextContent,\n  TextModalityLiteral,\n  PartialTextModalityLiteral,\n  type TextContentType,\n  type PartialTextContentType,\n};\n","import { z } from \"zod\";\n\nconst ToolCallModalityLiteral = \"tool-call\" as const;\n\nconst ToolCallContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ToolCallModalityLiteral),\n    index: z.number().int().nonnegative(),\n    id: z.string().min(1),\n    name: z.string().min(1),\n    arguments: z.string(),\n    metadata: Metadata,\n  });\ntype ToolCallContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ToolCallContent<M>>>;\nconst PartialToolCallModalityLiteral = \"partial-tool-call\" as const;\n\nconst PartialToolCallContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(PartialToolCallModalityLiteral),\n    index: z.number().int().nonnegative(),\n    id: z.string().optional(),\n    name: z.string().optional(),\n    arguments: z.string().optional(),\n    metadata: Metadata,\n  });\ntype PartialToolCallContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof PartialToolCallContent<M>>>;\n\nexport {\n  ToolCallContent,\n  PartialToolCallContent,\n  ToolCallModalityLiteral,\n  PartialToolCallModalityLiteral,\n  type ToolCallContentType,\n  type PartialToolCallContentType,\n};\n","import { z } from \"zod\";\n\nconst ToolResponseModalityLiteral = \"tool-response\" as const;\n\nconst ToolResponseContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ToolResponseModalityLiteral),\n    index: z.number().int().nonnegative(),\n    id: z.string().min(1),\n    name: z.string().min(1),\n    data: z.string(),\n    metadata: Metadata,\n  });\ntype ToolResponseContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ToolResponseContent<M>>>;\n\nexport { ToolResponseContent, ToolResponseModalityLiteral, type ToolResponseContentType };\n","import { z } from \"zod\";\n\nimport { ImageContent, ImageModalityLiteral } from \"./image-content\";\nimport { PartialReasoningContent, PartialReasoningModalityLiteral, ReasoningContent, ReasoningModalityLiteral } from \"./reasoning-content\";\nimport { PartialTextContent, PartialTextModalityLiteral, TextContent, TextModalityLiteral } from \"./text-content\";\nimport { PartialToolCallContent, PartialToolCallModalityLiteral, ToolCallContent, ToolCallModalityLiteral } from \"./tool-call-content\";\nimport { ToolResponseContent, ToolResponseModalityLiteral } from \"./tool-response-content\";\n\nconst ModalityLiterals = [\n  TextModalityLiteral,\n  ImageModalityLiteral,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n  ReasoningModalityLiteral,\n] as const;\nconst ModalityEnum = z.enum(ModalityLiterals);\ntype ModalityEnumType = z.infer<typeof ModalityEnum>;\n\nconst Content = <\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n  TCCM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  TextContentMetadata: TCM = z.undefined() as TCM,\n  ImageContentMetadata: ICM = z.undefined() as ICM,\n  ToolCallContentMetadata: CCM = z.undefined() as CCM,\n  ToolResponseContentMetadata: RCM = z.undefined() as RCM,\n  ReasoningContentMetadata: TCCM = z.undefined() as TCCM\n) =>\n  z.discriminatedUnion(\"modality\", [\n    TextContent(TextContentMetadata),\n    ImageContent(ImageContentMetadata),\n    ToolCallContent(ToolCallContentMetadata),\n    ToolResponseContent(ToolResponseContentMetadata),\n    ReasoningContent(ReasoningContentMetadata),\n  ]);\ntype ContentType<\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n> = z.infer<ReturnType<typeof Content<TCM, ICM, CCM, RCM>>>;\n\nconst PartialModalityLiterals = [PartialTextModalityLiteral, PartialToolCallModalityLiteral, PartialReasoningModalityLiteral] as const;\nconst PartialModalityEnum = z.enum(PartialModalityLiterals);\ntype PartialModalityEnumType = z.infer<typeof PartialModalityEnum>;\n\nconst PartialContent = <\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  PartialTextContentMetadata: TCM = z.undefined() as TCM,\n  PartialToolCallContentMetadata: CCM = z.undefined() as CCM,\n  PartialReasoningContentMetadata: z.ZodTypeAny = z.undefined() as z.ZodTypeAny as RCM\n) =>\n  z.discriminatedUnion(\"modality\", [\n    PartialTextContent(PartialTextContentMetadata),\n    PartialToolCallContent(PartialToolCallContentMetadata),\n    PartialReasoningContent(PartialReasoningContentMetadata),\n  ]);\ntype PartialContentType<TCM extends z.ZodTypeAny = z.ZodUndefined, CCM extends z.ZodTypeAny = z.ZodUndefined> = z.infer<\n  ReturnType<typeof PartialContent<TCM, CCM>>\n>;\n\nexport {\n  Content,\n  ModalityEnum,\n  ModalityLiterals,\n  PartialContent,\n  PartialModalityEnum,\n  PartialModalityLiterals,\n  type ContentType,\n  type ModalityEnumType,\n  type PartialContentType,\n  type PartialModalityEnumType,\n};\n","import { z } from \"zod\";\n\nimport { Content, PartialContent } from \"./content\";\nimport { PartialRoleEnum, RoleEnum } from \"./roles\";\n\nconst Message = <\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n  RTCM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  Role: R = RoleEnum as unknown as R,\n  TextContentMetadata: TCM = z.undefined() as TCM,\n  ImageContentMetadata: ICM = z.undefined() as ICM,\n  ToolCallContentMetadata: CCM = z.undefined() as CCM,\n  ToolResponseContentMetadata: RCM = z.undefined() as RCM,\n  MessageMetadata: MM = z.undefined() as MM,\n  ReasoningContentMetadata: z.ZodTypeAny = z.undefined() as RTCM\n) =>\n  z.object({\n    role: Role,\n    content: z.array(\n      Content(TextContentMetadata, ImageContentMetadata, ToolCallContentMetadata, ToolResponseContentMetadata, ReasoningContentMetadata)\n    ),\n    metadata: MessageMetadata,\n  });\ntype MessageType<\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n  RTCM extends z.ZodTypeAny = z.ZodUndefined,\n> = z.infer<ReturnType<typeof Message<R, TCM, ICM, CCM, RCM, MM, RTCM>>>;\n\n// const PartialMessage = <\n//   R extends z.ZodEnum<[string, ...string[]]> = typeof PartialRoleEnum,\n//   TCM extends z.ZodTypeAny = z.ZodUndefined,\n//   CCM extends z.ZodTypeAny = z.ZodUndefined,\n//   MM extends z.ZodTypeAny = z.ZodUndefined,\n// >(\n//   Role: R = PartialRoleEnum as unknown as R,\n//   TextContentMetadata: TCM = z.undefined() as TCM,\n//   ToolCallContentMetadata: CCM = z.undefined() as CCM,\n//   MessageMetadata: MM = z.undefined() as MM,\n// ) => Message(\n//   Role,\n//   TextContentMetadata,\n//   undefined,\n//   ToolCallContentMetadata,\n//   undefined,\n//   MessageMetadata\n// ).omit({ content: true }).merge(z.object({\n//   partialContent: PartialContent(TextContentMetadata, ToolCallContentMetadata),\n// }));\nconst PartialMessage = <\n  R extends z.ZodEnum<[string, ...string[]]> = typeof PartialRoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n  RTCM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  Role: R = PartialRoleEnum as unknown as R,\n  TextContentMetadata: TCM = z.undefined() as TCM,\n  ToolCallContentMetadata: CCM = z.undefined() as CCM,\n  ReasoningContentMetadata: z.ZodTypeAny = z.undefined() as RTCM,\n  MessageMetadata: MM = z.undefined() as MM\n) =>\n  z.object({\n    role: Role,\n    partialContent: PartialContent(TextContentMetadata, ToolCallContentMetadata, ReasoningContentMetadata),\n    metadata: MessageMetadata,\n  });\ntype PartialMessageType<\n  R extends z.ZodEnum<[string, ...string[]]> = typeof PartialRoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n> = z.infer<ReturnType<typeof PartialMessage<R, TCM, CCM, MM>>>;\n\nexport { Message, PartialMessage, type MessageType, type PartialMessageType };\n","import { z } from \"zod\";\n\nimport { Message, PartialMessage } from \"./../message\";\n\nconst ChatUsage = z.object({\n  promptTokens: z.number().nonnegative(),\n  completionTokens: z.number().nonnegative(),\n  totalTokens: z.number().nonnegative(),\n});\ntype ChatUsageType = z.infer<typeof ChatUsage>;\n\nconst ChatBaseLogProb = z.object({\n  token: z.string(),\n  logProb: z.number(),\n  bytes: z.array(z.number().int()).nullable(),\n});\ntype ChatBaseLogProbType = z.infer<typeof ChatBaseLogProb>;\n\nconst ChatLogProb = ChatBaseLogProb.extend({\n  topLogProbs: z.array(ChatBaseLogProb),\n});\ntype ChatLogProbType = z.infer<typeof ChatLogProb>;\n\nconst ChatLogProbs = z.array(ChatLogProb);\ntype ChatLogProbsType = z.infer<typeof ChatLogProbs>;\n\nconst ChatResponse = z.object({\n  messages: z.array(Message()),\n  usage: ChatUsage.optional(),\n  logProbs: ChatLogProbs.optional(),\n});\ntype ChatResponseType = z.infer<typeof ChatResponse>;\n\nconst PartialChatUsage = z.object({\n  promptTokens: z.number().nonnegative().optional(),\n  completionTokens: z.number().nonnegative().optional(),\n  totalTokens: z.number().nonnegative().optional(),\n});\n\ntype PartialChatUsageType = z.infer<typeof PartialChatUsage>;\n\nconst PartialChatResponse = z.object({\n  partialMessages: z.array(PartialMessage()),\n  usage: PartialChatUsage.optional(),\n  logProbs: ChatLogProbs.optional(),\n});\ntype PartialChatResponseType = z.infer<typeof PartialChatResponse>;\n\nexport {\n  ChatBaseLogProb,\n  ChatLogProb,\n  ChatLogProbs,\n  ChatResponse,\n  ChatUsage,\n  PartialChatResponse,\n  PartialChatUsage,\n  type ChatBaseLogProbType,\n  type ChatLogProbsType,\n  type ChatLogProbType,\n  type ChatResponseType,\n  type ChatUsageType,\n  type PartialChatResponseType,\n  type PartialChatUsageType,\n};\n","import { z } from \"zod\";\n\nconst Config = <C extends z.ZodRecord<z.ZodString, z.ZodAny> = z.ZodRecord<z.ZodString, z.ZodAny>>(\n  Config: C = z.record(z.string(), z.any()).optional() as unknown as C\n) => Config;\ntype ConfigType<C extends z.ZodRecord<z.ZodString, z.ZodAny> = z.ZodRecord<z.ZodString, z.ZodAny>> = z.infer<ReturnType<typeof Config<C>>>;\n\nexport { Config, type ConfigType };\n","import { z } from \"zod\";\n\n// TODO: move to json schema 7 type and validator when implemented for tool types\nconst ResponseSchemaTypes = [\"object\", \"array\", \"number\", \"string\", \"boolean\", \"enum\"] as const;\nconst ResponseSchemaTypesLiteral = z.enum(ResponseSchemaTypes);\ntype ResponseSchemaTypesType = z.infer<typeof ResponseSchemaTypesLiteral>;\n\nconst ResponseSchemaProperty = z.object({\n  anyOf: z.array(z.any()).optional(),\n  type: z.union([ResponseSchemaTypesLiteral, z.array(z.union([ResponseSchemaTypesLiteral, z.literal(\"null\")]))]).optional(),\n  default: z.any().optional(),\n  title: z.string().optional(),\n  description: z.string().max(4096).optional(),\n  properties: z.record(z.any()).optional(),\n  required: z.array(z.string()).optional(),\n  minItems: z.number().int().min(0).optional(),\n  maxItems: z.number().int().optional(),\n  items: z.record(z.any()).optional(), // Recursive structure to handle nested arrays and objects\n  enum: z.array(z.union([z.string(), z.number(), z.boolean(), z.null()])).optional(), // Enum for allowed values\n  minimum: z.number().optional(), // Minimum value for number\n  maximum: z.number().optional(), // Maximum value for number\n  minLength: z.number().int().min(0).optional(), // Minimum length for string\n  maxLength: z.number().int().optional(), // Maximum length for string\n  $ref: z.string().optional(), // Reference to another schema\n});\ntype ResponseSchemaPropertyType = z.infer<typeof ResponseSchemaProperty>;\n\nconst ResponseSchemaStructure = z.object({\n  type: z.enum([\"object\"]),\n  required: z.array(z.string()),\n  $defs: z.record(z.any()).optional(),\n  properties: z.record(ResponseSchemaProperty),\n  additionalProperties: z.literal(false),\n});\ntype ResponseSchemaStructureType = z.infer<typeof ResponseSchemaStructure>;\n\nconst ResponseSchema = z\n  .object({\n    name: z\n      .string()\n      .regex(/^[a-zA-Z0-9_]{1,64}$/)\n      .max(64),\n    description: z.string().max(4096),\n    strict: z.boolean().optional(),\n    schema: ResponseSchemaStructure,\n  })\n  .optional();\ntype ResponseSchemaType = z.infer<typeof ResponseSchema>;\n\nexport {\n  ResponseSchema,\n  ResponseSchemaProperty,\n  ResponseSchemaStructure,\n  ResponseSchemaTypes,\n  ResponseSchemaTypesLiteral,\n  type ResponseSchemaTypesType,\n  type ResponseSchemaType,\n  type ResponseSchemaPropertyType,\n  type ResponseSchemaStructureType,\n};\n","import { z } from \"zod\";\n\nconst EmbeddingTextModalityLiteral = \"text\" as const;\nconst EmbeddingTokenModalityLiteral = \"token\" as const;\n\nconst EmbeddingModalityLiterals = [EmbeddingTextModalityLiteral, EmbeddingTokenModalityLiteral] as const;\nconst EmbeddingModalityEnum = z.enum(EmbeddingModalityLiterals);\ntype EmbeddingModalityEnumType = z.infer<typeof EmbeddingModalityEnum>;\n\nconst TextEmbeddingRequests = z.array(z.string().min(1));\ntype TextEmbeddingRequestsType = z.infer<typeof TextEmbeddingRequests>;\n\nconst TokenEmbeddingRequests = z.array(z.array(z.number().int().nonnegative()));\ntype TokenEmbeddingRequestsType = z.infer<typeof TokenEmbeddingRequests>;\n\nconst EmbeddingRequests = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.discriminatedUnion(\"modality\", [\n    z.object({\n      modality: z.literal(EmbeddingTextModalityLiteral),\n      metadata: Metadata,\n      requests: TextEmbeddingRequests,\n    }),\n    z.object({\n      modality: z.literal(EmbeddingTokenModalityLiteral),\n      metadata: Metadata,\n      requests: TokenEmbeddingRequests,\n    }),\n  ]);\ntype EmbeddingRequestsType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof EmbeddingRequests<M>>>;\n\nexport {\n  EmbeddingTextModalityLiteral,\n  EmbeddingTokenModalityLiteral,\n  EmbeddingModalityLiterals,\n  EmbeddingModalityEnum,\n  TextEmbeddingRequests,\n  TokenEmbeddingRequests,\n  EmbeddingRequests,\n  type EmbeddingRequestsType,\n  type EmbeddingModalityEnumType,\n  type TextEmbeddingRequestsType,\n  type TokenEmbeddingRequestsType,\n};\n","import { z } from \"zod\";\n\nconst FloatEmbeddingLiteral = \"float\" as const;\nconst FloatEmbedding = z.object({\n  index: z.number().int().nonnegative(),\n  embedding: z.array(z.number()),\n});\ntype FloatEmbeddingType = z.infer<typeof FloatEmbedding>;\n\nconst Base64EmbeddingLiteral = \"base64\" as const;\nconst Base64Embedding = z.object({\n  index: z.number().int().nonnegative(),\n  embedding: z.string().base64(),\n});\ntype Base64EmbeddingType = z.infer<typeof Base64Embedding>;\n\nconst EmbeddingsUsage = z.object({\n  totalTokens: z.number().int().nonnegative(),\n});\ntype EmbeddingsUsageType = z.infer<typeof EmbeddingsUsage>;\n\nconst EmbeddingResponse = z.discriminatedUnion(\"encodingFormat\", [\n  z.object({\n    encodingFormat: z.literal(FloatEmbeddingLiteral),\n    embeddings: z.array(FloatEmbedding),\n    usage: EmbeddingsUsage.optional(),\n  }),\n  z.object({\n    encodingFormat: z.literal(Base64EmbeddingLiteral),\n    embeddings: z.array(Base64Embedding),\n    usage: EmbeddingsUsage.optional(),\n  }),\n]);\ntype EmbeddingResponseType = z.infer<typeof EmbeddingResponse>;\n\nexport {\n  FloatEmbeddingLiteral,\n  Base64EmbeddingLiteral,\n  FloatEmbedding,\n  Base64Embedding,\n  EmbeddingsUsage,\n  EmbeddingResponse,\n  type FloatEmbeddingType,\n  type Base64EmbeddingType,\n  type EmbeddingsUsageType,\n  type EmbeddingResponseType,\n};\n","const safeStringify = (obj: unknown) => {\n  const seen = new WeakSet();\n  return JSON.stringify(obj, (key, value) => {\n    if (typeof value === \"object\" && value !== null) {\n      if (seen.has(value)) {\n        return; // Skip circular reference\n      }\n      seen.add(value);\n    }\n    return value;\n  });\n};\n\nconst getErrorMessage = (error: unknown | undefined): string => {\n  if (error == null) return \"unknown error\";\n  if (typeof error === \"string\") return error;\n  if (error instanceof Error) return error.message;\n  return safeStringify(error);\n};\n\nconst GatewayBaseErrorLiteral = \"GatewayBaseError\" as const;\nclass GatewayBaseError extends Error {\n  readonly name: string = GatewayBaseErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }, name?: string) {\n    super(`[${name ?? GatewayBaseErrorLiteral}]: ${info}\\nMessage: ${getErrorMessage(cause)}`);\n    this.info = info;\n    this.cause = cause;\n    this.name = name ?? GatewayBaseErrorLiteral;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isGatewayBaseError(error: unknown): error is GatewayBaseError {\n    return error instanceof GatewayBaseError;\n  }\n\n  toJSON(): object {\n    return {\n      name: this.name,\n      info: this.info,\n      cause: this.cause,\n      message: this.message,\n      stack: this.stack,\n    };\n  }\n}\n\nexport { GatewayBaseError };\n","import { z } from \"zod\";\n\n/**\n * A pair of per‑million‑token rates for a single price category (e.g., base input/output).\n * Represents the input and output cost for 1 million tokens within a specific category (like 'base') of a pricing tier.\n */\nconst ChatModelTokenPairPrice = z\n  .object({\n    inputPricePerMillion: z.number().nonnegative().describe(\"Price per 1M input tokens\"),\n    outputPricePerMillion: z.number().nonnegative().describe(\"Price per 1M output tokens\"),\n  })\n  .describe(\"Input/output price pair (per 1M tokens) for a specific category within a ChatModel pricing tier.\");\n\ntype ChatModelTokenPairPriceType = z.infer<typeof ChatModelTokenPairPrice>;\n\n/**\n * Defines the price categories (e.g., base) applicable within a single pricing tier (`ChatModelTokenRangePrice`).\n * Each category holds a `ChatModelTokenPairPrice`.\n */\nconst ChatModelTokenTypePrice = z\n  .object({\n    base: ChatModelTokenPairPrice.describe(\"Base (uncached, non‑reasoning) rates\"),\n    // Add optional 'cached' and 'reasoning' here if they become standard\n  })\n  .describe(\"Holds the `ChatModelTokenPairPrice` for different categories (e.g., base) within a single pricing tier.\");\n\ntype ChatModelTokenTypePriceType = z.infer<typeof ChatModelTokenTypePrice>;\n\n/**\n * Defines a single tier in a model's pricing schedule (`ChatModelPrice`), based on token count range.\n * - `minTokens`: inclusive lower bound (integer ≥ 0).\n * - `maxTokens`: exclusive upper bound (integer > minTokens), or `null` for ∞.\n * - `prices`: the `ChatModelTokenTypePrice` (categories and their rates) applicable to this tier.\n */\nconst ChatModelTokenRangePrice = z\n  .object({\n    minTokens: z.number().int().nonnegative().describe(\"Inclusive lower token bound for this tier.\"),\n    maxTokens: z.number().int().nullable().optional().describe(\"Exclusive upper token bound; `null` means ∞.\"),\n    prices: ChatModelTokenTypePrice.describe(\"Price categories and rates for this specific token range.\"),\n  })\n  .refine((t) => t.maxTokens === null || (typeof t.maxTokens === \"number\" && t.maxTokens > t.minTokens), {\n    message: \"maxTokens must be > minTokens (or null for infinite).\",\n    path: [\"maxTokens\"],\n  })\n  .describe(\"A single pricing tier defined by a token range and associated prices.\");\n\ntype ChatModelTokenRangePriceType = z.infer<typeof ChatModelTokenRangePrice>;\n\n/**\n * Full pricing schedule for a specific chat model, potentially with multiple `ChatModelTokenRangePrice` tiers.\n * Ensures tiers are contiguous and cover the full range from 0 to infinity.\n * - First tier must start at 0 tokens.\n * - `tokenRanges` must be contiguous: each tier.minTokens === previous.maxTokens.\n * - Last `tokenRange` must have maxTokens = null (infinite).\n */\nconst ChatModelPrice = z\n  .object({\n    modelName: z.string().describe(\"Model name this schedule applies to.\"),\n    currency: z.string().default(\"USD\").describe(\"Currency code (e.g., USD).\"),\n    tokenRanges: z\n      .array(ChatModelTokenRangePrice)\n      .min(1)\n      .describe(\"Pricing tiers (`ChatModelTokenRangePrice`) schedule, sorted by minTokens.\"),\n  })\n  .superRefine((data, ctx) => {\n    const { tokenRanges } = data;\n\n    // 1) First tier starts at 0\n    if (tokenRanges[0].minTokens !== 0) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        path: [\"tokenRanges\", 0, \"minTokens\"],\n        message: \"The first tier must have minTokens = 0.\",\n      });\n    }\n\n    // 2) tokenRanges must be sorted and contiguous\n    for (let i = 1; i < tokenRanges.length; i++) {\n      const prev = tokenRanges[i - 1];\n      const curr = tokenRanges[i];\n\n      if (prev.maxTokens === null) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          path: [\"tokenRanges\", i - 1, \"maxTokens\"],\n          message: \"Cannot define any tokenRanges after an infinite tier (maxTokens = null).\",\n        });\n        break; // Stop further checks if structure is already invalid\n      }\n\n      if (curr.minTokens !== prev.maxTokens) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          path: [\"tokenRanges\", i, \"minTokens\"],\n          message: `Tier ${i} minTokens (${curr.minTokens}) must equal previous tier's maxTokens (${prev.maxTokens}) for contiguity.`,\n        });\n      }\n\n      // Ensure sorting (although contiguity check often implies this)\n      if (curr.minTokens < prev.minTokens) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          path: [\"tokenRanges\", i, \"minTokens\"],\n          message: `tokenRanges must be sorted by ascending minTokens. Tier ${i} (${curr.minTokens}) starts before Tier ${i - 1} (${prev.minTokens}).`,\n        });\n      }\n    }\n\n    // 3) Last tier must be infinite\n    const last = tokenRanges[tokenRanges.length - 1];\n    // Check last.maxTokens only if the loop didn't break early due to a previous infinite tier\n    if (tokenRanges.every((t) => t.maxTokens !== null || t === last) && last.maxTokens !== null) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        path: [\"tokenRanges\", tokenRanges.length - 1, \"maxTokens\"],\n        message: \"The final tier must have maxTokens = null (representing infinity).\",\n      });\n    }\n  })\n  .describe(\"Complete pricing schedule for a single chat model, including all its token-based tiers.\");\n\ntype ChatModelPriceType = z.infer<typeof ChatModelPrice>;\n\n// Export the schemas and types\nexport { ChatModelPrice, ChatModelTokenPairPrice, ChatModelTokenRangePrice, ChatModelTokenTypePrice };\nexport type { ChatModelPriceType, ChatModelTokenPairPriceType, ChatModelTokenRangePriceType, ChatModelTokenTypePriceType };\n","// import { JSONSchema7 } from \"json-schema\";\n// import { Validator } from \"jsonschema\";\nimport { z } from \"zod\";\n\nconst FunctionToolLiteral = \"function\" as const;\n\n// TODO: fix 'name' property not allowed in JSONSchema7\n// const FunctionTool = z.object({\n//   type: z.literal(FunctionToolLiteral),\n//   definition: z.object({\n//     schema: z.object({}).refine((schema) => {\n//       const validator = new Validator();\n//       return validator.validate(schema, { type: \"object\" }).valid;\n//     }),\n//   }),\n//   callback: z.function().args(z.string().min(0)).returns(z.promise(z.any())).optional(),\n// });\n\n// const FunctionTool = z.object({\n//   type: z.literal(FunctionToolLiteral),\n//   definition: z.object({\n//     schema: z.object({}),\n//   }),\n//   callback: z.function().args(z.string().min(0)).returns(z.promise(z.any())).optional(),\n// });\n// type FunctionToolType = z.infer<typeof FunctionTool>;\n\nconst FunctionParameterTypes = [\"object\", \"array\", \"number\", \"string\", \"boolean\", \"null\"];\nconst FunctionParameterTypesLiteral = z.enum([\"object\", \"array\", \"number\", \"string\", \"boolean\", \"null\"]);\ntype FunctionParameterTypesType = z.infer<typeof FunctionParameterTypesLiteral>;\n\n// TODO: make a proper fix here\nconst FunctionParameter = z.object({\n  anyOf: z.array(z.any()).optional(),\n  type: FunctionParameterTypesLiteral.optional(),\n  default: z.any().optional(),\n  title: z.string().optional(),\n  description: z.string().max(4096).optional(),\n  properties: z.record(z.any()).optional(),\n  required: z.array(z.string()).optional(),\n  minItems: z.number().int().min(0).optional(),\n  maxItems: z.number().int().optional(),\n  items: z.record(z.any()).optional(), // Recursive structure to handle nested arrays and objects\n  enum: z.array(z.union([z.string(), z.number(), z.boolean(), z.null()])).optional(), // Enum for allowed values\n  minimum: z.number().optional(), // Minimum value for number\n  maximum: z.number().optional(), // Maximum value for number\n  minLength: z.number().int().min(0).optional(), // Minimum length for string\n  maxLength: z.number().int().optional(), // Maximum length for string\n});\ntype FunctionParameterType = z.infer<typeof FunctionParameter>;\n\nconst FunctionParameters = z.object({\n  type: z.enum([\"object\"]),\n  title: z.string().optional(),\n  $defs: z.record(z.any()).optional(),\n  properties: z.record(FunctionParameter).optional(),\n  required: z.array(z.string()).optional(),\n});\ntype FunctionParametersType = z.infer<typeof FunctionParameters>;\n\nconst Function = z.object({\n  name: z\n    .string()\n    .regex(/^[a-zA-Z0-9_]{1,64}$/)\n    .max(64),\n  description: z.string().max(4096),\n  parameters: z.any(),\n  strict: z.boolean().optional(),\n});\ntype FunctionType = z.infer<typeof Function>;\n\nconst ToolTypes = [\"function\"];\nconst ToolTypesLiteral = z.enum([\"function\"]);\ntype ToolTypesType = z.infer<typeof ToolTypesLiteral>;\n\nconst FunctionTool = z.object({\n  type: ToolTypesLiteral,\n  definition: z.object({\n    schema: Function, // TODO: convert to union with more tool types\n  }),\n});\ntype FunctionToolType = z.infer<typeof FunctionTool>;\n\n// const Tools = z.array(Tool).nonempty().optional();\n// type ToolsType = z.infer<typeof Tools>;\n\nexport {\n  Function,\n  FunctionParameter,\n  FunctionParameters,\n  FunctionParameterTypes,\n  FunctionParameterTypesLiteral,\n  ToolTypes,\n  ToolTypesLiteral,\n  type FunctionParametersType,\n  type FunctionParameterType,\n  type FunctionParameterTypesType,\n  type FunctionType,\n  type ToolTypesType,\n};\n\nexport { FunctionTool, FunctionToolLiteral, type FunctionToolType };\n","import { z } from \"zod\";\n\nimport { FunctionTool, FunctionToolLiteral } from \"./function-tool\";\n\nconst ToolLiterals = [FunctionToolLiteral] as const;\nconst ToolEnum = z.enum(ToolLiterals);\ntype ToolEnumType = z.infer<typeof ToolEnum>;\n\nconst Tool = <FTM extends z.ZodTypeAny>(FunctionToolMetadata: FTM = z.undefined() as FTM) =>\n  z.discriminatedUnion(\"type\", [FunctionTool.extend({ metadata: FunctionToolMetadata })]);\ntype ToolType<FTM extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof Tool<FTM>>>;\n\nexport { Tool, ToolEnum, ToolLiterals, type ToolEnumType, type ToolType };\n","import {\n  Base64ImageContentTypeLiteral,\n  ContentType,\n  ImageContent,\n  ImageContentDetailsLiteralType,\n  ImageModalityLiteral,\n  Message,\n  MessageType,\n  PartialMessage,\n  PartialMessageType,\n  PartialReasoningContent,\n  PartialReasoningModalityLiteral,\n  PartialTextContent,\n  PartialTextModalityLiteral,\n  PartialToolCallContent,\n  PartialToolCallModalityLiteral,\n  ReasoningContent,\n  ReasoningContentTypeLiteral,\n  ReasoningModalityLiteral,\n  RedactedReasoningContentTypeLiteral,\n  RoleEnumType,\n  TextContent,\n  TextModalityLiteral,\n  ToolCallContent,\n  ToolCallModalityLiteral,\n  ToolResponseContent,\n  ToolResponseModalityLiteral,\n  UrlImageContentTypeLiteral,\n} from \"./../message\";\n\nconst createTextContent = (content: string): ContentType => {\n  return TextContent().parse({\n    modality: TextModalityLiteral,\n    value: content,\n  });\n};\n\nconst createToolCallContent = (index: number, id: string, name: string, args: string): ContentType => {\n  return ToolCallContent().parse({\n    modality: ToolCallModalityLiteral,\n    index: index,\n    id: id,\n    name: name,\n    arguments: args,\n  });\n};\n\nconst createTextMessage = (role: RoleEnumType, content: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      TextContent().parse({\n        modality: TextModalityLiteral,\n        value: content,\n      }),\n    ],\n  });\n};\n\nconst createUrlImageMessage = (role: RoleEnumType, url: string, detail: ImageContentDetailsLiteralType): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ImageContent().parse({\n        modality: ImageModalityLiteral,\n        detail: detail,\n        value: {\n          type: UrlImageContentTypeLiteral,\n          url: url,\n        },\n      }),\n    ],\n  });\n};\n\nconst createBase64ImageMessage = (role: RoleEnumType, base64: string, detail: ImageContentDetailsLiteralType): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ImageContent().parse({\n        modality: ImageModalityLiteral,\n        detail: detail,\n        value: {\n          type: Base64ImageContentTypeLiteral,\n          base64: base64,\n        },\n      }),\n    ],\n  });\n};\n\nconst createToolCallMessage = (role: RoleEnumType, index: number, id: string, name: string, args: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ToolCallContent().parse({\n        modality: ToolCallModalityLiteral,\n        index: index,\n        id: id,\n        name: name,\n        arguments: args,\n      }),\n    ],\n  });\n};\n\nconst createToolResponseMessage = (role: RoleEnumType, index: number, id: string, name: string, data: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ToolResponseContent().parse({\n        modality: ToolResponseModalityLiteral,\n        index: index,\n        id: id,\n        name: name,\n        data: data,\n      }),\n    ],\n  });\n};\n\nconst createPartialTextMessage = (role: RoleEnumType, content: string): PartialMessageType => {\n  return PartialMessage().parse({\n    role: role,\n    partialContent: PartialTextContent().parse({\n      modality: PartialTextModalityLiteral,\n      value: content,\n    }),\n  });\n};\n\nconst createPartialToolCallMessage = (role: RoleEnumType, index: number, id?: string, name?: string, args?: string): PartialMessageType => {\n  return PartialMessage().parse({\n    role: role,\n    partialContent: PartialToolCallContent().parse({\n      modality: PartialToolCallModalityLiteral,\n      index: index,\n      id: id,\n      name: name,\n      arguments: args,\n    }),\n  });\n};\n\nconst createReasoningContent = (thinking: string, signature: string): ContentType => {\n  return ReasoningContent().parse({\n    modality: ReasoningModalityLiteral,\n    value: {\n      type: ReasoningContentTypeLiteral,\n      thinking,\n      signature,\n    },\n  });\n};\n\nconst createReasoningMessage = (role: RoleEnumType, thinking: string, signature: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ReasoningContent().parse({\n        modality: ReasoningModalityLiteral,\n        value: {\n          type: ReasoningContentTypeLiteral,\n          thinking,\n          signature,\n        },\n      }),\n    ],\n  });\n};\n// Redacted Reasoning Content\nconst createRedactedReasoningContent = (data: string): ContentType => {\n  return ReasoningContent().parse({\n    modality: ReasoningModalityLiteral,\n    value: {\n      type: RedactedReasoningContentTypeLiteral,\n      data,\n    },\n  });\n};\n\nconst createRedactedReasoningMessage = (role: RoleEnumType, data: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ReasoningContent().parse({\n        modality: ReasoningModalityLiteral,\n        value: {\n          type: RedactedReasoningContentTypeLiteral,\n          data,\n        },\n      }),\n    ],\n  });\n};\n\nconst createPartialReasoningMessage = (role: RoleEnumType, thinking?: string, signature?: string): PartialMessageType => {\n  return PartialMessage().parse({\n    role: role,\n    partialContent: PartialReasoningContent().parse({\n      modality: PartialReasoningModalityLiteral,\n      value: {\n        type: ReasoningContentTypeLiteral,\n        thinking,\n        signature,\n      },\n      // metadata is optional; omit or provide if needed\n    }),\n  });\n};\n\n// Create a partial redacted reasoning message\nconst createPartialRedactedReasoningMessage = (role: RoleEnumType, data: string): PartialMessageType => {\n  return PartialMessage().parse({\n    role: role,\n    partialContent: PartialReasoningContent().parse({\n      modality: PartialReasoningModalityLiteral,\n      value: {\n        type: RedactedReasoningContentTypeLiteral,\n        data,\n      },\n      // metadata is optional; omit or provide if needed\n    }),\n  });\n};\n\nexport {\n  createBase64ImageMessage,\n  createPartialReasoningMessage,\n  createPartialRedactedReasoningMessage,\n  createPartialTextMessage,\n  createPartialToolCallMessage,\n  createReasoningContent,\n  createReasoningMessage,\n  createRedactedReasoningContent,\n  createRedactedReasoningMessage,\n  createTextContent,\n  createTextMessage,\n  createToolCallContent,\n  createToolCallMessage,\n  createToolResponseMessage,\n  createUrlImageMessage,\n};\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst ProviderErrorLiteral = \"ProviderError\" as const;\nexport class ProviderError extends GatewayBaseError {\n  readonly name = ProviderErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, ProviderErrorLiteral);\n    this.info = info;\n    this.cause = cause;\n  }\n\n  static isProviderError(error: unknown): error is ProviderError {\n    return error instanceof ProviderError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst ModelErrorLiteral = \"ModelError\" as const;\nexport class ModelError extends GatewayBaseError {\n  readonly name = ModelErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, ModelErrorLiteral);\n    this.info = info;\n    this.cause = cause;\n  }\n\n  static isModelError(error: unknown): error is ModelError {\n    return error instanceof ModelError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst ModelResponseErrorLiteral = \"ModelResponseError\" as const;\nexport class ModelResponseError extends GatewayBaseError {\n  readonly name = ModelResponseErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, ModelResponseErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n  }\n\n  static isModelResponseError(error: unknown): error is ModelResponseError {\n    return error instanceof ModelResponseError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidModelRequestErrorLiteral = \"InvalidModelRequestError\" as const;\nexport class InvalidModelRequestError extends GatewayBaseError {\n  readonly name = InvalidModelRequestErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidModelRequestErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidModelRequestError(error: unknown): error is InvalidModelRequestError {\n    return error instanceof InvalidModelRequestError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidConfigErrorLiteral = \"InvalidConfigError\" as const;\nexport class InvalidConfigError extends GatewayBaseError {\n  readonly name = InvalidConfigErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidConfigErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidConfigError(error: unknown): error is InvalidConfigError {\n    return error instanceof InvalidConfigError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidMessagesErrorLiteral = \"InvalidMessagesError\" as const;\nexport class InvalidMessagesError extends GatewayBaseError {\n  readonly name = InvalidMessagesErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidMessagesErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidMessagesError(error: unknown): error is InvalidMessagesError {\n    return error instanceof InvalidMessagesError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidToolsErrorLiteral = \"InvalidToolsError\" as const;\nexport class InvalidToolsError extends GatewayBaseError {\n  readonly name = InvalidToolsErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidToolsErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidToolsError(error: unknown): error is InvalidToolsError {\n    return error instanceof InvalidToolsError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidEmbeddingRequestsErrorLiteral = \"InvalidEmbeddingRequestsError\" as const;\nexport class InvalidEmbeddingRequestsError extends GatewayBaseError {\n  readonly name = InvalidEmbeddingRequestsErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidEmbeddingRequestsErrorLiteral);\n    this.info = info;\n    this.cause = cause;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidEmbeddingRequestsError(error: unknown): error is InvalidEmbeddingRequestsError {\n    return error instanceof InvalidEmbeddingRequestsError;\n  }\n}\n","import { z } from \"zod\";\n\nconst MultiStringConfigItemTypeLiteral = \"multi-string\" as const;\n\nconst MultiStringConfigItemDef = z.object({\n  type: z.literal(MultiStringConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  max: z.number().int().positive(),\n});\ntype MultiStringConfigItemType = z.infer<typeof MultiStringConfigItemDef>;\n\nconst MultiStringConfigItemSchema = (max: number) => z.array(z.string()).max(max).default([]).optional();\ntype MultiStringConfigItemSchemaType = z.infer<ReturnType<typeof MultiStringConfigItemSchema>>;\n\nconst MultiStringConfigItem = (data: Omit<MultiStringConfigItemType, \"type\">) => {\n  return {\n    def: MultiStringConfigItemDef.parse({\n      type: MultiStringConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: MultiStringConfigItemSchema(data.max),\n  };\n};\n\nexport {\n  MultiStringConfigItem,\n  MultiStringConfigItemDef,\n  MultiStringConfigItemSchema,\n  MultiStringConfigItemTypeLiteral,\n  type MultiStringConfigItemSchemaType,\n  type MultiStringConfigItemType,\n};\n","import { z } from \"zod\";\n\nconst ObjectSchemaConfigItemTypeLiteral = \"object-schema\" as const;\n\nconst ObjectSchemaConfigItemDef = z.object({\n  type: z.literal(ObjectSchemaConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  objectSchema: z.any(),\n});\ntype ObjectSchemaConfigItemType = z.infer<typeof ObjectSchemaConfigItemDef>;\n\nconst ObjectSchemaConfigItemSchema = <S extends z.ZodRawShape>(schema: z.ZodObject<S>) => schema.optional();\ntype ObjectSchemaConfigItemSchemaType<S extends z.ZodRawShape = z.ZodRawShape> = z.infer<\n  ReturnType<typeof ObjectSchemaConfigItemSchema<S>>\n>;\n\nconst ObjectSchemaConfigItem = (data: Omit<ObjectSchemaConfigItemType, \"type\">) => {\n  return {\n    def: ObjectSchemaConfigItemDef.parse({\n      type: ObjectSchemaConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: ObjectSchemaConfigItemSchema(data.objectSchema),\n  };\n};\n\nexport {\n  ObjectSchemaConfigItem,\n  ObjectSchemaConfigItemDef,\n  ObjectSchemaConfigItemSchema,\n  ObjectSchemaConfigItemTypeLiteral,\n  type ObjectSchemaConfigItemType,\n  type ObjectSchemaConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nconst RangeConfigItemTypeLiteral = \"range\" as const;\n\nconst RangeConfigItemDef = z.object({\n  type: z.literal(RangeConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  min: z.number().int(),\n  max: z.number().int(),\n  step: z.number().positive(),\n  default: z.number(),\n});\ntype RangeConfigItemDefType = z.infer<typeof RangeConfigItemDef>;\n\nconst RangeConfigItemSchema = (min: number, max: number, step: number, defaultValue: number) =>\n  z.number().min(min).max(max).step(step).default(defaultValue).optional();\ntype RangeConfigItemSchemaType = z.infer<ReturnType<typeof RangeConfigItemSchema>>;\n\nconst RangeConfigItem = (data: Omit<RangeConfigItemDefType, \"type\">) => {\n  return {\n    def: RangeConfigItemDef.parse({\n      type: RangeConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: RangeConfigItemSchema(data.min, data.max, data.step, data.default),\n  };\n};\n\nexport {\n  RangeConfigItem,\n  RangeConfigItemDef,\n  RangeConfigItemSchema,\n  RangeConfigItemTypeLiteral,\n  type RangeConfigItemDefType,\n  type RangeConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nconst SelectBooleanConfigItemTypeLiteral = \"select-boolean\" as const;\n\nconst SelectBooleanConfigItemDef = z.object({\n  type: z.literal(SelectBooleanConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  default: z.boolean().nullable(),\n});\ntype SelectBooleanConfigItemDefType = z.infer<typeof SelectBooleanConfigItemDef>;\n\nconst SelectBooleanConfigItemSchema = (defaultValue: boolean | null) => z.boolean().nullable().default(defaultValue).optional();\ntype SelectBooleanConfigItemSchemaType = z.infer<ReturnType<typeof SelectBooleanConfigItemSchema>>;\n\nconst SelectBooleanConfigItem = (data: Omit<SelectBooleanConfigItemDefType, \"type\">) => {\n  return {\n    def: SelectBooleanConfigItemDef.parse({\n      type: SelectBooleanConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: SelectBooleanConfigItemSchema(data.default),\n  };\n};\n\nexport {\n  SelectBooleanConfigItem,\n  SelectBooleanConfigItemDef,\n  SelectBooleanConfigItemSchema,\n  SelectBooleanConfigItemTypeLiteral,\n  type SelectBooleanConfigItemDefType,\n  type SelectBooleanConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nconst SelectStringConfigItemTypeLiteral = \"select-string\" as const;\n\nconst SelectStringConfigItemDef = z.object({\n  type: z.literal(SelectStringConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  default: z.string(),\n  choices: z.array(z.string()),\n});\ntype SelectStringConfigItemDefType = z.infer<typeof SelectStringConfigItemDef>;\n\nconst SelectStringConfigItemSchema = (defaultValue: string | null, choices: string[]) =>\n  z\n    .enum(choices as [string, ...string[]])\n    .nullable()\n    .default(defaultValue)\n    .optional();\ntype SelectStringConfigItemSchemaType = z.infer<ReturnType<typeof SelectStringConfigItemSchema>>;\n\nconst SelectStringConfigItem = (data: Omit<SelectStringConfigItemDefType, \"type\">) => {\n  return {\n    def: SelectStringConfigItemDef.parse({\n      type: SelectStringConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: SelectStringConfigItemSchema(data.default, data.choices),\n  };\n};\n\nexport {\n  SelectStringConfigItem,\n  SelectStringConfigItemDef,\n  SelectStringConfigItemSchema,\n  SelectStringConfigItemTypeLiteral,\n  type SelectStringConfigItemDefType,\n  type SelectStringConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nimport { MultiStringConfigItemDef, MultiStringConfigItemTypeLiteral } from \"./multi-string-config-item\";\nimport { ObjectSchemaConfigItemDef, ObjectSchemaConfigItemTypeLiteral } from \"./object-schema-config-item\";\nimport { RangeConfigItemDef, RangeConfigItemTypeLiteral } from \"./range-config-item\";\nimport { SelectBooleanConfigItemDef, SelectBooleanConfigItemTypeLiteral } from \"./select-boolean-config-item\";\nimport { SelectStringConfigItemDef, SelectStringConfigItemTypeLiteral } from \"./select-string-config-item\";\n\nconst ConfigItemLiterals = [\n  RangeConfigItemTypeLiteral,\n  MultiStringConfigItemTypeLiteral,\n  SelectStringConfigItemTypeLiteral,\n  ObjectSchemaConfigItemTypeLiteral,\n  SelectBooleanConfigItemTypeLiteral,\n] as const;\nconst ConfigItemEnum = z.enum(ConfigItemLiterals);\ntype ConfigItemEnumType = z.infer<typeof ConfigItemEnum>;\n\nconst ConfigItemDef = z.discriminatedUnion(\"type\", [\n  RangeConfigItemDef,\n  MultiStringConfigItemDef,\n  SelectStringConfigItemDef,\n  SelectBooleanConfigItemDef,\n  ObjectSchemaConfigItemDef,\n]);\ntype ConfigItemDefType = z.infer<typeof ConfigItemDef>;\n\nexport { ConfigItemDef, ConfigItemEnum, ConfigItemLiterals, type ConfigItemDefType, type ConfigItemEnumType };\n","import { z } from \"zod\";\n\nimport { ChatModelPriceType, ModalityEnum, RoleEnum } from \"@adaline/types\";\n\nimport { ConfigItemDef } from \"../../types/config\";\n\nconst ChatModelSchema = <\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  M extends z.ZodEnum<[string, ...string[]]> = typeof ModalityEnum,\n>(\n  Roles: R = RoleEnum as unknown as R,\n  Modalities: M = ModalityEnum as unknown as M\n) =>\n  z.object({\n    name: z.string().min(1),\n    description: z.string().min(1),\n    roles: z.record(Roles, z.string().min(1).optional()),\n    modalities: z.array(Modalities).nonempty(),\n    maxInputTokens: z.number().int().positive().min(1),\n    maxOutputTokens: z.number().int().positive().min(1),\n    maxReasoningTokens: z.number().int().positive().min(1).optional(),\n    config: z\n      .object({\n        def: z.record(z.string().min(1), ConfigItemDef),\n        schema: z.instanceof(z.ZodObject),\n      })\n      .refine(\n        (config) => {\n          const defKeys = Object.keys(config.def);\n          const schemaKeys = Object.keys(config.schema?.shape ?? {});\n          return defKeys.every((key) => schemaKeys.includes(key)) && schemaKeys.every((key) => defKeys.includes(key));\n        },\n        {\n          message: \"Keys in 'config.def' must exactly match keys in 'config.schema'\",\n        }\n      ),\n    price: z.custom<ChatModelPriceType>(),\n  });\ntype ChatModelSchemaType<\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  M extends z.ZodEnum<[string, ...string[]]> = typeof ModalityEnum,\n> = z.infer<ReturnType<typeof ChatModelSchema<R, M>>>;\n\nexport { ChatModelSchema, type ChatModelSchemaType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModalityEnum } from \"@adaline/types\";\n\nimport { ConfigItemDef } from \"../../types/config\";\n\n// TODO: add embedding model properties (dimensions, etc)\nconst EmbeddingModelSchema = <M extends z.ZodEnum<[string, ...string[]]> = typeof EmbeddingModalityEnum>(\n  Modalities: M = EmbeddingModalityEnum as unknown as M\n) =>\n  z.object({\n    name: z.string().min(1),\n    description: z.string().min(1),\n    modalities: z.array(Modalities).nonempty(),\n    maxInputTokens: z.number().int().positive().min(1),\n    maxOutputTokens: z.number().int().positive().min(1),\n    config: z\n      .object({\n        def: z.record(z.string().min(1), ConfigItemDef),\n        schema: z.instanceof(z.ZodObject),\n      })\n      .refine(\n        (config) => {\n          const defKeys = Object.keys(config.def);\n          const schemaKeys = Object.keys(config.schema?.shape ?? {});\n          return defKeys.every((key) => schemaKeys.includes(key)) && schemaKeys.every((key) => defKeys.includes(key));\n        },\n        {\n          message: \"Keys in 'config.def' must exactly match keys in 'config.schema'\",\n        }\n      ),\n  });\ntype EmbeddingModelSchemaType<M extends z.ZodEnum<[string, ...string[]]> = typeof EmbeddingModalityEnum> = z.infer<\n  ReturnType<typeof EmbeddingModelSchema<M>>\n>;\n\nexport { EmbeddingModelSchema, type EmbeddingModelSchemaType };\n","import { z } from \"zod\";\n\nconst Headers = z.record(z.string());\ntype HeadersType = z.infer<typeof Headers>;\n\nexport { Headers, type HeadersType };\n","import { z } from \"zod\";\n\nconst Params = z.record(\n  z.union([\n    z.boolean(),\n    z.string(),\n    z.number(),\n    z.object({}),\n    z.array(z.any()),\n    z.null(),\n    z.undefined(),\n  ])\n);\ntype ParamsType = z.infer<typeof Params>;\n\nexport { Params, type ParamsType };\n","import { z } from \"zod\";\n\nconst Url = z.string().url();\ntype UrlType = z.infer<typeof Url>;\n\nexport { Url, type UrlType };\n","const TEMPERATURE = {\n  type: \"range\",\n  title: \"Temperature\",\n  description:\n    \"Adjusts the model's creativity level. With a setting of 0, the model strictly picks the most probable next word. \\\n    For endeavors that benefit from a dash of inventiveness, consider dialing it up to 0.7 or higher, enabling the model to produce text \\\n    that's unexpectedly fresh.\",\n} as const;\n\nconst MAX_TOKENS = {\n  type: \"range\",\n  title: \"Max tokens\",\n  description:\n    \"Specify the total tokens for generation, where one token approximates four English characters. \\\n    Setting this to 0 defaults to the model's maximum capacity.\",\n} as const;\n\nconst MAX_REASONING_TOKENS = {\n  type: \"range\",\n  title: \"Max reasoning tokens\",\n  description:\n    \"Specify the total tokens for reasoning, where one token approximates four English characters.\",\n} as const;\n\nconst STOP = (max: number) =>\n  ({\n    type: \"multi\",\n    title: \"Stop sequence\",\n    description: `Enter up to ${max} sequences that will halt additional text output. \\\n      The generated text will exclude these sequences.`,\n  }) as const;\n\nconst TOP_A = {\n  type: \"range\",\n  title: \"Top A\",\n  description:\n    \"Considers only the top tokens that have 'sufficiently high' probabilities relative to the most likely token, \\\n    functioning like a dynamic Top-P. \\\n    A lower Top-A value narrows down the token choices based on the highest probability token, \\\n    while a higher Top-A value refines the filtering without necessarily impacting the creativity of the output.\",\n} as const;\n\nconst TOP_P = {\n  type: \"range\",\n  title: \"Top P\",\n  description:\n    \"Selects a subset of likely tokens for generation, restricting choices to the top-P fraction of possibilities, \\\n    such as the top 10% when P=0.1. \\\n    This approach can limit the variety of the output. By default, it's set to 1, indicating no restriction. \\\n    It's advised to adjust this parameter or temperature to modulate output diversity, but not to modify both simultaneously.\",\n} as const;\n\nconst TOP_K = {\n  type: \"range\",\n  title: \"Top K\",\n  description:\n    \"Select only from the highest K probabilities for each following word, effectively eliminating the less likely 'long tail' options.\",\n} as const;\n\nconst MIN_P = {\n  type: \"range\",\n  title: \"Min P\",\n  description:\n    \"Specifies the minimum probability a token must have to be considered, in relation to the probability of the most likely token. \\\n    (This value varies based on the confidence level of the top token.) \\\n    For example, if Min-P is set to 0.1, only tokens with at least 1/10th the probability of the highest-ranked token will be considered.\",\n} as const;\n\nconst FREQUENCY_PENALTY = {\n  type: \"range\",\n  title: \"Frequency penalty\",\n  description:\n    \"Minimize redundancy.\\\n    By assigning a penalty to frequently used tokens within the text, the likelihood of repeating identical phrases is reduced. \\\n    The default setting for this penalty is zero.\",\n} as const;\n\nconst PRESENCE_PENALTY = {\n  type: \"range\",\n  title: \"Presence penalty\",\n  description:\n    \"Enhance the introduction of novel subjects by reducing the preference for tokens that have already appeared in the text, \\\n    thus boosting the chances of exploring fresh topics. \\\n    The standard setting for this is zero.\",\n} as const;\n\nconst SEED = {\n  type: \"range\",\n  title: \"Seed\",\n  description:\n    \"When seed is fixed to a specific value, the model makes a best effort to provide the same response for repeated requests. \\\n    Deterministic output isn't guaranteed. \\\n    Also, changing the model or parameter settings, such as the temperature, \\\n    can cause variations in the response even when you use the same seed value. \\\n    By default, a random seed value is used.\",\n} as const;\n\nconst REPETITION_PENALTY = {\n  type: \"range\",\n  title: \"Repetition penalty\",\n  description:\n    \"Reduces the likelihood of repeating tokens from the input. \\\n    Increasing this value makes the model less prone to repetition, but setting it too high may lead to less coherent output, \\\n    often resulting in run-on sentences missing smaller words. \\\n    The token penalty is scaled according to the original token's probability.\",\n} as const;\n\nconst LOG_PROBS = {\n  type: \"boolean\",\n  title: \"Log probs\",\n  description:\n    \"Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.\",\n} as const;\n\nconst TOP_LOG_PROBS = {\n  type: \"range\",\n  title: \"Top log probs\",\n  description:\n    \"The number of most likely tokens to return at each token position, each with an associated log probability. \\\n    'logprobs' must be set to true if this parameter is used.\",\n} as const;\n\nconst ECHO = {\n  type: \"boolean\",\n  title: \"Echo\",\n  description: \"If true, the response will contain the prompt.\",\n} as const;\n\nconst RESPONSE_FORMAT = {\n  type: \"select\",\n  title: \"Response format\",\n  description:\n    \"Choose the response format of your model. For JSON, you must include the string 'JSON' in some form within your system / user prompt.\",\n} as const;\n\nconst RESPONSE_FORMAT_WITH_SCHEMA = {\n  type: \"select\",\n  title: \"Response format\",\n  description:\n    \"Choose the response format of your model. 'json_object' colloquially known as JSON mode, instructs the model to respond with a valid \\\n  JSON (must include the term 'json' in prompt). 'json_schema' colloquially known as structured outputs, allows you to specify a strict \\\n  response schema that the model will adhere to.\",\n} as const;\n\nconst RESPONSE_SCHEMA = {\n  type: \"object\",\n  title: \"Response schema\",\n  description: \"When response format is set to 'json_schema', the model will return a JSON object of the specified schema.\",\n} as const;\n\nconst CHAT_CONFIG = {\n  TEMPERATURE,\n  MAX_TOKENS,\n  STOP,\n  TOP_A,\n  TOP_P,\n  TOP_K,\n  MIN_P,\n  FREQUENCY_PENALTY,\n  PRESENCE_PENALTY,\n  REPETITION_PENALTY,\n  SEED,\n  LOG_PROBS,\n  TOP_LOG_PROBS,\n  ECHO,\n  RESPONSE_FORMAT,\n  RESPONSE_FORMAT_WITH_SCHEMA,\n  RESPONSE_SCHEMA,\n  MAX_REASONING_TOKENS,\n};\n\nexport { CHAT_CONFIG };\n","const removeUndefinedEntries = <T = unknown>(record: Record<string, T | undefined>): Record<string, T> => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  return Object.fromEntries(Object.entries(record).filter(([_, value]) => value != null)) as Record<string, T>;\n};\n\nexport { removeUndefinedEntries };\n","const isRunningInBrowser = () => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof navigator !== \"undefined\";\n};\n\nexport { isRunningInBrowser };\n","import { isRunningInBrowser } from \"./is-running-in-browser\";\n\nconst convertBase64ToUint8Array = (base64String: string): Uint8Array => {\n  const base64Url = base64String.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  const latin1string = globalThis.atob(base64Url);\n  return Uint8Array.from(latin1string, (byte) => byte.codePointAt(0)!);\n};\n\nconst convertUint8ArrayToBase64 = (array: Uint8Array): string => {\n  let latin1string = \"\";\n\n  // Note: regular for loop to support older JavaScript versions that\n  // do not support for..of on Uint8Array\n  for (let i = 0; i < array.length; i++) {\n    latin1string += String.fromCodePoint(array[i]);\n  }\n\n  return globalThis.btoa(latin1string);\n};\n\nconst encodedBase64ToString = (base64: string): string => {\n  if (isRunningInBrowser()) {\n    const binaryString = atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    const decoder = new TextDecoder(\"utf-8\");\n    return decoder.decode(bytes);\n  } else {\n    return Buffer.from(base64, \"base64\").toString(\"utf-8\");\n  }\n};\n\nconst getMimeTypeFromBase64 = (base64: string): string => {\n  const mimeTypePrefix = base64.split(\";\")[0];\n  const mimeType = mimeTypePrefix.split(\"/\")[1];\n  return mimeType;\n};\n\nexport { convertBase64ToUint8Array, convertUint8ArrayToBase64, encodedBase64ToString, getMimeTypeFromBase64 };\n","const urlWithoutTrailingSlash = (url: string): string => {\n  return url?.replace(/\\/$/, \"\");\n};\n\nexport { urlWithoutTrailingSlash };\n","import { CHAT_CONFIG, MultiStringConfigItem, RangeConfigItem, SelectBooleanConfigItem, SelectStringConfigItem } from \"@adaline/provider\";\n\nconst temperature = RangeConfigItem({\n  param: \"temperature\",\n  title: CHAT_CONFIG.TEMPERATURE.title,\n  description: CHAT_CONFIG.TEMPERATURE.description,\n  min: 0,\n  max: 2,\n  step: 0.01,\n  default: 1,\n});\n\nconst maxTokens = (maxOutputTokens: number) =>\n  RangeConfigItem({\n    param: \"max_completion_tokens\",\n    title: CHAT_CONFIG.MAX_TOKENS.title,\n    description: CHAT_CONFIG.MAX_TOKENS.description,\n    min: 0,\n    max: maxOutputTokens,\n    step: 1,\n    default: 0,\n  });\n\nconst stop = (maxSequences: number) =>\n  MultiStringConfigItem({\n    param: \"stop\",\n    title: CHAT_CONFIG.STOP(maxSequences).title,\n    description: CHAT_CONFIG.STOP(maxSequences).description,\n    max: maxSequences,\n  });\n\nconst topP = RangeConfigItem({\n  param: \"top_p\",\n  title: CHAT_CONFIG.TOP_P.title,\n  description: CHAT_CONFIG.TOP_P.description,\n  min: 0,\n  max: 1,\n  step: 0.01,\n  default: 1,\n});\n\nconst frequencyPenalty = RangeConfigItem({\n  param: \"frequency_penalty\",\n  title: CHAT_CONFIG.FREQUENCY_PENALTY.title,\n  description: CHAT_CONFIG.FREQUENCY_PENALTY.description,\n  min: -2,\n  max: 2,\n  step: 0.01,\n  default: 0,\n});\n\nconst presencePenalty = RangeConfigItem({\n  param: \"presence_penalty\",\n  title: CHAT_CONFIG.PRESENCE_PENALTY.title,\n  description: CHAT_CONFIG.PRESENCE_PENALTY.description,\n  min: -2,\n  max: 2,\n  step: 0.01,\n  default: 0,\n});\n\nconst seed = RangeConfigItem({\n  param: \"seed\",\n  title: CHAT_CONFIG.SEED.title,\n  description: CHAT_CONFIG.SEED.description,\n  min: 0,\n  max: 1000000,\n  step: 1,\n  default: 0,\n});\n\nconst logProbs = SelectBooleanConfigItem({\n  param: \"logprobs\",\n  title: CHAT_CONFIG.LOG_PROBS.title,\n  description: CHAT_CONFIG.LOG_PROBS.description,\n  default: false,\n});\n\nconst topLogProbs = RangeConfigItem({\n  param: \"top_logprobs\",\n  title: CHAT_CONFIG.TOP_LOG_PROBS.title,\n  description: CHAT_CONFIG.TOP_LOG_PROBS.description,\n  min: 0,\n  max: 20,\n  step: 1,\n  default: 0,\n});\n\nconst toolChoice = SelectStringConfigItem({\n  param: \"tool_choice\",\n  title: \"Tool choice\",\n  description:\n    \"Controls which (if any) tool is called by the model. 'none' means the model will not call a function. 'auto' means the model can pick between generating a message or calling a tool.\",\n  default: \"auto\",\n  choices: [\"auto\", \"required\", \"none\"],\n});\n\nexport { frequencyPenalty, logProbs, maxTokens, presencePenalty, seed, stop, temperature, toolChoice, topLogProbs, topP };\n","import { z } from \"zod\";\n\nimport {\n  frequencyPenalty,\n  logProbs,\n  maxTokens,\n  presencePenalty,\n  seed,\n  stop,\n  temperature,\n  toolChoice,\n  topLogProbs,\n  topP,\n} from \"./common.config.chat-model.openai\";\n\nconst ChatModelBaseConfigSchema = (maxOutputTokens: number, maxSequences: number) =>\n  z.object({\n    temperature: temperature.schema,\n    maxTokens: maxTokens(maxOutputTokens).schema,\n    stop: stop(maxSequences).schema,\n    topP: topP.schema,\n    frequencyPenalty: frequencyPenalty.schema,\n    presencePenalty: presencePenalty.schema,\n    seed: seed.schema.transform((value) => (value === 0 ? undefined : value)),\n    logProbs: logProbs.schema,\n    topLogProbs: topLogProbs.schema,\n    toolChoice: toolChoice.schema,\n  });\n\nconst ChatModelBaseConfigDef = (maxOutputTokens: number, maxSequences: number) =>\n  ({\n    temperature: temperature.def,\n    maxTokens: maxTokens(maxOutputTokens).def,\n    stop: stop(maxSequences).def,\n    topP: topP.def,\n    frequencyPenalty: frequencyPenalty.def,\n    presencePenalty: presencePenalty.def,\n    seed: seed.def,\n    logProbs: logProbs.def,\n    topLogProbs: topLogProbs.def,\n    toolChoice: toolChoice.def,\n  }) as const;\n\nexport { ChatModelBaseConfigDef, ChatModelBaseConfigSchema };\n","import { CHAT_CONFIG, ObjectSchemaConfigItem, SelectStringConfigItem } from \"@adaline/provider\";\nimport { ResponseSchema } from \"@adaline/types\";\n\nimport { ChatModelBaseConfigDef, ChatModelBaseConfigSchema } from \"./base.config.chat-model.openai\";\n\nconst responseSchema = ObjectSchemaConfigItem({\n  param: \"response_schema\",\n  title: CHAT_CONFIG.RESPONSE_SCHEMA.title,\n  description: CHAT_CONFIG.RESPONSE_SCHEMA.description,\n  objectSchema: ResponseSchema,\n});\n\nconst responseFormat = SelectStringConfigItem({\n  param: \"response_format\",\n  title: CHAT_CONFIG.RESPONSE_FORMAT_WITH_SCHEMA.title,\n  description: CHAT_CONFIG.RESPONSE_FORMAT_WITH_SCHEMA.description,\n  default: \"text\",\n  choices: [\"text\", \"json_object\", \"json_schema\"],\n});\n\nconst ChatModelResponseSchemaConfigDef = (maxOutputTokens: number, maxSequences: number) => ({\n  ...ChatModelBaseConfigDef(maxOutputTokens, maxSequences),\n  responseFormat: responseFormat.def,\n  responseSchema: responseSchema.def,\n});\n\nconst ChatModelResponseSchemaConfigSchema = (maxOutputTokens: number, maxSequences: number) =>\n  ChatModelBaseConfigSchema(maxOutputTokens, maxSequences).extend({\n    responseFormat: responseFormat.schema,\n    responseSchema: responseSchema.schema,\n  });\n\nexport { ChatModelResponseSchemaConfigDef, ChatModelResponseSchemaConfigSchema };\n","import { CHAT_CONFIG, RangeConfigItem, SelectStringConfigItem } from \"@adaline/provider\";\n\nimport { ChatModelResponseSchemaConfigDef, ChatModelResponseSchemaConfigSchema } from \"./response-schema.config.chat-model.openai\";\n\n// o1 models only support temperature = 1.0\nconst temperature = RangeConfigItem({\n  param: \"temperature\",\n  title: CHAT_CONFIG.TEMPERATURE.title,\n  description: CHAT_CONFIG.TEMPERATURE.description,\n  min: 1,\n  max: 1,\n  step: 0.01,\n  default: 1,\n});\n\nconst reasoningEffort = SelectStringConfigItem({\n  param: \"reasoning_effort\",\n  title: \"Reasoning Effort\",\n  description:\n    \"Constrains effort on reasoning for reasoning models. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.\",\n  default: \"medium\",\n  choices: [\"low\", \"medium\", \"high\"],\n});\nconst ChatModelOSeriesConfigDef = (maxOutputTokens: number, maxSequences: number) => ({\n  ...ChatModelResponseSchemaConfigDef(maxOutputTokens, maxSequences),\n  temperature: temperature.def,\n  reasoningEffort: reasoningEffort.def,\n});\n\nconst ChatModelOSeriesConfigSchema = (maxOutputTokens: number, maxSequences: number) =>\n  ChatModelResponseSchemaConfigSchema(maxOutputTokens, maxSequences).extend({\n    temperature: temperature.schema,\n    reasoningEffort: reasoningEffort.schema,\n  });\n\nexport { ChatModelOSeriesConfigDef, ChatModelOSeriesConfigSchema };\n","import { CHAT_CONFIG, SelectStringConfigItem } from \"@adaline/provider\";\n\nimport { ChatModelBaseConfigDef, ChatModelBaseConfigSchema } from \"./base.config.chat-model.openai\";\n\nconst responseFormat = SelectStringConfigItem({\n  param: \"response_format\",\n  title: CHAT_CONFIG.RESPONSE_FORMAT.title,\n  description: CHAT_CONFIG.RESPONSE_FORMAT.description,\n  default: \"text\",\n  choices: [\"text\", \"json_object\"],\n});\n\nconst ChatModelResponseFormatConfigDef = (maxOutputTokens: number, maxSequences: number) => ({\n  ...ChatModelBaseConfigDef(maxOutputTokens, maxSequences),\n  responseFormat: responseFormat.def,\n});\n\nconst ChatModelResponseFormatConfigSchema = (maxOutputTokens: number, maxSequences: number) =>\n  ChatModelBaseConfigSchema(maxOutputTokens, maxSequences).extend({\n    responseFormat: responseFormat.schema,\n  });\n\nexport { ChatModelResponseFormatConfigDef, ChatModelResponseFormatConfigSchema };\n","import { RangeConfigItem, SelectStringConfigItem } from \"@adaline/provider\";\n\nconst encodingFormat = SelectStringConfigItem({\n  param: \"encoding_format\",\n  title: \"Encoding format\",\n  description: \"Select the encoding format for the word embedding.\",\n  default: \"float\",\n  choices: [\"float\", \"base64\"],\n});\n\nconst dimensions = (maxDimensions: number) =>\n  RangeConfigItem({\n    param: \"dimensions\",\n    title: \"Dimensions\",\n    description: \"Select the number of dimensions for the word embedding.\",\n    min: 1,\n    max: maxDimensions,\n    step: 1,\n    default: maxDimensions,\n  });\n\nexport { encodingFormat, dimensions };\n","import { z } from \"zod\";\n\nimport { encodingFormat } from \"./common.config.embedding-model.openai\";\n\nconst EmbeddingModelBaseConfigSchema = () =>\n  z.object({\n    encodingFormat: encodingFormat.schema,\n  });\n\nconst EmbeddingModelBaseConfigDef = () =>\n  ({\n    encodingFormat: encodingFormat.def,\n  }) as const;\n\nexport { EmbeddingModelBaseConfigDef, EmbeddingModelBaseConfigSchema };\n","import { EmbeddingModelBaseConfigDef, EmbeddingModelBaseConfigSchema } from \"./base.config.embedding-model.openai\";\nimport { dimensions } from \"./common.config.embedding-model.openai\";\n\nconst EmbeddingModelDimensionsConfigSchema = (maxDimensions: number) =>\n  EmbeddingModelBaseConfigSchema().extend({\n    dimensions: dimensions(maxDimensions).schema,\n  });\n\nconst EmbeddingModelDimensionsConfigDef = (maxDimensions: number) =>\n  ({\n    ...EmbeddingModelBaseConfigDef(),\n    dimensions: dimensions(maxDimensions).def,\n  }) as const;\n\nexport { EmbeddingModelDimensionsConfigDef, EmbeddingModelDimensionsConfigSchema };\n","import {\n  ChatModelBaseConfigDef,\n  ChatModelBaseConfigSchema,\n  ChatModelOSeriesConfigDef,\n  ChatModelOSeriesConfigSchema,\n  ChatModelResponseFormatConfigDef,\n  ChatModelResponseFormatConfigSchema,\n  ChatModelResponseSchemaConfigDef,\n  ChatModelResponseSchemaConfigSchema,\n} from \"./chat-model\";\nimport {\n  EmbeddingModelBaseConfigDef,\n  EmbeddingModelBaseConfigSchema,\n  EmbeddingModelDimensionsConfigDef,\n  EmbeddingModelDimensionsConfigSchema,\n} from \"./embedding-model\";\n\nconst OpenAIChatModelConfigs = {\n  base: (maxOutputTokens: number, maxSequences: number) => ({\n    def: ChatModelBaseConfigDef(maxOutputTokens, maxSequences),\n    schema: ChatModelBaseConfigSchema(maxOutputTokens, maxSequences),\n  }),\n  responseFormat: (maxOutputTokens: number, maxSequences: number) => ({\n    def: ChatModelResponseFormatConfigDef(maxOutputTokens, maxSequences),\n    schema: ChatModelResponseFormatConfigSchema(maxOutputTokens, maxSequences),\n  }),\n  responseSchema: (maxOutputTokens: number, maxSequences: number) => ({\n    def: ChatModelResponseSchemaConfigDef(maxOutputTokens, maxSequences),\n    schema: ChatModelResponseSchemaConfigSchema(maxOutputTokens, maxSequences),\n  }),\n  oSeries: (maxOutputTokens: number, maxSequences: number) => ({\n    def: ChatModelOSeriesConfigDef(maxOutputTokens, maxSequences),\n    schema: ChatModelOSeriesConfigSchema(maxOutputTokens, maxSequences),\n  }),\n} as const;\n\nconst OpenAIEmbeddingModelConfigs = {\n  base: () => ({\n    def: EmbeddingModelBaseConfigDef(),\n    schema: EmbeddingModelBaseConfigSchema(),\n  }),\n  dimensions: (maxDimensions: number) => ({\n    def: EmbeddingModelDimensionsConfigDef(maxDimensions),\n    schema: EmbeddingModelDimensionsConfigSchema(maxDimensions),\n  }),\n} as const;\n\nexport { OpenAIChatModelConfigs, OpenAIEmbeddingModelConfigs };\n","{\n  \"gpt-3.5-turbo-0125\": {\n    \"modelName\": \"gpt-3.5-turbo-0125\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.5,\n            \"outputPricePerMillion\": 1.5\n          }\n        }\n      }\n    ]\n  },\n  \"gpt-3.5-turbo-1106\": {\n    \"modelName\": \"gpt-3.5-turbo-1106\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.5,\n            \"outputPricePerMillion\": 1.5\n          }\n        }\n      }\n    ]\n  },\n  \"gpt-3.5-turbo\": {\n    \"modelName\": \"gpt-3.5-turbo\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.5,\n            \"outputPricePerMillion\": 1.5\n          }\n        }\n      }\n    ]\n  },\n  \"gpt-4-0125-preview\": {\n    \"modelName\": \"gpt-4-0125-preview\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 30,\n            \"outputPricePerMillion\": 60\n          }\n        }\n      }\n    ]\n  },\n  \"gpt-4-0613\": {\n    \"modelName\": \"gpt-4-0613\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 30,\n            \"outputPricePerMillion\": 60\n          }\n        }\n      }\n    ]\n  },\n  \"gpt-4-1106-preview\": {\n    \"modelName\": \"gpt-4-1106-preview\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 30,\n            \"outputPricePerMillion\": 60\n          }\n        }\n      }\n    ]\n  },\n  \"gpt-4-turbo-2024-04-09\": {\n    \"modelName\": \"gpt-4-turbo-2024-04-09\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 10,\n            \"outputPricePerMillion\": 30\n          }\n        }\n      }\n    ]\n  },\n  \"gpt-4-turbo-preview\": {\n    \"modelName\": \"gpt-4-turbo-preview\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 10,\n            \"outputPricePerMillion\": 30\n          }\n        }\n      }\n    ]\n  },\n  \"gpt-4-turbo\": {\n    \"modelName\": \"gpt-4-turbo\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 10,\n            \"outputPricePerMillion\": 30\n          }\n        }\n      }\n    ]\n  },\n  \"gpt-4\": {\n    \"modelName\": \"gpt-4\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 30,\n            \"outputPricePerMillion\": 60\n          }\n        }\n      }\n    ]\n  },\n  \"gpt-4o-2024-05-13\": {\n    \"modelName\": \"gpt-4o-2024-05-13\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 5,\n            \"outputPricePerMillion\": 20\n          }\n        }\n      }\n    ]\n  },\n  \"gpt-4o-2024-08-06\": {\n    \"modelName\": \"gpt-4o-2024-08-06\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 2.5,\n            \"outputPricePerMillion\": 10\n          }\n        }\n      }\n    ]\n  },\n  \"gpt-4o-mini-2024-07-18\": {\n    \"modelName\": \"gpt-4o-mini-2024-07-18\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.6,\n            \"outputPricePerMillion\": 2.4\n          }\n        }\n      }\n    ]\n  },\n  \"gpt-4o-mini\": {\n    \"modelName\": \"gpt-4o-mini\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.6,\n            \"outputPricePerMillion\": 2.4\n          }\n        }\n      }\n    ]\n  },\n  \"gpt-4o\": {\n    \"modelName\": \"gpt-4o\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 5,\n            \"outputPricePerMillion\": 20\n          }\n        }\n      }\n    ]\n  },\n  \"o1-2024-12-17\": {\n    \"modelName\": \"o1-2024-12-17\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 15,\n            \"outputPricePerMillion\": 60\n          }\n        }\n      }\n    ]\n  },\n  \"o1\": {\n    \"modelName\": \"o1\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 15,\n            \"outputPricePerMillion\": 60\n          }\n        }\n      }\n    ]\n  },\n  \"o3-mini-2025-01-31\": {\n    \"modelName\": \"o3-mini-2025-01-31\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 1.1,\n            \"outputPricePerMillion\": 4.4\n          }\n        }\n      }\n    ]\n  },\n  \"o3-mini\": {\n    \"modelName\": \"o3-mini\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 1.1,\n            \"outputPricePerMillion\": 4.4\n          }\n        }\n      }\n    ]\n  },\n  \"o3-2025-04-16\": {\n    \"modelName\": \"o3-2025-04-16\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 10.0,\n            \"outputPricePerMillion\": 40.0\n          }\n        }\n      }\n    ]\n  },\n  \"o3\": {\n    \"modelName\": \"o3\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 10.0,\n            \"outputPricePerMillion\": 40.0\n          }\n        }\n      }\n    ]\n  },\n  \"o4-mini-2025-04-16\": {\n    \"modelName\": \"o4-mini-2025-04-16\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 1.1,\n            \"outputPricePerMillion\": 4.4\n          }\n        }\n      }\n    ]\n  },\n  \"o4-mini\": {\n    \"modelName\": \"o4-mini\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 1.1,\n            \"outputPricePerMillion\": 4.4\n          }\n        }\n      }\n    ]\n  }\n}","import { z } from \"zod\";\n\nimport { ChatModelSchemaType, ChatModelV1, EmbeddingModelSchemaType, EmbeddingModelV1, ProviderError, ProviderV1 } from \"@adaline/provider\";\n\nimport * as Models from \"../models\";\n\nconst ProviderLiteral = \"openai\";\nclass OpenAI<C extends Models.BaseChatModelOptionsType, E extends Models.BaseEmbeddingModelOptionsType> implements ProviderV1<C, E> {\n  readonly version = \"v1\" as const;\n  readonly name = ProviderLiteral;\n  static readonly baseUrl = \"https://api.openai.com/v1\";\n\n  private readonly chatModelFactories: Record<\n    string,\n    {\n      model: { new (options: any): ChatModelV1 };\n      modelOptions: z.ZodType<any>;\n      modelSchema: ChatModelSchemaType;\n    }\n  > = {\n    [Models.GPT_3_5_TurboLiteral]: {\n      model: Models.GPT_3_5_Turbo,\n      modelOptions: Models.GPT_3_5_TurboOptions,\n      modelSchema: Models.GPT_3_5_TurboSchema,\n    },\n    [Models.GPT_3_5_Turbo_0125Literal]: {\n      model: Models.GPT_3_5_Turbo_0125,\n      modelOptions: Models.GPT_3_5_Turbo_0125Options,\n      modelSchema: Models.GPT_3_5_Turbo_0125Schema,\n    },\n    [Models.GPT_3_5_Turbo_1106Literal]: {\n      model: Models.GPT_3_5_Turbo_1106,\n      modelOptions: Models.GPT_3_5_Turbo_1106Options,\n      modelSchema: Models.GPT_3_5_Turbo_1106Schema,\n    },\n    [Models.GPT_4_0125_PreviewLiteral]: {\n      model: Models.GPT_4_0125_Preview,\n      modelOptions: Models.GPT_4_0125_PreviewOptions,\n      modelSchema: Models.GPT_4_0125_PreviewSchema,\n    },\n    [Models.GPT_4_0613Literal]: {\n      model: Models.GPT_4_0613,\n      modelOptions: Models.GPT_4_0613Options,\n      modelSchema: Models.GPT_4_0613Schema,\n    },\n    [Models.GPT_4_1106_PreviewLiteral]: {\n      model: Models.GPT_4_1106_Preview,\n      modelOptions: Models.GPT_4_1106_PreviewOptions,\n      modelSchema: Models.GPT_4_1106_PreviewSchema,\n    },\n    [Models.GPT_4_Turbo_2024_04_09Literal]: {\n      model: Models.GPT_4_Turbo_2024_04_09,\n      modelOptions: Models.GPT_4_Turbo_2024_04_09Options,\n      modelSchema: Models.GPT_4_Turbo_2024_04_09Schema,\n    },\n    [Models.GPT_4_Turbo_PreviewLiteral]: {\n      model: Models.GPT_4_Turbo_Preview,\n      modelOptions: Models.GPT_4_Turbo_PreviewOptions,\n      modelSchema: Models.GPT_4_Turbo_PreviewSchema,\n    },\n    [Models.GPT_4_TurboLiteral]: {\n      model: Models.GPT_4_Turbo,\n      modelOptions: Models.GPT_4_TurboOptions,\n      modelSchema: Models.GPT_4_TurboSchema,\n    },\n    [Models.GPT_4Literal]: {\n      model: Models.GPT_4,\n      modelOptions: Models.GPT_4Options,\n      modelSchema: Models.GPT_4Schema,\n    },\n    [Models.GPT_4o_2024_08_06Literal]: {\n      model: Models.GPT_4o_2024_08_06,\n      modelOptions: Models.GPT_4o_2024_08_06Options,\n      modelSchema: Models.GPT_4o_2024_08_06Schema,\n    },\n    [Models.GPT_4o_MiniLiteral]: {\n      model: Models.GPT_4o_Mini,\n      modelOptions: Models.GPT_4o_MiniOptions,\n      modelSchema: Models.GPT_4o_MiniSchema,\n    },\n    [Models.GPT_4oLiteral]: {\n      model: Models.GPT_4o,\n      modelOptions: Models.GPT_4oOptions,\n      modelSchema: Models.GPT_4oSchema,\n    },\n    [Models.GPT_4o_Mini_2024_07_18Literal]: {\n      model: Models.GPT_4o_Mini_2024_07_18,\n      modelOptions: Models.GPT_4o_Mini_2024_07_18Options,\n      modelSchema: Models.GPT_4o_Mini_2024_07_18Schema,\n    },\n    [Models.GPT_4o_2024_05_13Literal]: {\n      model: Models.GPT_4o_2024_05_13,\n      modelOptions: Models.GPT_4o_2024_05_13Options,\n      modelSchema: Models.GPT_4o_2024_05_13Schema,\n    },\n    [Models.O1Literal]: {\n      model: Models.O1,\n      modelOptions: Models.O1Options,\n      modelSchema: Models.O1Schema,\n    },\n    [Models.O1_2024_12_17Literal]: {\n      model: Models.O1_2024_12_17,\n      modelOptions: Models.O1_2024_12_17Options,\n      modelSchema: Models.O1_2024_12_17Schema,\n    },\n    [Models.O3Mini2025_01_31Literal]: {\n      model: Models.O3Mini2025_01_31,\n      modelOptions: Models.O3Mini2025_01_31Options,\n      modelSchema: Models.O3Mini2025_01_31Schema,\n    },\n    [Models.O3MiniLiteral]: {\n      model: Models.O3Mini,\n      modelOptions: Models.O3MiniOptions,\n      modelSchema: Models.O3MiniSchema,\n    },\n    [Models.O3_2025_04_16Literal]: {\n      model: Models.O3_2025_04_16,\n      modelOptions: Models.O3_2025_04_16Options,\n      modelSchema: Models.O3_2025_04_16Schema,\n    },\n    [Models.O3Literal]: {\n      model: Models.O3,\n      modelOptions: Models.O3Options,\n      modelSchema: Models.O3Schema,\n    },\n    [Models.O4_Mini_2025_04_16Literal]: {\n      model: Models.O4_Mini_2025_04_16,\n      modelOptions: Models.O4_Mini_2025_04_16Options,\n      modelSchema: Models.O4_Mini_2025_04_16Schema,\n    },\n    [Models.O4_MiniLiteral]: {\n      model: Models.O4_Mini,\n      modelOptions: Models.O4_MiniOptions,\n      modelSchema: Models.O4_MiniSchema,\n    },\n  };\n\n  private readonly embeddingModelFactories: Record<\n    string,\n    {\n      model: { new (options: any): EmbeddingModelV1 };\n      modelOptions: z.ZodType<any>;\n      modelSchema: EmbeddingModelSchemaType;\n    }\n  > = {\n    [Models.Text_Embedding_Ada002Literal]: {\n      model: Models.Text_Embedding_Ada002,\n      modelOptions: Models.Text_Embedding_Ada002_Options,\n      modelSchema: Models.Text_Embedding_Ada002Schema,\n    },\n    [Models.Text_Embedding_3_SmallLiteral]: {\n      model: Models.Text_Embedding_3_Small,\n      modelOptions: Models.Text_Embedding_3_Small_Options,\n      modelSchema: Models.Text_Embedding_3_SmallSchema,\n    },\n    [Models.Text_Embedding_3_LargeLiteral]: {\n      model: Models.Text_Embedding_3_Large,\n      modelOptions: Models.Text_Embedding_3_Large_Options,\n      modelSchema: Models.Text_Embedding_3_LargeSchema,\n    },\n  };\n\n  chatModelLiterals(): string[] {\n    return Object.keys(this.chatModelFactories);\n  }\n\n  chatModelSchemas(): Record<string, ChatModelSchemaType> {\n    return Object.keys(this.chatModelFactories).reduce(\n      (acc, key) => {\n        acc[key] = this.chatModelFactories[key].modelSchema;\n        return acc;\n      },\n      {} as Record<string, ChatModelSchemaType>\n    );\n  }\n\n  chatModel(options: C): ChatModelV1 {\n    const modelName = options.modelName;\n    if (!(modelName in this.chatModelFactories)) {\n      throw new ProviderError({\n        info: `OpenAI chat model: ${modelName} not found`,\n        cause: new Error(`OpenAI chat model: ${modelName} not found, available chat models: \n          [${this.chatModelLiterals().join(\", \")}]`),\n      });\n    }\n\n    const model = this.chatModelFactories[modelName].model;\n    const parsedOptions = this.chatModelFactories[modelName].modelOptions.parse(options);\n    return new model(parsedOptions);\n  }\n\n  embeddingModelLiterals(): string[] {\n    return Object.keys(this.embeddingModelFactories);\n  }\n\n  embeddingModelSchemas(): Record<string, EmbeddingModelSchemaType> {\n    return Object.keys(this.embeddingModelFactories).reduce(\n      (acc, key) => {\n        acc[key] = this.embeddingModelFactories[key].modelSchema;\n        return acc;\n      },\n      {} as Record<string, EmbeddingModelSchemaType>\n    );\n  }\n\n  embeddingModel(options: E): EmbeddingModelV1 {\n    const modelName = options.modelName;\n    if (!(modelName in this.embeddingModelFactories)) {\n      throw new ProviderError({\n        info: `OpenAI embedding model: ${modelName} not found`,\n        cause: new Error(`OpenAI embedding model: ${modelName} not found, available embedding models: \n          [${this.embeddingModelLiterals().join(\", \")}]`),\n      });\n    }\n\n    const model = this.embeddingModelFactories[modelName].model;\n    const parsedOptions = this.embeddingModelFactories[modelName].modelOptions.parse(options);\n    return new model(parsedOptions);\n  }\n}\n\nexport { OpenAI, ProviderLiteral };\n","import { z } from \"zod\";\n\nimport { AssistantRoleLiteral, SystemRoleLiteral, ToolRoleLiteral, UserRoleLiteral } from \"@adaline/types\";\n\nconst OpenAIChatModelRoles = z.enum([SystemRoleLiteral, UserRoleLiteral, AssistantRoleLiteral, ToolRoleLiteral]);\n\nconst OpenAIChatModelRolesMap = {\n  system: SystemRoleLiteral,\n  user: UserRoleLiteral,\n  assistant: AssistantRoleLiteral,\n  tool: ToolRoleLiteral,\n} as const;\n\nexport { OpenAIChatModelRoles, OpenAIChatModelRolesMap };\n","import { z } from \"zod\";\n\nimport { ChatModelSchemaType } from \"@adaline/provider\";\nimport { ImageModalityLiteral, TextModalityLiteral, ToolCallModalityLiteral, ToolResponseModalityLiteral } from \"@adaline/types\";\n\nconst OpenAIChatModelModalities: ChatModelSchemaType[\"modalities\"] = [\n  TextModalityLiteral,\n  ImageModalityLiteral,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n];\n\nconst OpenAIChatModelModalitiesEnum = z.enum([\n  TextModalityLiteral,\n  ImageModalityLiteral,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n]);\n\nconst OpenAIChatModelTextModalities: ChatModelSchemaType[\"modalities\"] = [TextModalityLiteral];\n\nconst OpenAIChatModelTextModalitiesEnum = z.enum([TextModalityLiteral]);\n\nconst OpenAIChatModelTextToolModalities: ChatModelSchemaType[\"modalities\"] = [\n  TextModalityLiteral,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n];\n\nconst OpenAIChatModelTextToolModalitiesEnum = z.enum([TextModalityLiteral, ToolCallModalityLiteral, ToolResponseModalityLiteral]);\n\nexport {\n  OpenAIChatModelModalitiesEnum,\n  OpenAIChatModelModalities,\n  OpenAIChatModelTextModalitiesEnum,\n  OpenAIChatModelTextModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n  OpenAIChatModelTextToolModalities,\n};\n","import { z } from \"zod\";\n\nconst OpenAIBaseLogProb = z.object({\n  token: z.string(),\n  logprob: z.number(),\n  bytes: z.array(z.number()).nullable(),\n});\n\nconst OpenAILogProb = z\n  .object({\n    content: z\n      .array(\n        OpenAIBaseLogProb.extend({\n          top_logprobs: z.array(OpenAIBaseLogProb),\n        })\n      )\n      .nullable()\n      .optional(),\n    refusal: z\n      .array(\n        OpenAIBaseLogProb.extend({\n          top_logprobs: z.array(OpenAIBaseLogProb),\n        })\n      )\n      .nullable()\n      .optional(),\n  })\n  .nullable();\n\nconst OpenAIToolCallsCompleteChatResponse = z.array(\n  z.object({\n    id: z.string().min(1),\n    type: z.enum([\"function\"]),\n    function: z.object({\n      name: z.string(),\n      arguments: z.string(),\n    }),\n  })\n);\n\nconst OpenAICompleteChatResponse = z.object({\n  id: z.string(),\n  object: z.literal(\"chat.completion\"),\n  created: z.number(),\n  model: z.string(),\n  system_fingerprint: z.string().nullable(),\n  choices: z.array(\n    z.object({\n      index: z.number(),\n      message: z.object({\n        role: z.string(),\n        content: z.string().nullable().optional(),\n        tool_calls: OpenAIToolCallsCompleteChatResponse.optional(),\n        refusal: z.string().nullable().optional(),\n      }),\n      logprobs: OpenAILogProb.optional(),\n      finish_reason: z.string(),\n    })\n  ),\n  usage: z.object({\n    prompt_tokens: z.number(),\n    completion_tokens: z.number(),\n    total_tokens: z.number(),\n  }),\n});\ntype OpenAICompleteChatResponseType = z.infer<typeof OpenAICompleteChatResponse>;\n\nconst OpenAIToolCallsStreamChatResponse = z.array(\n  z.object({\n    index: z.number().int(),\n    id: z.string().min(1).optional(),\n    type: z.enum([\"function\"]).optional(),\n    function: z\n      .object({\n        name: z.string().min(1).optional(),\n        arguments: z.string().optional(),\n      })\n      .optional(),\n  })\n);\n\nconst OpenAIStreamChatResponse = z.object({\n  id: z.string(),\n  object: z.string(),\n  created: z.number(),\n  model: z.string(),\n  system_fingerprint: z.string().nullable().optional(),\n  choices: z.array(\n    z.object({\n      index: z.number(),\n      delta: z\n        .object({\n          content: z.string().nullable().optional(),\n          tool_calls: OpenAIToolCallsStreamChatResponse.optional(),\n          refusal: z.string().nullable().optional(),\n        })\n        .or(z.object({})),\n      logprobs: OpenAILogProb.optional(),\n      finish_reason: z.string().nullable(),\n    })\n  ),\n  usage: z\n    .object({\n      prompt_tokens: z.number(),\n      completion_tokens: z.number(),\n      total_tokens: z.number(),\n    })\n    .nullable()\n    .optional(),\n});\ntype OpenAIStreamChatResponseType = z.infer<typeof OpenAIStreamChatResponse>;\n\nexport {\n  OpenAICompleteChatResponse,\n  OpenAIStreamChatResponse,\n  OpenAIToolCallsCompleteChatResponse,\n  OpenAIToolCallsStreamChatResponse,\n  type OpenAICompleteChatResponseType,\n  type OpenAIStreamChatResponseType,\n};\n","import { z } from \"zod\";\n\nconst OpenAIChatRequestTool = z.object({\n  type: z.literal(\"function\"),\n  function: z.object({\n    name: z.string().min(1),\n    description: z.string().min(1).optional(),\n    strict: z.boolean().optional(),\n    parameters: z.any(),\n  }),\n});\ntype OpenAIChatRequestToolType = z.infer<typeof OpenAIChatRequestTool>;\n\nconst OpenAIChatRequestToolChoiceEnum = z.enum([\"none\", \"auto\", \"required\"]);\ntype OpenAIChatRequestToolChoiceEnumType = z.infer<typeof OpenAIChatRequestToolChoiceEnum>;\n\nconst OpenAIChatRequestToolChoiceFunction = z.object({\n  type: z.literal(\"function\"),\n  function: z.object({\n    name: z.string().min(1),\n  }),\n});\ntype OpenAIChatRequestToolChoiceFunctionType = z.infer<typeof OpenAIChatRequestToolChoiceFunction>;\n\nconst OpenAIChatRequestResponseFormat = z\n  .object({\n    type: z.enum([\"text\", \"json_object\"]),\n  })\n  .or(\n    z.object({\n      type: z.literal(\"json_schema\"),\n      json_schema: z.object({\n        name: z.string().min(1),\n        description: z.string().min(1).optional(),\n        strict: z.boolean().optional(),\n        schema: z.any(),\n      }),\n    })\n  );\ntype OpenAIChatRequestResponseFormatType = z.infer<typeof OpenAIChatRequestResponseFormat>;\n\nconst OpenAIChatRequestTextContent = z.object({\n  text: z.string().min(1),\n  type: z.literal(\"text\"),\n});\ntype OpenAIChatRequestTextContentType = z.infer<typeof OpenAIChatRequestTextContent>;\n\nconst OpenAIChatRequestImageContent = z.object({\n  type: z.literal(\"image_url\"),\n  image_url: z.object({\n    url: z.string().url().min(1),\n    detail: z.enum([\"low\", \"high\", \"auto\"]).optional(),\n  }),\n});\ntype OpenAIChatRequestImageContentType = z.infer<typeof OpenAIChatRequestImageContent>;\n\nconst OpenAIChatRequestToolCallContent = z.object({\n  id: z.string().min(1),\n  type: z.literal(\"function\"),\n  function: z.object({\n    name: z.string().min(1),\n    arguments: z.string().min(1),\n  }),\n});\ntype OpenAIChatRequestToolCallContentType = z.infer<typeof OpenAIChatRequestToolCallContent>;\n\nconst OpenAIChatRequestSystemMessage = z.object({\n  role: z.literal(\"system\"),\n  content: z.string().min(1).or(z.array(OpenAIChatRequestTextContent).min(1)),\n});\ntype OpenAIChatRequestSystemMessageType = z.infer<typeof OpenAIChatRequestSystemMessage>;\n\nconst OpenAIChatRequestUserMessage = z.object({\n  role: z.literal(\"user\"),\n  content: z\n    .string()\n    .min(1)\n    .or(z.array(z.union([OpenAIChatRequestTextContent, OpenAIChatRequestImageContent])).min(1)),\n});\ntype OpenAIChatRequestUserMessageType = z.infer<typeof OpenAIChatRequestUserMessage>;\n\nconst OpenAIChatRequestAssistantMessage = z.object({\n  role: z.literal(\"assistant\"),\n  content: z.string().min(1).or(z.array(OpenAIChatRequestTextContent).min(1)).optional(),\n  tool_calls: z.array(OpenAIChatRequestToolCallContent).min(1).optional(),\n});\ntype OpenAIChatRequestAssistantMessageType = z.infer<typeof OpenAIChatRequestAssistantMessage>;\n\nconst OpenAIChatRequestToolMessage = z.object({\n  role: z.literal(\"tool\"),\n  tool_call_id: z.string().min(1),\n  content: z.string().min(1),\n});\ntype OpenAIChatRequestToolMessageType = z.infer<typeof OpenAIChatRequestToolMessage>;\n\nconst OpenAIChatRequestMessage = z.union([\n  OpenAIChatRequestSystemMessage,\n  OpenAIChatRequestUserMessage,\n  OpenAIChatRequestAssistantMessage,\n  OpenAIChatRequestToolMessage,\n]);\ntype OpenAIChatRequestMessageType = z.infer<typeof OpenAIChatRequestMessage>;\n\nconst OpenAIChatRequest = z.object({\n  model: z.string().min(1).optional(),\n  messages: z.array(OpenAIChatRequestMessage).min(1),\n  frequency_penalty: z.number().min(-2).max(2).nullable().optional(),\n  logprobs: z.boolean().nullable().optional(),\n  top_logprobs: z.number().min(0).max(20).nullable().optional(),\n  max_completion_tokens: z.number().min(0).nullable().optional(),\n  presence_penalty: z.number().min(-2).max(2).nullable().optional(),\n  response_format: OpenAIChatRequestResponseFormat.optional(),\n  seed: z.number().nullable().optional(),\n  stop: z.string().or(z.array(z.string()).max(4)).nullable().optional(),\n  temperature: z.number().min(0).max(2).nullable().optional(),\n  top_p: z.number().min(0).max(1).nullable().optional(),\n  tools: z.array(OpenAIChatRequestTool).optional(),\n  tool_choice: OpenAIChatRequestToolChoiceEnum.or(OpenAIChatRequestToolChoiceFunction).optional(),\n});\ntype OpenAIChatRequestType = z.infer<typeof OpenAIChatRequest>;\n\nexport {\n  OpenAIChatRequest,\n  OpenAIChatRequestAssistantMessage,\n  OpenAIChatRequestImageContent,\n  OpenAIChatRequestMessage,\n  OpenAIChatRequestResponseFormat,\n  OpenAIChatRequestSystemMessage,\n  OpenAIChatRequestTextContent,\n  OpenAIChatRequestTool,\n  OpenAIChatRequestToolCallContent,\n  OpenAIChatRequestToolChoiceEnum,\n  OpenAIChatRequestToolChoiceFunction,\n  OpenAIChatRequestToolMessage,\n  OpenAIChatRequestUserMessage,\n  type OpenAIChatRequestAssistantMessageType,\n  type OpenAIChatRequestImageContentType,\n  type OpenAIChatRequestMessageType,\n  type OpenAIChatRequestResponseFormatType,\n  type OpenAIChatRequestSystemMessageType,\n  type OpenAIChatRequestTextContentType,\n  type OpenAIChatRequestToolCallContentType,\n  type OpenAIChatRequestToolChoiceEnumType,\n  type OpenAIChatRequestToolChoiceFunctionType,\n  type OpenAIChatRequestToolMessageType,\n  type OpenAIChatRequestToolType,\n  type OpenAIChatRequestType,\n  type OpenAIChatRequestUserMessageType,\n};\n","import { z } from \"zod\";\n\nimport {\n  ChatModelSchemaType,\n  ChatModelV1,\n  getMimeTypeFromBase64,\n  HeadersType,\n  InvalidConfigError,\n  InvalidMessagesError,\n  InvalidModelRequestError,\n  InvalidToolsError,\n  ModelResponseError,\n  ParamsType,\n  removeUndefinedEntries,\n  SelectStringConfigItemDefType,\n  UrlType,\n  urlWithoutTrailingSlash,\n} from \"@adaline/provider\";\nimport {\n  AssistantRoleLiteral,\n  Base64ImageContentTypeLiteral,\n  Base64ImageContentValueType,\n  ChatLogProbsType,\n  ChatModelPriceType,\n  ChatResponseType,\n  ChatUsageType,\n  Config,\n  ConfigType,\n  ContentType,\n  createPartialTextMessage,\n  createPartialToolCallMessage,\n  createTextContent,\n  createToolCallContent,\n  ImageModalityLiteral,\n  Message,\n  MessageType,\n  PartialChatResponseType,\n  SystemRoleLiteral,\n  TextModalityLiteral,\n  Tool,\n  ToolCallContentType,\n  ToolCallModalityLiteral,\n  ToolResponseContentType,\n  ToolResponseModalityLiteral,\n  ToolRoleLiteral,\n  ToolType,\n  UrlImageContentTypeLiteral,\n  UserRoleLiteral,\n} from \"@adaline/types\";\n\nimport pricingData from \"../pricing.json\";\nimport { OpenAI } from \"./../../provider/provider.openai\";\nimport {\n  OpenAIChatRequest,\n  OpenAIChatRequestImageContentType,\n  OpenAIChatRequestTextContentType,\n  OpenAIChatRequestToolType,\n  OpenAIChatRequestType,\n  OpenAICompleteChatResponse,\n  OpenAICompleteChatResponseType,\n  OpenAIStreamChatResponse,\n  OpenAIStreamChatResponseType,\n} from \"./types\";\n\nconst BaseChatModelOptions = z.object({\n  modelName: z.string(),\n  apiKey: z.string(),\n  baseUrl: z.string().url().optional(),\n  completeChatUrl: z.string().url().optional(),\n  streamChatUrl: z.string().url().optional(),\n  organization: z.string().optional(),\n});\ntype BaseChatModelOptionsType = z.infer<typeof BaseChatModelOptions>;\n\nclass BaseChatModel implements ChatModelV1<ChatModelSchemaType> {\n  readonly version = \"v1\" as const;\n  modelSchema: ChatModelSchemaType;\n  modelName: string;\n\n  private readonly apiKey: string;\n  private readonly baseUrl: string;\n  private readonly streamChatUrl: string;\n  private readonly completeChatUrl: string;\n  private readonly organization: string | undefined;\n\n  constructor(modelSchema: ChatModelSchemaType, options: BaseChatModelOptionsType) {\n    const parsedOptions = BaseChatModelOptions.parse(options);\n    this.modelSchema = modelSchema;\n    this.modelName = parsedOptions.modelName;\n    this.apiKey = parsedOptions.apiKey;\n    this.baseUrl = urlWithoutTrailingSlash(parsedOptions.baseUrl || OpenAI.baseUrl);\n    this.streamChatUrl = urlWithoutTrailingSlash(parsedOptions.streamChatUrl || `${this.baseUrl}/chat/completions`);\n    this.completeChatUrl = urlWithoutTrailingSlash(parsedOptions.completeChatUrl || `${this.baseUrl}/chat/completions`);\n    this.organization = parsedOptions.organization;\n  }\n\n  getDefaultBaseUrl(): UrlType {\n    return this.baseUrl;\n  }\n\n  getDefaultHeaders(): HeadersType {\n    return {\n      Authorization: `Bearer ${this.apiKey}`,\n      \"Content-Type\": \"application/json\",\n      ...(this.organization ? { \"OpenAI-Organization\": this.organization } : {}),\n    };\n  }\n\n  getDefaultParams(): ParamsType {\n    return {\n      model: this.modelName,\n    };\n  }\n\n  // x-ratelimit-limit-requests\tThe maximum number of requests that are permitted before exhausting the rate limit.\n  // x-ratelimit-limit-tokens\tThe maximum number of tokens that are permitted before exhausting the rate limit.\n  // x-ratelimit-remaining-requests The remaining number of requests that are permitted before exhausting the rate limit.\n  // x-ratelimit-remaining-tokens\tThe remaining number of tokens that are permitted before exhausting the rate limit.\n  // x-ratelimit-reset-requests\tThe time until the rate limit (based on requests) resets to its initial state.\n  // x-ratelimit-reset-tokens\tThe time until the rate limit (based on tokens) resets to its initial state.\n  getRetryDelay(responseHeaders: HeadersType): { shouldRetry: boolean; delayMs: number } {\n    // parse duration from header value of format \"6m0s\" or \"21s\" or \"41ms\" or \"2s81ms\" or \"5h50m30ms\" and such\n    const parseDuration = (duration: string): number => {\n      const regex = /(\\d+)(h|m|s|ms)/g;\n      const timeUnits: { [unit: string]: number } = {\n        h: 3600000, // 1 hour = 60 * 60 * 1000 ms\n        m: 60000, // 1 minute = 60 * 1000 ms\n        s: 1000, // 1 second = 1000 ms\n        ms: 1, // milliseconds\n      };\n\n      let match;\n      let totalMs = 0;\n      while ((match = regex.exec(duration)) !== null) {\n        const value = parseInt(match[1]);\n        const unit = match[2];\n        totalMs += value * timeUnits[unit];\n      }\n\n      return totalMs;\n    };\n\n    let resetRequestsDelayMs = 0;\n    let resetTokensDelayMs = 0;\n    const shouldRetry = true;\n    if (responseHeaders[\"x-ratelimit-reset-requests\"]) {\n      resetRequestsDelayMs = parseDuration(responseHeaders[\"x-ratelimit-reset-requests\"]);\n    }\n    if (responseHeaders[\"x-ratelimit-reset-tokens\"]) {\n      resetTokensDelayMs = parseDuration(responseHeaders[\"x-ratelimit-reset-tokens\"]);\n    }\n\n    // if rate limited by requests, then it's reset must be the higher of two and visa versa\n    const delayMs = Math.max(resetRequestsDelayMs, resetTokensDelayMs);\n    return { shouldRetry, delayMs };\n  }\n\n  getTokenCount(messages: MessageType[]): number {\n    return messages.reduce((acc, message) => {\n      return acc + message.content.map((content) => (content.modality === \"text\" ? content.value : \"\")).join(\" \").length;\n    }, 0);\n  }\n\n  transformModelRequest(request: OpenAIChatRequestType): {\n    modelName: string | undefined;\n    config: ConfigType;\n    messages: MessageType[];\n    tools: ToolType[] | undefined;\n  } {\n    const safeRequest = OpenAIChatRequest.safeParse(request);\n    if (!safeRequest.success) {\n      throw new InvalidModelRequestError({ info: \"Invalid model request\", cause: safeRequest.error });\n    }\n\n    const parsedRequest = safeRequest.data;\n\n    const modelName = parsedRequest.model;\n\n    if (parsedRequest.tool_choice && (!parsedRequest.tools || parsedRequest.tools.length === 0)) {\n      throw new InvalidModelRequestError({\n        info: `Invalid model request for model : '${this.modelName}'`,\n        cause: new Error(\"'tools' are required when 'tool_choice' is specified\"),\n      });\n    }\n\n    const _config: ConfigType = {};\n    if (parsedRequest.response_format) {\n      _config.responseFormat = parsedRequest.response_format.type;\n      if (parsedRequest.response_format.type === \"json_schema\") {\n        _config.responseSchema = {\n          name: parsedRequest.response_format.json_schema.name,\n          description: parsedRequest.response_format.json_schema.description || \"\",\n          strict: parsedRequest.response_format.json_schema.strict,\n          schema: parsedRequest.response_format.json_schema.schema,\n        };\n      }\n    }\n\n    if (parsedRequest.tool_choice) {\n      if (typeof parsedRequest.tool_choice === \"string\") {\n        _config.toolChoice = parsedRequest.tool_choice;\n      } else {\n        _config.toolChoice = parsedRequest.tool_choice.function.name;\n      }\n    }\n\n    _config.seed = parsedRequest.seed;\n    _config.maxTokens = parsedRequest.max_completion_tokens;\n    _config.temperature = parsedRequest.temperature;\n    _config.topP = parsedRequest.top_p;\n    _config.presencePenalty = parsedRequest.presence_penalty;\n    _config.frequencyPenalty = parsedRequest.frequency_penalty;\n    _config.stop = parsedRequest.stop;\n    _config.logProbs = parsedRequest.logprobs;\n    _config.topLogProbs = parsedRequest.top_logprobs;\n\n    const config = Config().parse(removeUndefinedEntries(_config));\n\n    const messages: MessageType[] = [];\n    const toolCallMap: { [id: string]: ToolCallContentType } = {};\n    parsedRequest.messages.forEach((message) => {\n      const role = message.role;\n      switch (role) {\n        case \"system\":\n          {\n            const content = message.content as string | OpenAIChatRequestTextContentType[];\n            if (typeof content === \"string\") {\n              messages.push({\n                role: role,\n                content: [{ modality: TextModalityLiteral, value: content }],\n              });\n            } else {\n              const _content = content.map((c) => {\n                return { modality: TextModalityLiteral, value: c.text };\n              });\n              messages.push({ role: role, content: _content });\n            }\n          }\n          break;\n\n        case \"user\":\n          {\n            const content = message.content as string | (OpenAIChatRequestTextContentType | OpenAIChatRequestImageContentType)[];\n            if (typeof content === \"string\") {\n              messages.push({\n                role: role,\n                content: [{ modality: TextModalityLiteral, value: content }],\n              });\n            } else {\n              const _content = content.map((c) => {\n                if (c.type === \"text\") {\n                  return { modality: TextModalityLiteral, value: c.text };\n                } else {\n                  if (c.image_url.url.startsWith(\"data:\")) {\n                    return {\n                      modality: ImageModalityLiteral,\n                      detail: c.image_url.detail || \"auto\",\n                      value: {\n                        type: Base64ImageContentTypeLiteral,\n                        base64: c.image_url.url,\n                        mediaType: getMimeTypeFromBase64(c.image_url.url) as Base64ImageContentValueType[\"mediaType\"],\n                      },\n                    };\n                  } else {\n                    return {\n                      modality: ImageModalityLiteral,\n                      detail: c.image_url.detail || \"auto\",\n                      value: { type: UrlImageContentTypeLiteral, url: c.image_url.url },\n                    };\n                  }\n                }\n              });\n              messages.push({ role: role, content: _content });\n            }\n          }\n          break;\n\n        case \"assistant\":\n          {\n            const assistantContent: ContentType[] = [];\n\n            if (!message.content && !message.tool_calls) {\n              throw new InvalidModelRequestError({\n                info: `Invalid model request for model : '${this.modelName}'`,\n                cause: new Error(\"one of'content' or 'tool_calls' must be provided\"),\n              });\n            }\n\n            if (message.content) {\n              const content = message.content as string | OpenAIChatRequestTextContentType[];\n              if (typeof content === \"string\") {\n                assistantContent.push({ modality: TextModalityLiteral, value: content });\n              } else {\n                content.forEach((c) => {\n                  assistantContent.push({ modality: TextModalityLiteral, value: c.text });\n                });\n              }\n            }\n\n            if (message.tool_calls) {\n              const toolCalls = message.tool_calls;\n              toolCalls.forEach((toolCall, index) => {\n                const toolCallContent: ToolCallContentType = {\n                  modality: ToolCallModalityLiteral,\n                  id: toolCall.id,\n                  index: index,\n                  name: toolCall.function.name,\n                  arguments: toolCall.function.arguments,\n                };\n                assistantContent.push(toolCallContent);\n                toolCallMap[toolCallContent.id] = toolCallContent;\n              });\n            }\n            messages.push({ role: role, content: assistantContent });\n          }\n          break;\n\n        case \"tool\":\n          {\n            const toolResponse = message;\n            messages.push({\n              role: role,\n              content: [\n                {\n                  modality: ToolResponseModalityLiteral,\n                  id: toolResponse.tool_call_id,\n                  index: toolCallMap[toolResponse.tool_call_id].index,\n                  name: toolCallMap[toolResponse.tool_call_id].name,\n                  data: toolResponse.content,\n                },\n              ],\n            });\n          }\n          break;\n      }\n    });\n\n    const tools: ToolType[] = [];\n    if (parsedRequest.tools) {\n      parsedRequest.tools.forEach((tool: OpenAIChatRequestToolType) => {\n        tools.push({\n          type: \"function\",\n          definition: {\n            schema: {\n              name: tool.function.name,\n              description: tool.function.description || \"\",\n              strict: tool.function.strict,\n              parameters: tool.function.parameters,\n            },\n          },\n        });\n      });\n    }\n\n    return {\n      modelName,\n      config,\n      messages,\n      tools: tools.length > 0 ? tools : undefined,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  transformConfig(config: ConfigType, messages?: MessageType[], tools?: ToolType[]): ParamsType {\n    const _toolChoice = config.toolChoice;\n    delete config.toolChoice; // can have a specific tool name that is not in the model schema, validated at transformation\n\n    const _parsedConfig = this.modelSchema.config.schema.safeParse(config);\n    if (!_parsedConfig.success) {\n      throw new InvalidConfigError({\n        info: `Invalid config for model : '${this.modelName}'`,\n        cause: _parsedConfig.error,\n      });\n    }\n\n    const parsedConfig = _parsedConfig.data as ConfigType;\n    if (_toolChoice !== undefined) {\n      parsedConfig.toolChoice = _toolChoice;\n    }\n\n    Object.keys(parsedConfig).forEach((key) => {\n      if (!(key in this.modelSchema.config.def)) {\n        throw new InvalidConfigError({\n          info: `Invalid config for model : '${this.modelName}'`,\n          cause: new Error(`Invalid config key : '${key}', \n            available keys : [${Object.keys(this.modelSchema.config.def).join(\", \")}]`),\n        });\n      }\n    });\n\n    const transformedConfig = Object.keys(parsedConfig).reduce((acc, key) => {\n      const def = this.modelSchema.config.def[key];\n      const paramKey = def.param;\n      const paramValue = (parsedConfig as ConfigType)[key];\n\n      if (paramKey === \"max_completion_tokens\" && def.type === \"range\" && paramValue === 0) {\n        acc[paramKey] = def.max;\n      } else {\n        acc[paramKey] = paramValue;\n      }\n\n      return acc;\n    }, {} as ParamsType);\n\n    if (transformedConfig.top_logprobs && !transformedConfig.logprobs) {\n      throw new InvalidConfigError({\n        info: `Invalid config for model : '${this.modelName}'`,\n        cause: new Error(\"'logprobs' must be 'true' when 'top_logprobs' is specified\"),\n      });\n    }\n\n    if (\"tool_choice\" in transformedConfig && transformedConfig.tool_choice !== undefined) {\n      const toolChoice = transformedConfig.tool_choice as string;\n      if (!tools || (tools && tools.length === 0)) {\n        throw new InvalidConfigError({\n          info: `Invalid config for model : '${this.modelName}'`,\n          cause: new Error(\"'tools' are required when 'toolChoice' is specified\"),\n        });\n      } else if (tools && tools.length > 0) {\n        const configToolChoice = this.modelSchema.config.def.toolChoice as SelectStringConfigItemDefType;\n        if (!configToolChoice.choices.includes(toolChoice)) {\n          if (tools.map((tool) => tool.definition.schema.name).includes(toolChoice)) {\n            transformedConfig.tool_choice = { type: \"function\", function: { name: toolChoice } };\n          } else {\n            throw new InvalidConfigError({\n              info: `Invalid config for model : '${this.modelName}'`,\n              cause: new Error(`toolChoice : '${toolChoice}' is not part of provided 'tools' names or \n                one of [${configToolChoice.choices.join(\", \")}]`),\n            });\n          }\n        }\n      }\n    }\n\n    if (\"response_format\" in transformedConfig && transformedConfig.response_format !== undefined) {\n      const responseFormat = transformedConfig.response_format as string;\n      if (responseFormat === \"json_schema\") {\n        if (!(\"response_schema\" in transformedConfig)) {\n          throw new InvalidConfigError({\n            info: `Invalid config for model : '${this.modelName}'`,\n            cause: new Error(\"'responseSchema' is required in config when 'responseFormat' is 'json_schema'\"),\n          });\n        } else {\n          transformedConfig.response_format = {\n            type: \"json_schema\",\n            json_schema: transformedConfig.response_schema,\n          };\n          delete transformedConfig.response_schema;\n        }\n      } else {\n        transformedConfig.response_format = { type: responseFormat };\n      }\n    }\n\n    return transformedConfig;\n  }\n\n  transformMessages(messages: MessageType[]): ParamsType {\n    if (!messages || (messages && messages.length === 0)) {\n      return { messages: [] };\n    }\n\n    const parsedMessages = messages.map((message) => {\n      const parsedMessage = Message().safeParse(message);\n      if (!parsedMessage.success) {\n        throw new InvalidMessagesError({ info: \"Invalid messages\", cause: parsedMessage.error });\n      }\n      return parsedMessage.data;\n    });\n\n    parsedMessages.forEach((message) => {\n      message.content.forEach((content) => {\n        if (!this.modelSchema.modalities.includes(content.modality)) {\n          throw new InvalidMessagesError({\n            info: `Invalid message content for model : '${this.modelName}'`,\n            cause: new Error(`model : '${this.modelName}' does not support modality : '${content.modality}', \n              available modalities : [${this.modelSchema.modalities.join(\", \")}]`),\n          });\n        }\n      });\n    });\n\n    parsedMessages.forEach((message) => {\n      if (!Object.keys(this.modelSchema.roles).includes(message.role)) {\n        throw new InvalidMessagesError({\n          info: `Invalid message content for model : '${this.modelName}'`,\n          cause: new Error(`model : '${this.modelName}' does not support role : '${message.role}', \n            available roles : [${Object.keys(this.modelSchema.roles).join(\", \")}]`),\n        });\n      }\n    });\n\n    const transformedMessages = parsedMessages.map((message) => {\n      switch (message.role) {\n        case SystemRoleLiteral: {\n          const textContent: { type: \"text\"; text: string }[] = [];\n          message.content.forEach((content) => {\n            if (content.modality === TextModalityLiteral) {\n              textContent.push({ type: \"text\", text: content.value });\n            } else {\n              throw new InvalidMessagesError({\n                info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n              });\n            }\n          });\n\n          return {\n            role: this.modelSchema.roles[message.role],\n            content: textContent,\n          };\n        }\n\n        case AssistantRoleLiteral: {\n          const textContent: { type: \"text\"; text: string }[] = [];\n          const toolCalls: { id: string; type: \"function\"; function: { name: string; arguments: string } }[] = [];\n          message.content.forEach((content) => {\n            if (content.modality === TextModalityLiteral) {\n              textContent.push({ type: \"text\", text: content.value });\n            } else if (content.modality === ToolCallModalityLiteral) {\n              toolCalls.push({\n                id: content.id,\n                type: \"function\",\n                function: { name: content.name, arguments: content.arguments },\n              });\n            } else {\n              throw new InvalidMessagesError({\n                info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n              });\n            }\n          });\n\n          return {\n            role: this.modelSchema.roles[message.role],\n            content: textContent,\n            ...(toolCalls.length > 0 ? { tool_calls: toolCalls } : {}),\n          };\n        }\n\n        case UserRoleLiteral: {\n          const textContent: { type: \"text\"; text: string }[] = [];\n          const imageContent: { type: \"image_url\"; image_url: { url: string; detail: string } }[] = [];\n          message.content.forEach((content) => {\n            if (content.modality === TextModalityLiteral) {\n              textContent.push({ type: \"text\", text: content.value });\n            } else if (content.modality === ImageModalityLiteral) {\n              imageContent.push({\n                type: \"image_url\",\n                image_url: {\n                  url: content.value.type === \"url\" ? content.value.url : content.value.base64,\n                  detail: content.detail,\n                },\n              });\n            } else {\n              throw new InvalidMessagesError({\n                info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n              });\n            }\n          });\n\n          const combinedContent = [...textContent, ...imageContent];\n\n          return {\n            role: this.modelSchema.roles[message.role],\n            content: combinedContent,\n          };\n        }\n\n        case ToolRoleLiteral: {\n          if (message.content.length !== 1) {\n            throw new InvalidMessagesError({\n              info: `Invalid message for role : '${message.role}'`,\n              cause: new Error(`role : '${message.role}' must have exactly one content item`),\n            });\n          }\n\n          if (message.content[0].modality !== ToolResponseModalityLiteral) {\n            throw new InvalidMessagesError({\n              info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n              cause: new Error(`role : '${message.role}' must have content with modality : '${ToolResponseModalityLiteral}'`),\n            });\n          }\n\n          const toolResponse = message.content[0] as ToolResponseContentType;\n          return {\n            role: this.modelSchema.roles[message.role],\n            tool_call_id: toolResponse.id,\n            content: toolResponse.data,\n          };\n        }\n\n        default: {\n          throw new InvalidMessagesError({\n            info: `Invalid message 'role' for model : ${this.modelName}`,\n            cause: new Error(`role : '${message.role}' is not supported, \n              available roles : [${Object.keys(this.modelSchema.roles).join(\", \")}]`),\n          });\n        }\n      }\n    });\n\n    return { messages: transformedMessages };\n  }\n\n  transformTools(tools: ToolType[]): ParamsType {\n    if (!this.modelSchema.modalities.includes(ToolCallModalityLiteral)) {\n      throw new InvalidToolsError({\n        info: `Invalid tool 'modality' for model : ${this.modelName}`,\n        cause: new Error(`model : '${this.modelName}' does not support tool modality : '${ToolCallModalityLiteral}'`),\n      });\n    }\n\n    if (!tools || (tools && tools.length === 0)) {\n      return { tools: [] as ToolType[] };\n    }\n\n    const parsedTools = tools.map((tool) => {\n      const parsedTool = Tool().safeParse(tool);\n      if (!parsedTool.success) {\n        throw new InvalidToolsError({ info: \"Invalid tools\", cause: parsedTool.error });\n      }\n      return parsedTool.data;\n    });\n\n    const transformedTools = parsedTools.map((tool) => ({\n      type: \"function\",\n      function: tool.definition.schema,\n    }));\n\n    return { tools: transformedTools };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getCompleteChatUrl(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.completeChatUrl);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getCompleteChatHeaders(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<HeadersType> {\n    return new Promise((resolve) => {\n      resolve(this.getDefaultHeaders());\n    });\n  }\n\n  async getCompleteChatData(config: ConfigType, messages: MessageType[], tools?: ToolType[]): Promise<ParamsType> {\n    const transformedConfig = this.transformConfig(config, messages, tools);\n    const transformedMessages = this.transformMessages(messages);\n    if (transformedMessages.messages && (transformedMessages.messages as MessageType[]).length === 0) {\n      throw new InvalidMessagesError({\n        info: \"Messages are required\",\n        cause: new Error(\"Messages are required\"),\n      });\n    }\n\n    const transformedTools = tools ? this.transformTools(tools) : {};\n\n    return new Promise((resolve) => {\n      resolve({\n        ...this.getDefaultParams(),\n        ...transformedConfig,\n        ...transformedMessages,\n        ...transformedTools,\n      });\n    });\n  }\n\n  transformCompleteChatResponse(response: any): ChatResponseType {\n    const safe = OpenAICompleteChatResponse.safeParse(response);\n    if (safe.success) {\n      if (safe.data.choices.length === 0) {\n        throw new ModelResponseError({\n          info: \"Invalid response from model\",\n          cause: new Error(`No choices in response : ${JSON.stringify(safe.data)}`),\n        });\n      }\n\n      const parsedResponse: OpenAICompleteChatResponseType = safe.data;\n      const messages: MessageType[] = [\n        {\n          role: AssistantRoleLiteral,\n          content: [],\n        },\n      ];\n      const message = parsedResponse.choices[0].message;\n      if (message.content) {\n        messages[0].content.push(createTextContent(message.content));\n      }\n\n      if (message.refusal) {\n        messages[0].content.push(createTextContent(message.refusal));\n      }\n\n      if (message.tool_calls) {\n        message.tool_calls.forEach((toolCall, index) => {\n          messages[0].content.push(createToolCallContent(index, toolCall.id, toolCall.function.name, toolCall.function.arguments));\n        });\n      }\n\n      const usage: ChatUsageType = {\n        promptTokens: parsedResponse.usage.prompt_tokens,\n        completionTokens: parsedResponse.usage.completion_tokens,\n        totalTokens: parsedResponse.usage.total_tokens,\n      };\n\n      const logProbs: ChatLogProbsType = [];\n      const _logProbs = parsedResponse.choices[0].logprobs;\n      if (_logProbs) {\n        if (_logProbs.content) {\n          logProbs.push(\n            ..._logProbs.content.map((logProb) => ({\n              token: logProb.token,\n              logProb: logProb.logprob,\n              bytes: logProb.bytes,\n              topLogProbs: logProb.top_logprobs.map((topLogProb) => ({\n                token: topLogProb.token,\n                logProb: topLogProb.logprob,\n                bytes: topLogProb.bytes,\n              })),\n            }))\n          );\n        }\n        if (_logProbs.refusal) {\n          logProbs.push(\n            ..._logProbs.refusal.map((logProb) => ({\n              token: logProb.token,\n              logProb: logProb.logprob,\n              bytes: logProb.bytes,\n              topLogProbs: logProb.top_logprobs.map((topLogProb) => ({\n                token: topLogProb.token,\n                logProb: topLogProb.logprob,\n                bytes: topLogProb.bytes,\n              })),\n            }))\n          );\n        }\n      }\n\n      return {\n        messages: messages,\n        usage: usage,\n        logProbs: logProbs,\n      };\n    }\n\n    throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getStreamChatUrl(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.streamChatUrl);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getStreamChatHeaders(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<HeadersType> {\n    return new Promise((resolve) => {\n      resolve(this.getDefaultHeaders());\n    });\n  }\n\n  async getStreamChatData(config: ConfigType, messages: MessageType[], tools?: ToolType[]): Promise<ParamsType> {\n    const transformedConfig = this.transformConfig(config, messages, tools);\n    const transformedMessages = this.transformMessages(messages);\n    if (transformedMessages.messages && (transformedMessages.messages as MessageType[]).length === 0) {\n      throw new InvalidMessagesError({\n        info: \"Messages are required\",\n        cause: new Error(\"Messages are required\"),\n      });\n    }\n\n    const transformedTools = tools ? this.transformTools(tools) : {};\n\n    return new Promise((resolve) => {\n      resolve({\n        stream: true,\n        stream_options: { include_usage: true },\n        ...this.getDefaultParams(),\n        ...transformedConfig,\n        ...transformedMessages,\n        ...transformedTools,\n      });\n    });\n  }\n\n  async *transformStreamChatResponseChunk(\n    chunk: string,\n    buffer: string\n  ): AsyncGenerator<{ partialResponse: PartialChatResponseType; buffer: string }> {\n    const data = buffer + chunk;\n    let lines: string[] = [];\n    let newBuffer = \"\";\n\n    // Split data into complete lines and new buffer\n    let currentIndex = 0;\n    while (currentIndex < data.length) {\n      const newlineIndex = data.indexOf(\"\\n\", currentIndex);\n      if (newlineIndex === -1) {\n        newBuffer = data.substring(currentIndex);\n        break;\n      } else {\n        const line = data.substring(currentIndex, newlineIndex).trim();\n        if (line) {\n          lines.push(line);\n        }\n        currentIndex = newlineIndex + 1;\n      }\n    }\n\n    // Process each complete line\n    for (const line of lines) {\n      if (line === \"data: [DONE]\") {\n        return; // End of stream\n      }\n\n      if (line.startsWith(\"data: \")) {\n        const jsonStr = line.substring(\"data: \".length);\n        try {\n          const structuredLine = JSON.parse(jsonStr);\n          const safe = OpenAIStreamChatResponse.safeParse(structuredLine);\n          if (safe.success) {\n            const partialResponse: PartialChatResponseType = { partialMessages: [] };\n            const parsedResponse: OpenAIStreamChatResponseType = safe.data;\n            // Process message content\n            if (parsedResponse.choices.length > 0) {\n              const message = parsedResponse.choices[0].delta;\n              if (message !== undefined && Object.keys(message).length !== 0) {\n                if (\"content\" in message && message.content !== null) {\n                  partialResponse.partialMessages.push(createPartialTextMessage(AssistantRoleLiteral, message.content as string));\n                } else if (\"refusal\" in message && message.refusal !== null) {\n                  partialResponse.partialMessages.push(createPartialTextMessage(AssistantRoleLiteral, message.refusal as string));\n                } else if (\"tool_calls\" in message && message.tool_calls !== undefined) {\n                  const toolCall = message.tool_calls.at(0)!;\n                  partialResponse.partialMessages.push(\n                    createPartialToolCallMessage(\n                      AssistantRoleLiteral,\n                      toolCall.index,\n                      toolCall.id,\n                      toolCall.function?.name,\n                      toolCall.function?.arguments\n                    )\n                  );\n                }\n              }\n            }\n\n            if (parsedResponse.usage) {\n              partialResponse.usage = {\n                promptTokens: parsedResponse.usage.prompt_tokens,\n                completionTokens: parsedResponse.usage.completion_tokens,\n                totalTokens: parsedResponse.usage.total_tokens,\n              };\n            }\n            yield { partialResponse: partialResponse, buffer: newBuffer };\n          } else {\n            throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n          }\n        } catch (error) {\n          throw new ModelResponseError({\n            info: `Malformed JSON received in stream: ${jsonStr}`,\n            cause: error,\n          });\n        }\n      }\n    }\n\n    // Yield the updated buffer after processing all lines\n    yield { partialResponse: { partialMessages: [] }, buffer: newBuffer };\n  }\n  async *transformProxyStreamChatResponseChunk(\n    chunk: string,\n    buffer: string,\n    data?: any,\n    headers?: Record<string, string>,\n    query?: Record<string, string>\n  ): AsyncGenerator<{ partialResponse: PartialChatResponseType; buffer: string }> {\n    // Directly delegate to transformStreamChatResponseChunk\n    yield* this.transformStreamChatResponseChunk(chunk, buffer);\n  }\n  async getProxyStreamChatUrl(data?: any, headers?: Record<string, string>, query?: Record<string, string>): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.streamChatUrl);\n    });\n  }\n  async getProxyCompleteChatUrl(data?: any, headers?: Record<string, string>, query?: Record<string, string>): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.completeChatUrl);\n    });\n  }\n\n  async getProxyCompleteChatHeaders(data?: any, headers?: Record<string, string>, query?: Record<string, string>): Promise<HeadersType> {\n    if (!headers) {\n      return {};\n    }\n    const sanitizedHeaders: Record<string, string> = { ...headers };\n\n    delete sanitizedHeaders.host;\n    delete sanitizedHeaders[\"content-length\"];\n    return sanitizedHeaders;\n  }\n  async getProxyStreamChatHeaders(data?: any, headers?: Record<string, string>, query?: Record<string, string>): Promise<HeadersType> {\n    // Directly delegate to getProxyCompleteChatHeaders for now\n    return await this.getProxyCompleteChatHeaders(data, headers, query);\n  }\n\n  getModelPricing(): ChatModelPriceType {\n    // Check if the modelName exists in pricingData before accessing it\n    if (!(this.modelName in pricingData)) {\n      throw new ModelResponseError({\n        info: `Invalid model pricing for model : '${this.modelName}'`,\n        cause: new Error(`No pricing configuration found for model \"${this.modelName}\"`),\n      });\n    }\n\n    const entry = pricingData[this.modelName as keyof typeof pricingData];\n    return entry as ChatModelPriceType;\n  }\n}\n\nexport { BaseChatModel, BaseChatModelOptions, type BaseChatModelOptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.openai\";\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"./types\";\n\nconst GPT_3_5_Turbo_0125Literal = \"gpt-3.5-turbo-0125\";\nconst GPT_3_5_Turbo_0125Description =\n  \"The latest GPT-3.5 Turbo model with higher accuracy at responding in requested formats and a fix for a bug which caused a \\\n  text encoding issue for non-English language function calls. Training data up to Sept 2021.\";\n\nconst GPT_3_5_Turbo_0125Schema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: GPT_3_5_Turbo_0125Literal,\n  description: GPT_3_5_Turbo_0125Description,\n  maxInputTokens: 4092,\n  maxOutputTokens: 4092,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: OpenAIChatModelConfigs.responseFormat(4092, 4).def,\n    schema: OpenAIChatModelConfigs.responseFormat(4092, 4).schema,\n  },\n  price: pricingData[GPT_3_5_Turbo_0125Literal],\n});\n\nconst GPT_3_5_Turbo_0125Options = BaseChatModelOptions;\ntype GPT_3_5_Turbo_0125OptionsType = z.infer<typeof GPT_3_5_Turbo_0125Options>;\n\nclass GPT_3_5_Turbo_0125 extends BaseChatModel {\n  constructor(options: GPT_3_5_Turbo_0125OptionsType) {\n    super(GPT_3_5_Turbo_0125Schema, options);\n  }\n}\n\nexport {\n  GPT_3_5_Turbo_0125,\n  GPT_3_5_Turbo_0125Literal,\n  GPT_3_5_Turbo_0125Options,\n  GPT_3_5_Turbo_0125Schema,\n  type GPT_3_5_Turbo_0125OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.openai\";\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"./types\";\n\nconst GPT_3_5_Turbo_1106Literal = \"gpt-3.5-turbo-1106\";\nconst GPT_3_5_Turbo_1106Description =\n  \"The latest GPT-3.5 Turbo model with improved instruction following, JSON mode, reproducible outputs, parallel function calling, and more.\\\n   Returns a maximum of 4,096 output tokens. Training data up to Sept 2021.\";\n\nconst GPT_3_5_Turbo_1106Schema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: GPT_3_5_Turbo_1106Literal,\n  description: GPT_3_5_Turbo_1106Description,\n  maxInputTokens: 4092,\n  maxOutputTokens: 16385,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: OpenAIChatModelConfigs.responseFormat(16385, 4).def,\n    schema: OpenAIChatModelConfigs.responseFormat(16385, 4).schema,\n  },\n  price: pricingData[GPT_3_5_Turbo_1106Literal], // Added price definition\n});\n\nconst GPT_3_5_Turbo_1106Options = BaseChatModelOptions;\ntype GPT_3_5_Turbo_1106OptionsType = z.infer<typeof GPT_3_5_Turbo_1106Options>;\n\nclass GPT_3_5_Turbo_1106 extends BaseChatModel {\n  constructor(options: GPT_3_5_Turbo_1106OptionsType) {\n    super(GPT_3_5_Turbo_1106Schema, options);\n  }\n}\n\nexport {\n  GPT_3_5_Turbo_1106,\n  GPT_3_5_Turbo_1106Literal,\n  GPT_3_5_Turbo_1106Options,\n  GPT_3_5_Turbo_1106Schema,\n  type GPT_3_5_Turbo_1106OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.openai\";\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"./types\";\n\nconst GPT_3_5_TurboLiteral = \"gpt-3.5-turbo\";\nconst GPT_3_5_TurboDescription = \"Currently points to gpt-3.5-turbo-0125. Training data up to Sept 2021.\";\n\nconst GPT_3_5_TurboSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: GPT_3_5_TurboLiteral,\n  description: GPT_3_5_TurboDescription,\n  maxInputTokens: 4092,\n  maxOutputTokens: 4092,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: OpenAIChatModelConfigs.responseFormat(4092, 4).def,\n    schema: OpenAIChatModelConfigs.responseFormat(4092, 4).schema,\n  },\n  price: pricingData[GPT_3_5_TurboLiteral],\n});\n\nconst GPT_3_5_TurboOptions = BaseChatModelOptions;\ntype GPT_3_5_TurboOptionsType = z.infer<typeof GPT_3_5_TurboOptions>;\n\nclass GPT_3_5_Turbo extends BaseChatModel {\n  constructor(options: GPT_3_5_TurboOptionsType) {\n    super(GPT_3_5_TurboSchema, options);\n  }\n}\n\nexport { GPT_3_5_Turbo, GPT_3_5_TurboLiteral, GPT_3_5_TurboOptions, GPT_3_5_TurboSchema, type GPT_3_5_TurboOptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\"; // Added import\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.openai\";\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"./types\";\n\nconst GPT_4_0125_PreviewLiteral = \"gpt-4-0125-preview\";\nconst GPT_4_0125_PreviewDescription =\n  \"The latest GPT-4 model intended to reduce cases of “laziness” where the model doesn’t complete a task. Training data up to Apr 2023.\";\n\nconst GPT_4_0125_PreviewSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: GPT_4_0125_PreviewLiteral,\n  description: GPT_4_0125_PreviewDescription,\n  maxInputTokens: 128000,\n  maxOutputTokens: 4092,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: OpenAIChatModelConfigs.base(4092, 4).def,\n    schema: OpenAIChatModelConfigs.base(4092, 4).schema,\n  },\n  price: pricingData[GPT_4_0125_PreviewLiteral], // Added price definition\n});\n\nconst GPT_4_0125_PreviewOptions = BaseChatModelOptions;\ntype GPT_4_0125_PreviewOptionsType = z.infer<typeof GPT_4_0125_PreviewOptions>;\n\nclass GPT_4_0125_Preview extends BaseChatModel {\n  constructor(options: GPT_4_0125_PreviewOptionsType) {\n    super(GPT_4_0125_PreviewSchema, options);\n  }\n}\n\nexport {\n  GPT_4_0125_Preview,\n  GPT_4_0125_PreviewLiteral,\n  GPT_4_0125_PreviewOptions,\n  GPT_4_0125_PreviewSchema,\n  type GPT_4_0125_PreviewOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.openai\";\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"./types\";\n\nconst GPT_4_0613Literal = \"gpt-4-0613\";\nconst GPT_4_0613Description =\n  \"Snapshot of gpt-4 from June 13th 2023 with improved function calling support. Training data up to Sept 2021.\";\n\nconst GPT_4_0613Schema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: GPT_4_0613Literal,\n  description: GPT_4_0613Description,\n  maxInputTokens: 8192,\n  maxOutputTokens: 4092,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: OpenAIChatModelConfigs.base(4092, 4).def,\n    schema: OpenAIChatModelConfigs.base(4092, 4).schema,\n  },\n  price: pricingData[GPT_4_0613Literal], // Added price definition\n});\n\nconst GPT_4_0613Options = BaseChatModelOptions;\ntype GPT_4_0613OptionsType = z.infer<typeof GPT_4_0613Options>;\n\nclass GPT_4_0613 extends BaseChatModel {\n  constructor(options: GPT_4_0613OptionsType) {\n    super(GPT_4_0613Schema, options);\n  }\n}\n\nexport { GPT_4_0613, GPT_4_0613Literal, GPT_4_0613Options, GPT_4_0613Schema, type GPT_4_0613OptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\"; // Added import\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.openai\";\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"./types\";\n\nconst GPT_4_1106_PreviewLiteral = \"gpt-4-1106-preview\";\nconst GPT_4_1106_PreviewDescription =\n  \"GPT-4 Turbo model featuring improved instruction following, JSON mode, reproducible outputs, parallel function calling, and more. \\\n  Returns a maximum of 4,096 output tokens. This preview model is not yet suited for production traffic. Training data up to Apr 2023.\";\n\nconst GPT_4_1106_PreviewSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: GPT_4_1106_PreviewLiteral,\n  description: GPT_4_1106_PreviewDescription,\n  maxInputTokens: 128000,\n  maxOutputTokens: 4092,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: OpenAIChatModelConfigs.base(4092, 4).def,\n    schema: OpenAIChatModelConfigs.base(4092, 4).schema,\n  },\n  price: pricingData[GPT_4_1106_PreviewLiteral], // Added price definition\n});\n\nconst GPT_4_1106_PreviewOptions = BaseChatModelOptions;\ntype GPT_4_1106_PreviewOptionsType = z.infer<typeof GPT_4_1106_PreviewOptions>;\n\nclass GPT_4_1106_Preview extends BaseChatModel {\n  constructor(options: GPT_4_1106_PreviewOptionsType) {\n    super(GPT_4_1106_PreviewSchema, options);\n  }\n}\n\nexport {\n  GPT_4_1106_Preview,\n  GPT_4_1106_PreviewLiteral,\n  GPT_4_1106_PreviewOptions,\n  GPT_4_1106_PreviewSchema,\n  type GPT_4_1106_PreviewOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.openai\";\nimport { OpenAIChatModelModalities, OpenAIChatModelModalitiesEnum, OpenAIChatModelRoles, OpenAIChatModelRolesMap } from \"./types\";\n\nconst GPT_4_Turbo_2024_04_09Literal = \"gpt-4-turbo-2024-04-09\";\nconst GPT_4_Turbo_2024_04_09Description =\n  \"GPT-4 Turbo with Vision model. Vision requests can now use JSON mode and function calling. gpt-4-turbo currently points to this version. \\\n  Training data up to Dec 2023.\";\n\nconst GPT_4_Turbo_2024_04_09Schema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelModalitiesEnum).parse({\n  name: GPT_4_Turbo_2024_04_09Literal,\n  description: GPT_4_Turbo_2024_04_09Description,\n  maxInputTokens: 128000,\n  maxOutputTokens: 4096,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelModalities,\n  config: {\n    def: OpenAIChatModelConfigs.responseFormat(4096, 4).def,\n    schema: OpenAIChatModelConfigs.responseFormat(4096, 4).schema,\n  },\n  price: pricingData[GPT_4_Turbo_2024_04_09Literal],\n});\n\nconst GPT_4_Turbo_2024_04_09Options = BaseChatModelOptions;\ntype GPT_4_Turbo_2024_04_09OptionsType = z.infer<typeof GPT_4_Turbo_2024_04_09Options>;\n\nclass GPT_4_Turbo_2024_04_09 extends BaseChatModel {\n  constructor(options: GPT_4_Turbo_2024_04_09OptionsType) {\n    super(GPT_4_Turbo_2024_04_09Schema, options);\n  }\n}\n\nexport {\n  GPT_4_Turbo_2024_04_09,\n  GPT_4_Turbo_2024_04_09Literal,\n  GPT_4_Turbo_2024_04_09Options,\n  GPT_4_Turbo_2024_04_09Schema,\n  type GPT_4_Turbo_2024_04_09OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.openai\";\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"./types\";\n\nconst GPT_4_Turbo_PreviewLiteral = \"gpt-4-turbo-preview\";\nconst GPT_4_Turbo_PreviewDescription = \"Currently points to gpt-4-0125-preview. Training data up to Apr 2023.\";\n\nconst GPT_4_Turbo_PreviewSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: GPT_4_Turbo_PreviewLiteral,\n  description: GPT_4_Turbo_PreviewDescription,\n  maxInputTokens: 128000,\n  maxOutputTokens: 4092,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: OpenAIChatModelConfigs.responseFormat(4092, 4).def,\n    schema: OpenAIChatModelConfigs.responseFormat(4092, 4).schema,\n  },\n  price: pricingData[GPT_4_Turbo_PreviewLiteral],\n});\n\nconst GPT_4_Turbo_PreviewOptions = BaseChatModelOptions;\ntype GPT_4_Turbo_PreviewOptionsType = z.infer<typeof GPT_4_Turbo_PreviewOptions>;\n\nclass GPT_4_Turbo_Preview extends BaseChatModel {\n  constructor(options: GPT_4_Turbo_PreviewOptionsType) {\n    super(GPT_4_Turbo_PreviewSchema, options);\n  }\n}\n\nexport {\n  GPT_4_Turbo_Preview,\n  GPT_4_Turbo_PreviewLiteral,\n  GPT_4_Turbo_PreviewOptions,\n  GPT_4_Turbo_PreviewSchema,\n  type GPT_4_Turbo_PreviewOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.openai\";\nimport { OpenAIChatModelModalities, OpenAIChatModelModalitiesEnum, OpenAIChatModelRoles, OpenAIChatModelRolesMap } from \"./types\";\n\nconst GPT_4_TurboLiteral = \"gpt-4-turbo\";\nconst GPT_4_TurboDescription =\n  \"The latest GPT-4 Turbo model with vision capabilities. Vision requests can now use JSON mode and function calling. \\\n  Currently points to gpt-4-turbo-2024-04-09. Training data up to Dec 2023.\";\n\nconst GPT_4_TurboSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelModalitiesEnum).parse({\n  name: GPT_4_TurboLiteral,\n  description: GPT_4_TurboDescription,\n  maxInputTokens: 128000,\n  maxOutputTokens: 4092,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelModalities,\n  config: {\n    def: OpenAIChatModelConfigs.responseFormat(4092, 4).def,\n    schema: OpenAIChatModelConfigs.responseFormat(4092, 4).schema,\n  },\n  price: pricingData[GPT_4_TurboLiteral],\n});\n\nconst GPT_4_TurboOptions = BaseChatModelOptions;\ntype GPT_4_TurboOptionsType = z.infer<typeof GPT_4_TurboOptions>;\n\nclass GPT_4_Turbo extends BaseChatModel {\n  constructor(options: GPT_4_TurboOptionsType) {\n    super(GPT_4_TurboSchema, options);\n  }\n}\n\nexport { GPT_4_Turbo, GPT_4_TurboLiteral, GPT_4_TurboOptions, GPT_4_TurboSchema, type GPT_4_TurboOptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\"; // Added import\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.openai\";\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"./types\";\n\nconst GPT_4Literal = \"gpt-4\";\nconst GPT_4Description = \"Currently points to gpt-4-0613. Training data up to Sept 2021.\";\n\nconst GPT_4Schema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: GPT_4Literal,\n  description: GPT_4Description,\n  maxInputTokens: 8192,\n  maxOutputTokens: 4092,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: OpenAIChatModelConfigs.base(4092, 4).def,\n    schema: OpenAIChatModelConfigs.base(4092, 4).schema,\n  },\n  price: pricingData[GPT_4Literal],\n});\n\nconst GPT_4Options = BaseChatModelOptions;\ntype GPT_4OptionsType = z.infer<typeof GPT_4Options>;\n\nclass GPT_4 extends BaseChatModel {\n  constructor(options: GPT_4OptionsType) {\n    super(GPT_4Schema, options);\n  }\n}\n\nexport { GPT_4, GPT_4Literal, GPT_4Options, GPT_4Schema, type GPT_4OptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.openai\";\nimport { OpenAIChatModelModalities, OpenAIChatModelModalitiesEnum, OpenAIChatModelRoles, OpenAIChatModelRolesMap } from \"./types\";\n\nconst GPT_4o_2024_05_13Literal = \"gpt-4o-2024-05-13\";\nconst GPT_4o_2024_05_13Description = \"Latest snapshot of gpt-4o that supports Structured Outputs. Training data up to Oct 2023.\";\n\nconst GPT_4o_2024_05_13Schema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelModalitiesEnum).parse({\n  name: GPT_4o_2024_05_13Literal,\n  description: GPT_4o_2024_05_13Description,\n  maxInputTokens: 128000,\n  maxOutputTokens: 4092,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelModalities,\n  config: {\n    def: OpenAIChatModelConfigs.responseSchema(4092, 4).def,\n    schema: OpenAIChatModelConfigs.responseSchema(4092, 4).schema,\n  },\n  price: pricingData[GPT_4o_2024_05_13Literal],\n});\n\nconst GPT_4o_2024_05_13Options = BaseChatModelOptions;\ntype GPT_4o_2024_05_13OptionsType = z.infer<typeof GPT_4o_2024_05_13Options>;\n\nclass GPT_4o_2024_05_13 extends BaseChatModel {\n  constructor(options: GPT_4o_2024_05_13OptionsType) {\n    super(GPT_4o_2024_05_13Schema, options);\n  }\n}\n\nexport {\n  GPT_4o_2024_05_13,\n  GPT_4o_2024_05_13Literal,\n  GPT_4o_2024_05_13Options,\n  GPT_4o_2024_05_13Schema,\n  type GPT_4o_2024_05_13OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.openai\";\nimport { OpenAIChatModelModalities, OpenAIChatModelModalitiesEnum, OpenAIChatModelRoles, OpenAIChatModelRolesMap } from \"./types\";\n\nconst GPT_4o_2024_08_06Literal = \"gpt-4o-2024-08-06\";\nconst GPT_4o_2024_08_06Description = \"Latest snapshot of gpt-4o that supports Structured Outputs. Training data up to Oct 2023.\";\n\nconst GPT_4o_2024_08_06Schema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelModalitiesEnum).parse({\n  name: GPT_4o_2024_08_06Literal,\n  description: GPT_4o_2024_08_06Description,\n  maxInputTokens: 128000,\n  maxOutputTokens: 4092,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelModalities,\n  config: {\n    def: OpenAIChatModelConfigs.responseSchema(4092, 4).def,\n    schema: OpenAIChatModelConfigs.responseSchema(4092, 4).schema,\n  },\n  price: pricingData[GPT_4o_2024_08_06Literal],\n});\n\nconst GPT_4o_2024_08_06Options = BaseChatModelOptions;\ntype GPT_4o_2024_08_06OptionsType = z.infer<typeof GPT_4o_2024_08_06Options>;\n\nclass GPT_4o_2024_08_06 extends BaseChatModel {\n  constructor(options: GPT_4o_2024_08_06OptionsType) {\n    super(GPT_4o_2024_08_06Schema, options);\n  }\n}\n\nexport {\n  GPT_4o_2024_08_06,\n  GPT_4o_2024_08_06Literal,\n  GPT_4o_2024_08_06Options,\n  GPT_4o_2024_08_06Schema,\n  type GPT_4o_2024_08_06OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.openai\";\nimport { OpenAIChatModelModalities, OpenAIChatModelModalitiesEnum, OpenAIChatModelRoles, OpenAIChatModelRolesMap } from \"./types\";\n\nconst GPT_4o_Mini_2024_07_18Literal = \"gpt-4o-mini-2024-07-18\";\nconst GPT_4o_MiniDescription =\n  \"Most advanced, multimodal flagship model that is cheaper and faster than GPT-4 Turbo. Currently points to gpt-4o-2024-05-13. \\\n  Training data up to Oct 2023.\";\n\nconst GPT_4o_Mini_2024_07_18Schema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelModalitiesEnum).parse({\n  name: GPT_4o_Mini_2024_07_18Literal,\n  description: GPT_4o_MiniDescription,\n  maxInputTokens: 128000,\n  maxOutputTokens: 4092,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelModalities,\n  config: {\n    def: OpenAIChatModelConfigs.responseSchema(4092, 4).def,\n    schema: OpenAIChatModelConfigs.responseSchema(4092, 4).schema,\n  },\n  price: pricingData[GPT_4o_Mini_2024_07_18Literal],\n});\n\nconst GPT_4o_Mini_2024_07_18Options = BaseChatModelOptions;\ntype GPT_4o_Mini_2024_07_18OptionsType = z.infer<typeof GPT_4o_Mini_2024_07_18Options>;\n\nclass GPT_4o_Mini_2024_07_18 extends BaseChatModel {\n  constructor(options: GPT_4o_Mini_2024_07_18OptionsType) {\n    super(GPT_4o_Mini_2024_07_18Schema, options);\n  }\n}\n\nexport {\n  GPT_4o_Mini_2024_07_18,\n  GPT_4o_Mini_2024_07_18Literal,\n  GPT_4o_Mini_2024_07_18Options,\n  GPT_4o_Mini_2024_07_18Schema,\n  type GPT_4o_Mini_2024_07_18OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.openai\";\nimport { OpenAIChatModelModalities, OpenAIChatModelModalitiesEnum, OpenAIChatModelRoles, OpenAIChatModelRolesMap } from \"./types\";\n\nconst GPT_4o_MiniLiteral = \"gpt-4o-mini\";\nconst GPT_4o_MiniDescription =\n  \"Most advanced, multimodal flagship model that is cheaper and faster than GPT-4 Turbo. Currently points to gpt-4o-2024-05-13. \\\n  Training data up to Oct 2023.\";\n\nconst GPT_4o_MiniSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelModalitiesEnum).parse({\n  name: GPT_4o_MiniLiteral,\n  description: GPT_4o_MiniDescription,\n  maxInputTokens: 128000,\n  maxOutputTokens: 4092,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelModalities,\n  config: {\n    def: OpenAIChatModelConfigs.responseSchema(4092, 4).def,\n    schema: OpenAIChatModelConfigs.responseSchema(4092, 4).schema,\n  },\n  price: pricingData[GPT_4o_MiniLiteral],\n});\n\nconst GPT_4o_MiniOptions = BaseChatModelOptions;\ntype GPT_4o_MiniOptionsType = z.infer<typeof GPT_4o_MiniOptions>;\n\nclass GPT_4o_Mini extends BaseChatModel {\n  constructor(options: GPT_4o_MiniOptionsType) {\n    super(GPT_4o_MiniSchema, options);\n  }\n}\n\nexport { GPT_4o_Mini, GPT_4o_MiniLiteral, GPT_4o_MiniOptions, GPT_4o_MiniSchema, type GPT_4o_MiniOptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.openai\";\nimport { OpenAIChatModelModalities, OpenAIChatModelModalitiesEnum, OpenAIChatModelRoles, OpenAIChatModelRolesMap } from \"./types\";\n\nconst GPT_4oLiteral = \"gpt-4o\";\nconst GPT_4oDescription =\n  \"Most advanced, multimodal flagship model that is cheaper and faster than GPT-4 Turbo. Currently points to gpt-4o-2024-05-13. \\\n  Training data up to Oct 2023.\";\n\nconst GPT_4oSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelModalitiesEnum).parse({\n  name: GPT_4oLiteral,\n  description: GPT_4oDescription,\n  maxInputTokens: 128000,\n  maxOutputTokens: 4092,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelModalities,\n  config: {\n    def: OpenAIChatModelConfigs.responseSchema(4092, 4).def,\n    schema: OpenAIChatModelConfigs.responseSchema(4092, 4).schema,\n  },\n  price: pricingData[GPT_4oLiteral],\n});\n\nconst GPT_4oOptions = BaseChatModelOptions;\ntype GPT_4oOptionsType = z.infer<typeof GPT_4oOptions>;\n\nclass GPT_4o extends BaseChatModel {\n  constructor(options: GPT_4oOptionsType) {\n    super(GPT_4oSchema, options);\n  }\n}\n\nexport { GPT_4o, GPT_4oLiteral, GPT_4oOptions, GPT_4oSchema, type GPT_4oOptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.openai\";\nimport { OpenAIChatModelModalities, OpenAIChatModelModalitiesEnum, OpenAIChatModelRoles, OpenAIChatModelRolesMap } from \"./types\";\n\nconst O1_2024_12_17Literal = \"o1-2024-12-17\";\nconst O1_2024_12_17Description =\n  \"A stable release model for production use, offering robust performance and advanced features. Training data up to December 2024.\";\n\nconst O1_2024_12_17Schema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelModalitiesEnum).parse({\n  name: O1_2024_12_17Literal,\n  description: O1_2024_12_17Description,\n  maxInputTokens: 200000,\n  maxOutputTokens: 100000,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelModalities,\n  config: {\n    def: OpenAIChatModelConfigs.oSeries(100000, 4).def,\n    schema: OpenAIChatModelConfigs.oSeries(100000, 4).schema,\n  },\n  price: pricingData[O1_2024_12_17Literal],\n});\n\nconst O1_2024_12_17Options = BaseChatModelOptions;\ntype O1_2024_12_17OptionsType = z.infer<typeof O1_2024_12_17Options>;\n\nclass O1_2024_12_17 extends BaseChatModel {\n  constructor(options: O1_2024_12_17OptionsType) {\n    super(O1_2024_12_17Schema, options);\n  }\n}\n\nexport { O1_2024_12_17, O1_2024_12_17Literal, O1_2024_12_17Options, O1_2024_12_17Schema, type O1_2024_12_17OptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions, BaseChatModel } from \"./base-chat-model.openai\";\nimport { OpenAIChatModelModalities, OpenAIChatModelModalitiesEnum, OpenAIChatModelRoles, OpenAIChatModelRolesMap } from \"./types\";\n\nconst O1Literal = \"o1\";\nconst O1Description =\n  \"Highly capable general-purpose reasoning model with advanced capabilities in language, coding, and reasoning. Training data up to Oct 2023.\";\n\nconst O1Schema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelModalitiesEnum).parse({\n  name: O1Literal,\n  description: O1Description,\n  maxInputTokens: 200000,\n  maxOutputTokens: 100000,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelModalities,\n  config: {\n    def: OpenAIChatModelConfigs.oSeries(100000, 4).def,\n    schema: OpenAIChatModelConfigs.oSeries(100000, 4).schema,\n  },\n  price: pricingData[O1Literal],\n});\n\nconst O1Options = BaseChatModelOptions;\ntype O1OptionsType = z.infer<typeof O1Options>;\n\nclass O1 extends BaseChatModel {\n  constructor(options: O1OptionsType) {\n    super(O1Schema, options);\n  }\n}\n\nexport { O1, O1Literal, O1Options, O1Schema, type O1OptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelOptions, BaseChatModel } from \"./base-chat-model.openai\";\nimport { OpenAIChatModelModalities, OpenAIChatModelModalitiesEnum, OpenAIChatModelRoles, OpenAIChatModelRolesMap } from \"./types\";\n\nconst O3_2025_04_16Literal = \"o3-2025-04-16\";\nconst O3_2025_04_16Description =\n  \"A new standard for math, science, coding, and visual reasoning tasks. Training data up to Jun 2024.\";\n\nconst O3_2025_04_16Schema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelModalitiesEnum).parse({\n  name: O3_2025_04_16Literal,\n  description: O3_2025_04_16Description,\n  maxInputTokens: 200000,\n  maxOutputTokens: 100000,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelModalities,\n  config: {\n    def: OpenAIChatModelConfigs.oSeries(100000, 4).def,\n    schema: OpenAIChatModelConfigs.oSeries(100000, 4).schema,\n  },\n});\n\nconst O3_2025_04_16Options = BaseChatModelOptions;\ntype O3_2025_04_16OptionsType = z.infer<typeof O3_2025_04_16Options>;\n\nclass O3_2025_04_16 extends BaseChatModel {\n  constructor(options: O3_2025_04_16OptionsType) {\n    super(O3_2025_04_16Schema, options);\n  }\n}\n\nexport { O3_2025_04_16, O3_2025_04_16Literal, O3_2025_04_16Options, O3_2025_04_16Schema, type O3_2025_04_16OptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelOptions, BaseChatModel } from \"./base-chat-model.openai\";\nimport { OpenAIChatModelModalities, OpenAIChatModelModalitiesEnum, OpenAIChatModelRoles, OpenAIChatModelRolesMap } from \"./types\";\n\nconst O3Literal = \"o3\";\nconst O3Description =\n  \"A new standard for math, science, coding, and visual reasoning tasks. Training data up to Jun 2024.\";\n\nconst O3Schema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelModalitiesEnum).parse({\n  name: O3Literal,\n  description: O3Description,\n  maxInputTokens: 200000,\n  maxOutputTokens: 100000,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelModalities,\n  config: {\n    def: OpenAIChatModelConfigs.oSeries(100000, 4).def,\n    schema: OpenAIChatModelConfigs.oSeries(100000, 4).schema,\n  },\n});\n\nconst O3Options = BaseChatModelOptions;\ntype O3OptionsType = z.infer<typeof O3Options>;\n\nclass O3 extends BaseChatModel {\n  constructor(options: O3OptionsType) {\n    super(O3Schema, options);\n  }\n}\n\nexport { O3, O3Literal, O3Options, O3Schema, type O3OptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelOptions, BaseChatModel } from \"./base-chat-model.openai\";\nimport { OpenAIChatModelTextToolModalities, OpenAIChatModelTextToolModalitiesEnum, OpenAIChatModelRoles, OpenAIChatModelRolesMap } from \"./types\";\n\nconst O3MiniLiteral = \"o3-mini\";\nconst O3MiniDescription =\n  \"o3-mini is the newest small reasoning model, providing high intelligence at the same cost and latency targets of o1-mini. Training data up to Sep 2023.\";\n\nconst O3MiniSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: O3MiniLiteral,\n  description: O3MiniDescription,\n  maxInputTokens: 200000,\n  maxOutputTokens: 100000,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: OpenAIChatModelConfigs.oSeries(100000, 4).def,\n    schema: OpenAIChatModelConfigs.oSeries(100000, 4).schema,\n  },\n});\n\nconst O3MiniOptions = BaseChatModelOptions;\ntype O3MiniOptionsType = z.infer<typeof O3MiniOptions>;\n\nclass O3Mini extends BaseChatModel {\n  constructor(options: O3MiniOptionsType) {\n    super(O3MiniSchema, options);\n  }\n}\n\nexport { O3Mini, O3MiniLiteral, O3MiniOptions, O3MiniSchema, type O3MiniOptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelOptions, BaseChatModel } from \"./base-chat-model.openai\";\nimport { OpenAIChatModelTextToolModalities, OpenAIChatModelTextToolModalitiesEnum, OpenAIChatModelRoles, OpenAIChatModelRolesMap } from \"./types\";\n\nconst O3Mini2025_01_31Literal = \"o3-mini-2025-01-31\";\nconst O3Mini2025_01_31Description =\n  \"o3-mini is the newest small reasoning model, providing high intelligence at the same cost and latency targets of o1-mini. Training data up to Sep 2023.\";\n\nconst O3Mini2025_01_31Schema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: O3Mini2025_01_31Literal,\n  description: O3Mini2025_01_31Description,\n  maxInputTokens: 200000,\n  maxOutputTokens: 100000,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: OpenAIChatModelConfigs.oSeries(100000, 4).def,\n    schema: OpenAIChatModelConfigs.oSeries(100000, 4).schema,\n  },\n});\n\nconst O3Mini2025_01_31Options = BaseChatModelOptions;\ntype O3Mini2025_01_31OptionsType = z.infer<typeof O3Mini2025_01_31Options>;\n\nclass O3Mini2025_01_31 extends BaseChatModel {\n  constructor(options: O3Mini2025_01_31OptionsType) {\n    super(O3Mini2025_01_31Schema, options);\n  }\n}\n\nexport { O3Mini2025_01_31, O3Mini2025_01_31Literal, O3Mini2025_01_31Options, O3Mini2025_01_31Schema, type O3Mini2025_01_31OptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelOptions, BaseChatModel } from \"./base-chat-model.openai\";\nimport {\n  OpenAIChatModelModalities,\n  OpenAIChatModelModalitiesEnum,\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n} from \"./types\";\n\nconst O4_Mini_2025_04_16Literal = \"o4-mini-2025-04-16\";\nconst O4_Mini_2025_04_16Description =\n  \"Optimized for fast, effective reasoning with exceptionally efficient performance in coding and visual tasks. Training data up to Jun 2024.\";\n\nconst O4_Mini_2025_04_16Schema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelModalitiesEnum).parse({\n  name: O4_Mini_2025_04_16Literal,\n  description: O4_Mini_2025_04_16Description,\n  maxInputTokens: 200000,\n  maxOutputTokens: 100000,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelModalities,\n  config: {\n    def: OpenAIChatModelConfigs.oSeries(100000, 4).def,\n    schema: OpenAIChatModelConfigs.oSeries(100000, 4).schema,\n  },\n});\n\nconst O4_Mini_2025_04_16Options = BaseChatModelOptions;\ntype O4_Mini_2025_04_16OptionsType = z.infer<typeof O4_Mini_2025_04_16Options>;\n\nclass O4_Mini_2025_04_16 extends BaseChatModel {\n  constructor(options: O4_Mini_2025_04_16OptionsType) {\n    super(O4_Mini_2025_04_16Schema, options);\n  }\n}\n\nexport { O4_Mini_2025_04_16, O4_Mini_2025_04_16Literal, O4_Mini_2025_04_16Options, O4_Mini_2025_04_16Schema, type O4_Mini_2025_04_16OptionsType };\n\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelOptions, BaseChatModel } from \"./base-chat-model.openai\";\nimport {\n  OpenAIChatModelModalities,\n  OpenAIChatModelModalitiesEnum,\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n} from \"./types\";\n\nconst O4_MiniLiteral = \"o4-mini\";\nconst O4_MiniDescription =\n  \"Optimized for fast, effective reasoning with exceptionally efficient performance in coding and visual tasks. Training data up to Jun 2024.\";\n\nconst O4_MiniSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelModalitiesEnum).parse({\n  name: O4_MiniLiteral,\n  description: O4_MiniDescription,\n  maxInputTokens: 200000,\n  maxOutputTokens: 100000,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelModalities,\n  config: {\n    def: OpenAIChatModelConfigs.oSeries(100000, 4).def,\n    schema: OpenAIChatModelConfigs.oSeries(100000, 4).schema,\n  },\n});\n\nconst O4_MiniOptions = BaseChatModelOptions;\ntype O4_MiniOptionsType = z.infer<typeof O4_MiniOptions>;\n\nclass O4_Mini extends BaseChatModel {\n  constructor(options: O4_MiniOptionsType) {\n    super(O4_MiniSchema, options);\n  }\n}\n\nexport { O4_Mini, O4_MiniLiteral, O4_MiniOptions, O4_MiniSchema, type O4_MiniOptionsType };\n\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchemaType } from \"@adaline/provider\";\nimport { EmbeddingTextModalityLiteral, EmbeddingTokenModalityLiteral } from \"@adaline/types\";\n\nconst OpenAIEmbeddingModelModalities: EmbeddingModelSchemaType[\"modalities\"] = [\n  EmbeddingTextModalityLiteral,\n  EmbeddingTokenModalityLiteral,\n];\n\nconst OpenAIEmbeddingModelModalitiesEnum = z.enum([EmbeddingTextModalityLiteral, EmbeddingTokenModalityLiteral]);\n\nexport { OpenAIEmbeddingModelModalitiesEnum, OpenAIEmbeddingModelModalities };\n","import { z } from \"zod\";\n\nconst OpenAIGetEmbeddingsResponse = z.object({\n  object: z.literal(\"list\"),\n  model: z.string(),\n  data: z.array(\n    z.object({\n      index: z.number(),\n      object: z.literal(\"embedding\"),\n      embedding: z.array(z.number()).or(z.string().base64()),\n    })\n  ),\n  usage: z.object({\n    prompt_tokens: z.number().nonnegative(),\n    total_tokens: z.number().nonnegative(),\n  }),\n});\n\nexport { OpenAIGetEmbeddingsResponse };\n","import { z } from \"zod\";\n\nconst OpenAIEmbeddingRequestInput = z\n  .string()\n  .min(1)\n  .or(z.array(z.string().min(1)).min(1))\n  .or(z.array(z.number().int().nonnegative()).min(1))\n  .or(z.array(z.array(z.number().int().nonnegative()).min(1)).min(1));\ntype OpenAIEmbeddingRequestInputType = z.infer<typeof OpenAIEmbeddingRequestInput>;\n\nconst OpenAIEmbeddingRequest = z.object({\n  model: z.string().min(1).optional(),\n  input: OpenAIEmbeddingRequestInput,\n  encoding_format: z.enum([\"float\", \"base64\"]).optional(),\n  dimensions: z.number().int().min(1).optional(),\n});\ntype OpenAIEmbeddingRequestType = z.infer<typeof OpenAIEmbeddingRequest>;\n\nexport { OpenAIEmbeddingRequest, OpenAIEmbeddingRequestInput, type OpenAIEmbeddingRequestType, type OpenAIEmbeddingRequestInputType };\n","import { z } from \"zod\";\n\nimport {\n  EmbeddingModelSchemaType,\n  EmbeddingModelV1,\n  HeadersType,\n  InvalidConfigError,\n  InvalidEmbeddingRequestsError,\n  InvalidModelRequestError,\n  ModelResponseError,\n  ParamsType,\n  removeUndefinedEntries,\n  UrlType,\n  urlWithoutTrailingSlash,\n} from \"@adaline/provider\";\n\nimport {\n  Base64EmbeddingLiteral,\n  Base64EmbeddingType,\n  Config,\n  ConfigType,\n  EmbeddingRequests,\n  EmbeddingRequestsType,\n  EmbeddingResponseType,\n  EmbeddingTextModalityLiteral,\n  EmbeddingTokenModalityLiteral,\n  FloatEmbeddingLiteral,\n  FloatEmbeddingType,\n} from \"@adaline/types\";\n\nimport { OpenAIEmbeddingRequest, OpenAIGetEmbeddingsResponse } from \"./types\";\n\nimport { OpenAI } from \"./../../provider/provider.openai\";\n\nconst BaseEmbeddingModelOptions = z.object({\n  modelName: z.string(),\n  apiKey: z.string(),\n  baseUrl: z.string().url().optional(),\n  getEmbeddingsUrl: z.string().url().optional(),\n});\ntype BaseEmbeddingModelOptionsType = z.infer<typeof BaseEmbeddingModelOptions>;\n\nclass BaseEmbeddingModel implements EmbeddingModelV1<EmbeddingModelSchemaType> {\n  readonly version = \"v1\" as const;\n  modelSchema: EmbeddingModelSchemaType;\n  modelName: string;\n\n  private readonly apiKey: string;\n  private readonly baseUrl: string;\n  private readonly getEmbeddingsUrl: string;\n\n  constructor(modelSchema: EmbeddingModelSchemaType, options: BaseEmbeddingModelOptionsType) {\n    const parsedOptions = BaseEmbeddingModelOptions.parse(options);\n    this.modelSchema = modelSchema;\n    this.modelName = parsedOptions.modelName;\n    this.apiKey = parsedOptions.apiKey;\n    this.baseUrl = urlWithoutTrailingSlash(parsedOptions.baseUrl || OpenAI.baseUrl);\n    this.getEmbeddingsUrl = urlWithoutTrailingSlash(parsedOptions.getEmbeddingsUrl || `${this.baseUrl}/embeddings`);\n  }\n\n  getDefaultBaseUrl(): UrlType {\n    return this.baseUrl;\n  }\n\n  getDefaultHeaders(): HeadersType {\n    return {\n      Authorization: `Bearer ${this.apiKey}`,\n      \"Content-Type\": \"application/json\",\n    };\n  }\n\n  getDefaultParams(): ParamsType {\n    return {\n      model: this.modelSchema.name,\n    };\n  }\n\n  // x-ratelimit-limit-requests\tThe maximum number of requests that are permitted before exhausting the rate limit.\n  // x-ratelimit-limit-tokens\tThe maximum number of tokens that are permitted before exhausting the rate limit.\n  // x-ratelimit-remaining-requests The remaining number of requests that are permitted before exhausting the rate limit.\n  // x-ratelimit-remaining-tokens\tThe remaining number of tokens that are permitted before exhausting the rate limit.\n  // x-ratelimit-reset-requests\tThe time until the rate limit (based on requests) resets to its initial state.\n  // x-ratelimit-reset-tokens\tThe time until the rate limit (based on tokens) resets to its initial state.\n  getRetryDelay(responseHeaders: HeadersType): { shouldRetry: boolean; delayMs: number } {\n    // parse duration from header value of format \"6m0s\" or \"21s\" or \"41ms\" or \"2s81ms\" or \"5h50m30ms\" and such\n    const parseDuration = (duration: string): number => {\n      const regex = /(\\d+)(h|m|s|ms)/g;\n      const timeUnits: { [unit: string]: number } = {\n        h: 3600000, // 1 hour = 60 * 60 * 1000 ms\n        m: 60000, // 1 minute = 60 * 1000 ms\n        s: 1000, // 1 second = 1000 ms\n        ms: 1, // milliseconds\n      };\n\n      let match;\n      let totalMs = 0;\n      while ((match = regex.exec(duration)) !== null) {\n        const value = parseInt(match[1]);\n        const unit = match[2];\n        totalMs += value * timeUnits[unit];\n      }\n\n      return totalMs;\n    };\n\n    let resetRequestsDelayMs = 0;\n    let resetTokensDelayMs = 0;\n    const shouldRetry = true;\n    if (responseHeaders[\"x-ratelimit-reset-requests\"]) {\n      resetRequestsDelayMs = parseDuration(responseHeaders[\"x-ratelimit-reset-requests\"]);\n    }\n    if (responseHeaders[\"x-ratelimit-reset-tokens\"]) {\n      resetTokensDelayMs = parseDuration(responseHeaders[\"x-ratelimit-reset-tokens\"]);\n    }\n\n    // if rate limited by requests, then it's reset must be the higher of two and visa versa\n    const delayMs = Math.max(resetRequestsDelayMs, resetTokensDelayMs);\n    return { shouldRetry, delayMs };\n  }\n\n  getTokenCount(requests: EmbeddingRequestsType): number {\n    return requests.requests.reduce((acc, request) => acc + request.length, 0);\n  }\n\n  transformModelRequest(request: any): {\n    modelName: string | undefined;\n    config: ConfigType;\n    embeddingRequests: EmbeddingRequestsType;\n  } {\n    const safeRequest = OpenAIEmbeddingRequest.safeParse(request);\n    if (!safeRequest.success) {\n      throw new InvalidModelRequestError({ info: \"Invalid model request\", cause: safeRequest.error });\n    }\n\n    const parsedRequest = safeRequest.data;\n\n    const modelName = parsedRequest.model;\n\n    const _config = {\n      encodingFormat: parsedRequest.encoding_format,\n      dimensions: parsedRequest.dimensions,\n    };\n    const config = Config().parse(removeUndefinedEntries(_config));\n\n    let embeddingRequests: EmbeddingRequestsType;\n    let embeddingFormat: typeof EmbeddingTextModalityLiteral | typeof EmbeddingTokenModalityLiteral;\n    if (typeof parsedRequest.input === \"string\") {\n      embeddingFormat = EmbeddingTextModalityLiteral;\n    } else {\n      if (typeof parsedRequest.input[0] === \"string\") {\n        embeddingFormat = EmbeddingTextModalityLiteral;\n      } else {\n        embeddingFormat = EmbeddingTokenModalityLiteral;\n      }\n    }\n\n    if (embeddingFormat === EmbeddingTextModalityLiteral) {\n      if (typeof parsedRequest.input === \"string\") {\n        embeddingRequests = {\n          modality: embeddingFormat,\n          requests: [parsedRequest.input],\n        };\n      } else {\n        embeddingRequests = {\n          modality: embeddingFormat,\n          requests: parsedRequest.input as string[],\n        };\n      }\n    } else {\n      if (typeof parsedRequest.input[0] === \"number\") {\n        embeddingRequests = {\n          modality: embeddingFormat,\n          requests: [parsedRequest.input as number[]],\n        };\n      } else {\n        embeddingRequests = {\n          modality: embeddingFormat,\n          requests: parsedRequest.input as number[][],\n        };\n      }\n    }\n\n    return {\n      modelName,\n      config,\n      embeddingRequests,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  transformConfig(config: ConfigType, requests?: EmbeddingRequestsType): ParamsType {\n    const _parsedConfig = this.modelSchema.config.schema.safeParse(config);\n    if (!_parsedConfig.success) {\n      throw new InvalidConfigError({\n        info: `Invalid config for model : '${this.modelSchema.name}'`,\n        cause: _parsedConfig.error,\n      });\n    }\n\n    const parsedConfig = _parsedConfig.data as ConfigType;\n    Object.keys(parsedConfig as ConfigType).forEach((key) => {\n      if (!this.modelSchema.config.def[key]) {\n        throw new InvalidConfigError({\n          info: `Invalid config for model : '${this.modelSchema.name}'`,\n          cause: new Error(`Invalid config key : '${key}', \n            available keys : [${Object.keys(this.modelSchema.config.def).join(\", \")}]`),\n        });\n      }\n    });\n\n    const transformedConfig = Object.keys(parsedConfig).reduce((acc, key) => {\n      const def = this.modelSchema.config.def[key];\n      const paramKey = def.param;\n      const paramValue = parsedConfig[key];\n      acc[paramKey] = paramValue;\n      return acc;\n    }, {} as ParamsType);\n\n    return transformedConfig;\n  }\n\n  transformEmbeddingRequests(requests: EmbeddingRequestsType): ParamsType {\n    const _parsedRequests = EmbeddingRequests().safeParse(requests);\n    if (!_parsedRequests.success) {\n      throw new InvalidEmbeddingRequestsError({ info: \"Invalid embedding requests\", cause: _parsedRequests.error });\n    }\n\n    // Note from OpenAI API Reference:\n    // The input must not exceed the max input tokens for the model (8192 tokens for text-embedding-ada-002),\n    // cannot be an empty string, and any array must be 2048 dimensions or less.\n    // TODO: add max tokens check in requests based on model schema when token calculation is accurate\n\n    const parsedRequests = _parsedRequests.data as EmbeddingRequestsType;\n    return {\n      input: parsedRequests.requests,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getGetEmbeddingsUrl(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.getEmbeddingsUrl);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getGetEmbeddingsHeaders(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<HeadersType> {\n    return new Promise((resolve) => {\n      resolve(this.getDefaultHeaders());\n    });\n  }\n\n  async getGetEmbeddingsData(config: ConfigType, requests: EmbeddingRequestsType): Promise<ParamsType> {\n    return new Promise((resolve) => {\n      resolve({\n        ...this.getDefaultParams(),\n        ...this.transformConfig(config, requests),\n        ...this.transformEmbeddingRequests(requests),\n      });\n    });\n  }\n\n  transformGetEmbeddingsResponse(response: any): EmbeddingResponseType {\n    let encodingFormat: typeof Base64EmbeddingLiteral | typeof FloatEmbeddingLiteral;\n    const safe = OpenAIGetEmbeddingsResponse.safeParse(response);\n    if (safe.success) {\n      const parsedResponse = safe.data;\n      encodingFormat = typeof parsedResponse.data[0].embedding === \"string\" ? Base64EmbeddingLiteral : FloatEmbeddingLiteral;\n      const embeddings = parsedResponse.data.map((item) => {\n        if (typeof item.embedding === \"string\") {\n          return {\n            index: item.index,\n            embedding: item.embedding,\n          } as Base64EmbeddingType;\n        } else {\n          return {\n            index: item.index,\n            embedding: item.embedding,\n          } as FloatEmbeddingType;\n        }\n      });\n\n      return {\n        encodingFormat: encodingFormat,\n        embeddings: embeddings,\n        usage: {\n          totalTokens: parsedResponse.usage.total_tokens,\n        },\n      } as EmbeddingResponseType;\n    }\n\n    throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n  }\n}\n\nexport { BaseEmbeddingModel, BaseEmbeddingModelOptions, type BaseEmbeddingModelOptionsType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.openai\";\nimport { OpenAIEmbeddingModelModalities, OpenAIEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst Text_Embedding_Ada002Literal = \"text-embedding-ada-002\";\nconst Text_Embedding_Ada002Description = \"Most capable 2nd generation embedding model, replacing 16 first generation models\";\n\nconst Text_Embedding_Ada002Schema = EmbeddingModelSchema(OpenAIEmbeddingModelModalitiesEnum).parse({\n  name: Text_Embedding_Ada002Literal,\n  description: Text_Embedding_Ada002Description,\n  modalities: OpenAIEmbeddingModelModalities,\n  maxInputTokens: 8192,\n  maxOutputTokens: 1536,\n  config: {\n    def: OpenAIEmbeddingModelConfigs.base().def,\n    schema: OpenAIEmbeddingModelConfigs.base().schema,\n  },\n});\n\nconst Text_Embedding_Ada002_Options = BaseEmbeddingModelOptions;\ntype Text_Embedding_Ada002_OptionsType = z.infer<typeof Text_Embedding_Ada002_Options>;\n\nclass Text_Embedding_Ada002 extends BaseEmbeddingModel {\n  constructor(options: Text_Embedding_Ada002_OptionsType) {\n    super(Text_Embedding_Ada002Schema, options);\n  }\n}\n\nexport {\n  Text_Embedding_Ada002,\n  Text_Embedding_Ada002_Options,\n  Text_Embedding_Ada002Schema,\n  Text_Embedding_Ada002Literal,\n  type Text_Embedding_Ada002_OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.openai\";\nimport { OpenAIEmbeddingModelModalities, OpenAIEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst Text_Embedding_3_SmallLiteral = \"text-embedding-3-small\";\nconst Text_Embedding_3_SmallDescription = \"Increased performance over 2nd generation ada embedding model\";\n\nconst Text_Embedding_3_SmallSchema = EmbeddingModelSchema(OpenAIEmbeddingModelModalitiesEnum).parse({\n  name: Text_Embedding_3_SmallLiteral,\n  description: Text_Embedding_3_SmallDescription,\n  modalities: OpenAIEmbeddingModelModalities,\n  maxInputTokens: 8192,\n  maxOutputTokens: 1536,\n  config: {\n    def: OpenAIEmbeddingModelConfigs.dimensions(1536).def,\n    schema: OpenAIEmbeddingModelConfigs.dimensions(1536).schema,\n  },\n});\n\nconst Text_Embedding_3_Small_Options = BaseEmbeddingModelOptions;\ntype Text_Embedding_3_Small_OptionsType = z.infer<typeof Text_Embedding_3_Small_Options>;\n\nclass Text_Embedding_3_Small extends BaseEmbeddingModel {\n  constructor(options: Text_Embedding_3_Small_OptionsType) {\n    super(Text_Embedding_3_SmallSchema, options);\n  }\n}\n\nexport {\n  Text_Embedding_3_Small,\n  Text_Embedding_3_Small_Options,\n  Text_Embedding_3_SmallSchema,\n  Text_Embedding_3_SmallLiteral,\n  type Text_Embedding_3_Small_OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { OpenAIEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.openai\";\nimport { OpenAIEmbeddingModelModalities, OpenAIEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst Text_Embedding_3_LargeLiteral = \"text-embedding-3-large\";\nconst Text_Embedding_3_LargeDescription = \"Most capable embedding model for both english and non-english tasks\";\n\nconst Text_Embedding_3_LargeSchema = EmbeddingModelSchema(OpenAIEmbeddingModelModalitiesEnum).parse({\n  name: Text_Embedding_3_LargeLiteral,\n  description: Text_Embedding_3_LargeDescription,\n  modalities: OpenAIEmbeddingModelModalities,\n  maxInputTokens: 8192,\n  maxOutputTokens: 3072,\n  config: {\n    def: OpenAIEmbeddingModelConfigs.dimensions(3072).def,\n    schema: OpenAIEmbeddingModelConfigs.dimensions(3072).schema,\n  },\n});\n\nconst Text_Embedding_3_Large_Options = BaseEmbeddingModelOptions;\ntype Text_Embedding_3_Large_OptionsType = z.infer<typeof Text_Embedding_3_Large_Options>;\n\nclass Text_Embedding_3_Large extends BaseEmbeddingModel {\n  constructor(options: Text_Embedding_3_Large_OptionsType) {\n    super(Text_Embedding_3_LargeSchema, options);\n  }\n}\n\nexport {\n  Text_Embedding_3_Large,\n  Text_Embedding_3_Large_Options,\n  Text_Embedding_3_LargeSchema,\n  Text_Embedding_3_LargeLiteral,\n  type Text_Embedding_3_Large_OptionsType,\n};\n","import {\n  OpenAIChatModelConfigs,\n  OpenAIChatModelModalities,\n  OpenAIChatModelModalitiesEnum,\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n} from \"@adaline/openai\";\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nconst BaseChatModelSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelModalitiesEnum).parse({\n  name: \"__base__\",\n  description: \"Base chat model for Azure OpenAI\",\n  maxInputTokens: 128000,\n  maxOutputTokens: 128000,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelModalities,\n  config: {\n    def: OpenAIChatModelConfigs.base(128000, 4).def,\n    schema: OpenAIChatModelConfigs.base(128000, 4).schema,\n  },\n});\n\nexport { BaseChatModelSchema };\n","import { BaseChatModel } from \"@adaline/openai\";\nimport { ChatModelSchemaType, HeadersType, ModelError, ModelResponseError } from \"@adaline/provider\";\nimport { ChatModelPriceType } from \"@adaline/types\";\n\nimport { Azure } from \"../../../provider\";\nimport { BaseChatModelOptions, BaseChatModelOptionsType } from \"../chat-model-options.azure\";\n\nclass BaseChatModelOpenAI extends BaseChatModel {\n  readonly version = \"v1\" as const;\n  modelSchema: ChatModelSchemaType;\n  readonly deploymentId: string;\n\n  private readonly azureApiKey: string;\n  private readonly azureApiVersion: string;\n\n  constructor(modelSchema: ChatModelSchemaType, options: BaseChatModelOptionsType) {\n    const parsedOptions = BaseChatModelOptions.parse(options);\n\n    let baseUrl;\n    if (parsedOptions.baseUrl) {\n      baseUrl = parsedOptions.baseUrl;\n    } else if (parsedOptions.resourceName) {\n      baseUrl = Azure.azureUrl(parsedOptions.resourceName, \"openai\");\n    } else {\n      throw new ModelError({\n        info: \"Either 'baseUrl' or 'resourceName' must be provided\",\n        cause: new Error(\"Either 'baseUrl' or 'resourceName' must be provided\"),\n      });\n    }\n\n    const azureApiVersion = \"2024-06-01\";\n    const azureDeploymentUrl = `${baseUrl}/openai/deployments/${parsedOptions.deploymentId}`;\n\n    super(modelSchema, {\n      modelName: parsedOptions.deploymentId,\n      apiKey: parsedOptions.apiKey,\n      baseUrl: azureDeploymentUrl,\n      completeChatUrl: `${azureDeploymentUrl}/chat/completions?api-version=${azureApiVersion}`,\n      streamChatUrl: `${azureDeploymentUrl}/chat/completions?api-version=${azureApiVersion}`,\n    });\n    this.modelSchema = modelSchema;\n    this.deploymentId = parsedOptions.deploymentId;\n    this.azureApiKey = parsedOptions.apiKey;\n    this.azureApiVersion = azureApiVersion;\n  }\n\n  getDefaultHeaders(): HeadersType {\n    return {\n      \"Content-Type\": \"application/json\",\n      \"api-key\": this.azureApiKey,\n      source: \"adaline\",\n    };\n  }\n  getModelPricing(): ChatModelPriceType {\n    throw new ModelResponseError({\n      info: `Invalid model pricing for model : '${this.modelName}'`,\n      cause: new Error(`Pricing configuration not supported azure provider.`),\n    });\n  }\n}\n\nexport { BaseChatModelOpenAI };\n","import { z } from \"zod\";\n\nimport { GPT_4oSchema as OpenAI_GPT_4oSchema } from \"@adaline/openai\";\n\nimport { BaseChatModelOptions } from \"../chat-model-options.azure\";\nimport { BaseChatModelOpenAI } from \"./base-chat-model.openai.azure\";\n\nconst GPT_4oLiteral = \"gpt-4o\" as const;\nconst GPT_4oSchema = OpenAI_GPT_4oSchema;\nconst GPT_4oOptions = BaseChatModelOptions;\ntype GPT_4oOptionsType = z.infer<typeof GPT_4oOptions>;\n\nclass GPT_4o extends BaseChatModelOpenAI {\n  constructor(options: GPT_4oOptionsType) {\n    super(GPT_4oSchema, options);\n  }\n}\n\nexport { GPT_4o, GPT_4oOptions, GPT_4oSchema, GPT_4oLiteral, type GPT_4oOptionsType };\n","import { z } from \"zod\";\n\nimport { GPT_4o_MiniSchema as OpenAI_GPT_4o_MiniSchema } from \"@adaline/openai\";\n\nimport { BaseChatModelOptions } from \"../chat-model-options.azure\";\nimport { BaseChatModelOpenAI } from \"./base-chat-model.openai.azure\";\n\nconst GPT_4o_MiniLiteral = \"gpt-4o-mini\" as const;\nconst GPT_4o_MiniSchema = OpenAI_GPT_4o_MiniSchema;\nconst GPT_4o_MiniOptions = BaseChatModelOptions;\ntype GPT_4o_MiniOptionsType = z.infer<typeof GPT_4o_MiniOptions>;\n\nclass GPT_4o_Mini extends BaseChatModelOpenAI {\n  constructor(options: GPT_4o_MiniOptionsType) {\n    super(GPT_4o_MiniSchema, options);\n  }\n}\n\nexport { GPT_4o_Mini, GPT_4o_MiniOptions, GPT_4o_MiniSchema, GPT_4o_MiniLiteral, type GPT_4o_MiniOptionsType };\n","import { z } from \"zod\";\n\nimport { GPT_4o_Mini_2024_07_18Schema as OpenAI_GPT_4o_Mini_2024_07_18Schema } from \"@adaline/openai\";\n\nimport { BaseChatModelOptions } from \"../chat-model-options.azure\";\nimport { BaseChatModelOpenAI } from \"./base-chat-model.openai.azure\";\n\nconst GPT_4o_Mini_2024_07_18Literal = \"gpt-4o-mini-2024-07-18\" as const;\nconst GPT_4o_Mini_2024_07_18Schema = OpenAI_GPT_4o_Mini_2024_07_18Schema;\nconst GPT_4o_Mini_2024_07_18Options = BaseChatModelOptions;\ntype GPT_4o_Mini_2024_07_18OptionsType = z.infer<typeof GPT_4o_Mini_2024_07_18Options>;\n\nclass GPT_4o_Mini_2024_07_18 extends BaseChatModelOpenAI {\n  constructor(options: GPT_4o_Mini_2024_07_18OptionsType) {\n    super(GPT_4o_Mini_2024_07_18Schema, options);\n  }\n}\n\nexport {\n  GPT_4o_Mini_2024_07_18,\n  GPT_4o_Mini_2024_07_18Options,\n  GPT_4o_Mini_2024_07_18Schema,\n  GPT_4o_Mini_2024_07_18Literal,\n  type GPT_4o_Mini_2024_07_18OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { GPT_4o_2024_08_06Schema as OpenAI_GPT_4o_2024_08_06Schema } from \"@adaline/openai\";\n\nimport { BaseChatModelOptions } from \"../chat-model-options.azure\";\nimport { BaseChatModelOpenAI } from \"./base-chat-model.openai.azure\";\n\nconst GPT_4o_2024_08_06Literal = \"gpt-4o-2024-08-06\" as const;\nconst GPT_4o_2024_08_06Schema = OpenAI_GPT_4o_2024_08_06Schema;\nconst GPT_4o_2024_08_06Options = BaseChatModelOptions;\ntype GPT_4o_2024_08_06OptionsType = z.infer<typeof GPT_4o_2024_08_06Options>;\n\nclass GPT_4o_2024_08_06 extends BaseChatModelOpenAI {\n  constructor(options: GPT_4o_2024_08_06OptionsType) {\n    super(GPT_4o_2024_08_06Schema, options);\n  }\n}\n\nexport {\n  GPT_4o_2024_08_06,\n  GPT_4o_2024_08_06Options,\n  GPT_4o_2024_08_06Schema,\n  GPT_4o_2024_08_06Literal,\n  type GPT_4o_2024_08_06OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { GPT_4o_2024_05_13Schema as OpenAI_GPT_4o_2024_05_13Schema } from \"@adaline/openai\";\n\nimport { BaseChatModelOptions } from \"../chat-model-options.azure\";\nimport { BaseChatModelOpenAI } from \"./base-chat-model.openai.azure\";\n\nconst GPT_4o_2024_05_13Literal = \"gpt-4o-2024-05-13\" as const;\nconst GPT_4o_2024_05_13Schema = OpenAI_GPT_4o_2024_05_13Schema;\nconst GPT_4o_2024_05_13Options = BaseChatModelOptions;\ntype GPT_4o_2024_05_13OptionsType = z.infer<typeof GPT_4o_2024_05_13Options>;\n\nclass GPT_4o_2024_05_13 extends BaseChatModelOpenAI {\n  constructor(options: GPT_4o_2024_05_13OptionsType) {\n    super(GPT_4o_2024_05_13Schema, options);\n  }\n}\n\nexport {\n  GPT_4o_2024_05_13,\n  GPT_4o_2024_05_13Options,\n  GPT_4o_2024_05_13Schema,\n  GPT_4o_2024_05_13Literal,\n  type GPT_4o_2024_05_13OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { GPT_4Schema as OpenAI_GPT_4Schema } from \"@adaline/openai\";\n\nimport { BaseChatModelOptions } from \"../chat-model-options.azure\";\nimport { BaseChatModelOpenAI } from \"./base-chat-model.openai.azure\";\n\nconst GPT_4Literal = \"gpt-4\" as const;\nconst GPT_4Schema = OpenAI_GPT_4Schema;\nconst GPT_4Options = BaseChatModelOptions;\ntype GPT_4OptionsType = z.infer<typeof GPT_4Options>;\n\nclass GPT_4 extends BaseChatModelOpenAI {\n  constructor(options: GPT_4OptionsType) {\n    super(GPT_4Schema, options);\n  }\n}\n\nexport { GPT_4, GPT_4Options, GPT_4Schema, GPT_4Literal, type GPT_4OptionsType };\n","import { z } from \"zod\";\n\nimport { GPT_4_Turbo_2024_04_09Schema as OpenAI_GPT_4_Turbo_2024_04_09Schema } from \"@adaline/openai\";\n\nimport { BaseChatModelOptions } from \"../chat-model-options.azure\";\nimport { BaseChatModelOpenAI } from \"./base-chat-model.openai.azure\";\n\nconst GPT_4_Turbo_2024_04_09Literal = \"gpt-4-turbo-2024-04-09\" as const;\nconst GPT_4_Turbo_2024_04_09Schema = OpenAI_GPT_4_Turbo_2024_04_09Schema;\nconst GPT_4_Turbo_2024_04_09Options = BaseChatModelOptions;\ntype GPT_4_Turbo_2024_04_09OptionsType = z.infer<typeof GPT_4_Turbo_2024_04_09Options>;\n\nclass GPT_4_Turbo_2024_04_09 extends BaseChatModelOpenAI {\n  constructor(options: GPT_4_Turbo_2024_04_09OptionsType) {\n    super(GPT_4_Turbo_2024_04_09Schema, options);\n  }\n}\n\nexport {\n  GPT_4_Turbo_2024_04_09,\n  GPT_4_Turbo_2024_04_09Options,\n  GPT_4_Turbo_2024_04_09Schema,\n  GPT_4_Turbo_2024_04_09Literal,\n  type GPT_4_Turbo_2024_04_09OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { GPT_4_1106_PreviewSchema as OpenAI_GPT_4_1106_PreviewSchema } from \"@adaline/openai\";\n\nimport { BaseChatModelOptions } from \"../chat-model-options.azure\";\nimport { BaseChatModelOpenAI } from \"./base-chat-model.openai.azure\";\n\nconst GPT_4_1106_PreviewLiteral = \"gpt-4-1106-preview\" as const;\nconst GPT_4_1106_PreviewSchema = OpenAI_GPT_4_1106_PreviewSchema;\nconst GPT_4_1106_PreviewOptions = BaseChatModelOptions;\ntype GPT_4_1106_PreviewOptionsType = z.infer<typeof GPT_4_1106_PreviewOptions>;\n\nclass GPT_4_1106_Preview extends BaseChatModelOpenAI {\n  constructor(options: GPT_4_1106_PreviewOptionsType) {\n    super(GPT_4_1106_PreviewSchema, options);\n  }\n}\n\nexport {\n  GPT_4_1106_Preview,\n  GPT_4_1106_PreviewOptions,\n  GPT_4_1106_PreviewSchema,\n  GPT_4_1106_PreviewLiteral,\n  type GPT_4_1106_PreviewOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { GPT_4_0613Schema as OpenAI_GPT_4_0613Schema } from \"@adaline/openai\";\n\nimport { BaseChatModelOptions } from \"../chat-model-options.azure\";\nimport { BaseChatModelOpenAI } from \"./base-chat-model.openai.azure\";\n\nconst GPT_4_0613Literal = \"gpt-4-0613\" as const;\nconst GPT_4_0613Schema = OpenAI_GPT_4_0613Schema;\nconst GPT_4_0613Options = BaseChatModelOptions;\ntype GPT_4_0613OptionsType = z.infer<typeof GPT_4_0613Options>;\n\nclass GPT_4_0613 extends BaseChatModelOpenAI {\n  constructor(options: GPT_4_0613OptionsType) {\n    super(GPT_4_0613Schema, options);\n  }\n}\n\nexport { GPT_4_0613, GPT_4_0613Options, GPT_4_0613Schema, GPT_4_0613Literal, type GPT_4_0613OptionsType };\n","import { z } from \"zod\";\n\nimport { GPT_3_5_TurboSchema as OpenAI_GPT_3_5_TurboSchema } from \"@adaline/openai\";\n\nimport { BaseChatModelOptions } from \"../chat-model-options.azure\";\nimport { BaseChatModelOpenAI } from \"./base-chat-model.openai.azure\";\n\nconst GPT_3_5_TurboLiteral = \"gpt-3-5-turbo\" as const;\nconst GPT_3_5_TurboSchema = OpenAI_GPT_3_5_TurboSchema;\nconst GPT_3_5_TurboOptions = BaseChatModelOptions;\ntype GPT_3_5_TurboOptionsType = z.infer<typeof GPT_3_5_TurboOptions>;\n\nclass GPT_3_5_Turbo extends BaseChatModelOpenAI {\n  constructor(options: GPT_3_5_TurboOptionsType) {\n    super(GPT_3_5_TurboSchema, options);\n  }\n}\n\nexport { GPT_3_5_Turbo, GPT_3_5_TurboOptions, GPT_3_5_TurboSchema, GPT_3_5_TurboLiteral, type GPT_3_5_TurboOptionsType };\n","import { z } from \"zod\";\n\nimport { GPT_3_5_Turbo_1106Schema as OpenAI_GPT_3_5_Turbo_1106Schema } from \"@adaline/openai\";\n\nimport { BaseChatModelOptions } from \"../chat-model-options.azure\";\nimport { BaseChatModelOpenAI } from \"./base-chat-model.openai.azure\";\n\nconst GPT_3_5_Turbo_1106Literal = \"gpt-3-5-turbo-1106\" as const;\nconst GPT_3_5_Turbo_1106Schema = OpenAI_GPT_3_5_Turbo_1106Schema;\nconst GPT_3_5_Turbo_1106Options = BaseChatModelOptions;\ntype GPT_3_5_Turbo_1106OptionsType = z.infer<typeof GPT_3_5_Turbo_1106Options>;\n\nclass GPT_3_5_Turbo_1106 extends BaseChatModelOpenAI {\n  constructor(options: GPT_3_5_Turbo_1106OptionsType) {\n    super(GPT_3_5_Turbo_1106Schema, options);\n  }\n}\n\nexport {\n  GPT_3_5_Turbo_1106,\n  GPT_3_5_Turbo_1106Options,\n  GPT_3_5_Turbo_1106Schema,\n  GPT_3_5_Turbo_1106Literal,\n  type GPT_3_5_Turbo_1106OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { GPT_3_5_Turbo_0125Schema as OpenAI_GPT_3_5_Turbo_0125Schema } from \"@adaline/openai\";\n\nimport { BaseChatModelOptions } from \"../chat-model-options.azure\";\nimport { BaseChatModelOpenAI } from \"./base-chat-model.openai.azure\";\n\nconst GPT_3_5_Turbo_0125Literal = \"gpt-3-5-turbo-0125\" as const;\nconst GPT_3_5_Turbo_0125Schema = OpenAI_GPT_3_5_Turbo_0125Schema;\nconst GPT_3_5_Turbo_0125Options = BaseChatModelOptions;\ntype GPT_3_5_Turbo_0125OptionsType = z.infer<typeof GPT_3_5_Turbo_0125Options>;\n\nclass GPT_3_5_Turbo_0125 extends BaseChatModelOpenAI {\n  constructor(options: GPT_3_5_Turbo_0125OptionsType) {\n    super(GPT_3_5_Turbo_0125Schema, options);\n  }\n}\n\nexport {\n  GPT_3_5_Turbo_0125,\n  GPT_3_5_Turbo_0125Options,\n  GPT_3_5_Turbo_0125Schema,\n  GPT_3_5_Turbo_0125Literal,\n  type GPT_3_5_Turbo_0125OptionsType,\n};\n","import { z } from \"zod\";\n\nconst BaseEmbeddingModelOptions = z.object({\n  apiKey: z.string().min(1),\n  deploymentId: z.string().min(1),\n  resourceName: z.string().min(1).optional(),\n  baseUrl: z.string().optional(),\n});\n\ntype BaseEmbeddingModelOptionsType = z.infer<typeof BaseEmbeddingModelOptions>;\n\nexport { BaseEmbeddingModelOptions, type BaseEmbeddingModelOptionsType };\n","import { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { \n  OpenAIEmbeddingModelModalities, \n  OpenAIEmbeddingModelModalitiesEnum,\n  OpenAIEmbeddingModelConfigs,\n} from \"@adaline/openai\";\n\nconst BaseEmbeddingModelSchema = EmbeddingModelSchema(OpenAIEmbeddingModelModalitiesEnum).parse({\n  name: \"__base__\",\n  description: \"Base embedding model for Azure OpenAI\",\n  maxInputTokens: 8192,\n  maxOutputTokens: 3072,\n  modalities: OpenAIEmbeddingModelModalities,\n  config: {\n    def: OpenAIEmbeddingModelConfigs.dimensions(3072).def,\n    schema: OpenAIEmbeddingModelConfigs.dimensions(3072).schema,\n  },\n});\n\nexport { BaseEmbeddingModelSchema };","import { BaseEmbeddingModel } from \"@adaline/openai\";\nimport { EmbeddingModelSchemaType, HeadersType, ModelError } from \"@adaline/provider\";\n\nimport { Azure } from \"../../../provider\";\nimport { BaseEmbeddingModelOptions, BaseEmbeddingModelOptionsType } from \"../embedding-model-options.azure\";\n\nclass BaseEmbeddingModelOpenAI extends BaseEmbeddingModel {\n  readonly version = \"v1\" as const;\n  modelSchema: EmbeddingModelSchemaType;\n  readonly deploymentId: string;\n\n  private readonly azureApiKey: string;\n  private readonly azureApiVersion: string;\n\n  constructor(modelSchema: EmbeddingModelSchemaType, options: BaseEmbeddingModelOptionsType) {\n    const parsedOptions = BaseEmbeddingModelOptions.parse(options);\n\n    let baseUrl;\n    if (parsedOptions.baseUrl) {\n      baseUrl = parsedOptions.baseUrl;\n    } else if (parsedOptions.resourceName) {\n      baseUrl = Azure.azureUrl(parsedOptions.resourceName, \"openai\");\n    } else {\n      throw new ModelError({\n        info: \"Either 'baseUrl' or 'resourceName' must be provided\",\n        cause: new Error(\"Either 'baseUrl' or 'resourceName' must be provided\"),\n      });\n    }\n\n    const azureApiVersion = \"2024-06-01\";\n    const azureDeploymentUrl = `${baseUrl}/openai/deployments/${parsedOptions.deploymentId}`;\n\n    super(modelSchema, {\n      modelName: parsedOptions.deploymentId,\n      apiKey: parsedOptions.apiKey,\n      baseUrl: azureDeploymentUrl,\n      getEmbeddingsUrl: `${azureDeploymentUrl}/embeddings?api-version=${azureApiVersion}`,\n    });\n    this.modelSchema = modelSchema;\n    this.deploymentId = parsedOptions.deploymentId;\n    this.azureApiKey = parsedOptions.apiKey;\n    this.azureApiVersion = azureApiVersion;\n  }\n\n  getDefaultHeaders(): HeadersType {\n    return {\n      \"Content-Type\": \"application/json\",\n      \"api-key\": this.azureApiKey,\n      source: \"adaline\",\n    };\n  }\n}\n\nexport { BaseEmbeddingModelOpenAI };\n","import { z } from \"zod\";\n\nimport { Text_Embedding_3_LargeSchema as OpenAI_Text_Embedding_3_LargeSchema } from \"@adaline/openai\";\n\nimport { BaseEmbeddingModelOptions } from \"../embedding-model-options.azure\";\nimport { BaseEmbeddingModelOpenAI } from \"./base-embedding-model.openai.azure\";\n\nconst Text_Embedding_3_LargeLiteral = \"text-embedding-3-large\" as const;\nconst Text_Embedding_3_LargeSchema = OpenAI_Text_Embedding_3_LargeSchema;\nconst Text_Embedding_3_LargeOptions = BaseEmbeddingModelOptions;\ntype Text_Embedding_3_LargeOptionsType = z.infer<typeof Text_Embedding_3_LargeOptions>;\n\nclass Text_Embedding_3_Large extends BaseEmbeddingModelOpenAI {\n  constructor(options: Text_Embedding_3_LargeOptionsType) {\n    super(Text_Embedding_3_LargeSchema, options);\n  }\n}\n\nexport {\n  Text_Embedding_3_Large,\n  Text_Embedding_3_LargeOptions,\n  Text_Embedding_3_LargeSchema,\n  Text_Embedding_3_LargeLiteral,\n  type Text_Embedding_3_LargeOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { Text_Embedding_Ada002Schema as OpenAI_Text_Embedding_Ada_002Schema } from \"@adaline/openai\";\n\nimport { BaseEmbeddingModelOptions } from \"../embedding-model-options.azure\";\nimport { BaseEmbeddingModelOpenAI } from \"./base-embedding-model.openai.azure\";\n\nconst Text_Embedding_Ada_002Literal = \"text-embedding-ada-002\" as const;\nconst Text_Embedding_Ada_002Schema = OpenAI_Text_Embedding_Ada_002Schema;\nconst Text_Embedding_Ada_002Options = BaseEmbeddingModelOptions;\ntype Text_Embedding_Ada_002OptionsType = z.infer<typeof Text_Embedding_Ada_002Options>;\n\nclass Text_Embedding_Ada_002 extends BaseEmbeddingModelOpenAI {\n  constructor(options: Text_Embedding_Ada_002OptionsType) {\n    super(Text_Embedding_Ada_002Schema, options);\n  }\n}\n\nexport {\n  Text_Embedding_Ada_002,\n  Text_Embedding_Ada_002Options,\n  Text_Embedding_Ada_002Schema,\n  Text_Embedding_Ada_002Literal,\n  type Text_Embedding_Ada_002OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { Text_Embedding_3_SmallSchema as OpenAI_Text_Embedding_3_SmallSchema } from \"@adaline/openai\";\n\nimport { BaseEmbeddingModelOptions } from \"../embedding-model-options.azure\";\nimport { BaseEmbeddingModelOpenAI } from \"./base-embedding-model.openai.azure\";\n\nconst Text_Embedding_3_SmallLiteral = \"text-embedding-3-small\" as const;\nconst Text_Embedding_3_SmallSchema = OpenAI_Text_Embedding_3_SmallSchema;\nconst Text_Embedding_3_SmallOptions = BaseEmbeddingModelOptions;\ntype Text_Embedding_3_SmallOptionsType = z.infer<typeof Text_Embedding_3_SmallOptions>;\n\nclass Text_Embedding_3_Small extends BaseEmbeddingModelOpenAI {\n  constructor(options: Text_Embedding_3_SmallOptionsType) {\n    super(Text_Embedding_3_SmallSchema, options);\n  }\n}\n\nexport {\n  Text_Embedding_3_Small,\n  Text_Embedding_3_SmallOptions,\n  Text_Embedding_3_SmallSchema,\n  Text_Embedding_3_SmallLiteral,\n  type Text_Embedding_3_SmallOptionsType,\n};\n","import { ChatModelSchemaType, ChatModelV1, EmbeddingModelSchemaType, EmbeddingModelV1, ProviderV1 } from \"@adaline/provider\";\n\nimport {\n  BaseChatModelOpenAI,\n  BaseChatModelOptions,\n  BaseChatModelSchema,\n  BaseEmbeddingModelOpenAI,\n  BaseEmbeddingModelOptions,\n  BaseEmbeddingModelSchema,\n  type BaseChatModelOptionsType,\n  type BaseEmbeddingModelOptionsType,\n} from \"../models\";\n\nconst ProviderLiteral = \"azure\";\nclass Azure<C extends BaseChatModelOptionsType, E extends BaseEmbeddingModelOptionsType> implements ProviderV1<C, E> {\n  readonly version = \"v1\" as const;\n  readonly name = ProviderLiteral;\n  static readonly azureUrl = (resourceName: string, provider: string): string => `https://${resourceName}.${provider}.azure.com`;\n\n  chatModelLiterals(): string[] {\n    return [\"__base__\"];\n  }\n\n  chatModelSchemas(): Record<string, ChatModelSchemaType> {\n    return {\n      __base__: BaseChatModelSchema,\n    };\n  }\n\n  chatModel(options: C): ChatModelV1 {\n    const model = BaseChatModelOpenAI;\n    const parsedOptions = BaseChatModelOptions.parse(options);\n    return new model(BaseChatModelSchema, parsedOptions);\n  }\n\n  embeddingModelLiterals(): string[] {\n    return [\"__base__\"];\n  }\n\n  embeddingModelSchemas(): Record<string, EmbeddingModelSchemaType> {\n    return {\n      __base__: BaseEmbeddingModelSchema,\n    };\n  }\n\n  embeddingModel(options: E): EmbeddingModelV1 {\n    const model = BaseEmbeddingModelOpenAI;\n    const parsedOptions = BaseEmbeddingModelOptions.parse(options);\n    return new model(BaseEmbeddingModelSchema, parsedOptions);\n  }\n}\n\nexport { Azure };\n"]}