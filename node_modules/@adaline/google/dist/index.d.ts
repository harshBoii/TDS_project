import * as zod from 'zod';
import { z } from 'zod';
import { ChatModelSchemaType, ChatModelV1, UrlType, HeadersType, ParamsType, EmbeddingModelSchemaType, EmbeddingModelV1, ProviderV1 } from '@adaline/provider';
import { MessageType, ConfigType, ToolType, ChatResponseType, PartialChatResponseType, ChatModelPriceType, EmbeddingRequestsType, EmbeddingResponseType } from '@adaline/types';

declare const GoogleChatModelConfigs: {
    readonly base: (maxTemperature: number, defaultTemperature: number, maxOutputTokens: number, maxSequences: number, defaultTopP: number) => {
        def: {
            readonly temperature: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly maxTokens: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly stop: {
                type: "multi-string";
                param: string;
                title: string;
                description: string;
                max: number;
            };
            readonly topP: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly toolChoice: {
                type: "select-string";
                param: string;
                title: string;
                description: string;
                default: string;
                choices: string[];
            };
            readonly safetySettings: {
                type: "object-schema";
                param: string;
                title: string;
                description: string;
                objectSchema?: any;
            };
        };
        schema: zod.ZodObject<{
            temperature: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            maxTokens: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            stop: zod.ZodOptional<zod.ZodDefault<zod.ZodArray<zod.ZodString, "many">>>;
            topP: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            toolChoice: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
            safetySettings: zod.ZodOptional<zod.ZodObject<zod.ZodRawShape, zod.UnknownKeysParam, zod.ZodTypeAny, {
                [x: string]: any;
            }, {
                [x: string]: any;
            }>>;
        }, "strip", zod.ZodTypeAny, {
            toolChoice?: string | null | undefined;
            safetySettings?: {
                [x: string]: any;
            } | undefined;
            temperature?: number | undefined;
            topP?: number | undefined;
            maxTokens?: number | undefined;
            stop?: string[] | undefined;
        }, {
            toolChoice?: string | null | undefined;
            safetySettings?: {
                [x: string]: any;
            } | undefined;
            temperature?: number | undefined;
            topP?: number | undefined;
            maxTokens?: number | undefined;
            stop?: string[] | undefined;
        }>;
    };
    readonly c1: (maxTemperature: number, defaultTemperature: number, maxOutputTokens: number, maxSequences: number, defaultTopP: number, defaultTopK: number) => {
        def: {
            readonly temperature: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly maxTokens: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly stop: {
                type: "multi-string";
                param: string;
                title: string;
                description: string;
                max: number;
            };
            readonly topP: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly topK: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly frequencyPenalty: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly presencePenalty: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly seed: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly toolChoice: {
                type: "select-string";
                param: string;
                title: string;
                description: string;
                default: string;
                choices: string[];
            };
            readonly safetySettings: {
                type: "object-schema";
                param: string;
                title: string;
                description: string;
                objectSchema?: any;
            };
        };
        schema: zod.ZodObject<{
            temperature: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            maxTokens: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            stop: zod.ZodOptional<zod.ZodDefault<zod.ZodArray<zod.ZodString, "many">>>;
            topP: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            topK: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            frequencyPenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            presencePenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            seed: zod.ZodEffects<zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>, number | undefined, number | undefined>;
            toolChoice: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
            safetySettings: zod.ZodOptional<zod.ZodObject<zod.ZodRawShape, zod.UnknownKeysParam, zod.ZodTypeAny, {
                [x: string]: any;
            }, {
                [x: string]: any;
            }>>;
        }, "strip", zod.ZodTypeAny, {
            frequencyPenalty?: number | undefined;
            presencePenalty?: number | undefined;
            seed?: number | undefined;
            toolChoice?: string | null | undefined;
            safetySettings?: {
                [x: string]: any;
            } | undefined;
            temperature?: number | undefined;
            topP?: number | undefined;
            topK?: number | undefined;
            maxTokens?: number | undefined;
            stop?: string[] | undefined;
        }, {
            frequencyPenalty?: number | undefined;
            presencePenalty?: number | undefined;
            seed?: number | undefined;
            toolChoice?: string | null | undefined;
            safetySettings?: {
                [x: string]: any;
            } | undefined;
            temperature?: number | undefined;
            topP?: number | undefined;
            topK?: number | undefined;
            maxTokens?: number | undefined;
            stop?: string[] | undefined;
        }>;
    };
    readonly reasoning: (maxTemperature: number, defaultTemperature: number, maxOutputTokens: number, maxSequences: number, defaultTopP: number, defaultTopK: number) => {
        def: {
            readonly temperature: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly maxTokens: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly stop: {
                type: "multi-string";
                param: string;
                title: string;
                description: string;
                max: number;
            };
            readonly topP: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly topK: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly frequencyPenalty: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly presencePenalty: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly seed: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly toolChoice: {
                type: "select-string";
                param: string;
                title: string;
                description: string;
                default: string;
                choices: string[];
            };
            readonly safetySettings: {
                type: "object-schema";
                param: string;
                title: string;
                description: string;
                objectSchema?: any;
            };
            readonly reasoningEnabled: {
                type: "select-boolean";
                param: string;
                title: string;
                description: string;
                default: boolean | null;
            };
        };
        schema: zod.ZodObject<{
            temperature: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            maxTokens: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            stop: zod.ZodOptional<zod.ZodDefault<zod.ZodArray<zod.ZodString, "many">>>;
            topP: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            topK: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            frequencyPenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            presencePenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            seed: zod.ZodEffects<zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>, number | undefined, number | undefined>;
            toolChoice: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
            safetySettings: zod.ZodOptional<zod.ZodObject<zod.ZodRawShape, zod.UnknownKeysParam, zod.ZodTypeAny, {
                [x: string]: any;
            }, {
                [x: string]: any;
            }>>;
            reasoningEnabled: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodBoolean>>>;
        }, "strip", zod.ZodTypeAny, {
            frequencyPenalty?: number | undefined;
            presencePenalty?: number | undefined;
            seed?: number | undefined;
            toolChoice?: string | null | undefined;
            safetySettings?: {
                [x: string]: any;
            } | undefined;
            reasoningEnabled?: boolean | null | undefined;
            temperature?: number | undefined;
            topP?: number | undefined;
            topK?: number | undefined;
            maxTokens?: number | undefined;
            stop?: string[] | undefined;
        }, {
            frequencyPenalty?: number | undefined;
            presencePenalty?: number | undefined;
            seed?: number | undefined;
            toolChoice?: string | null | undefined;
            safetySettings?: {
                [x: string]: any;
            } | undefined;
            reasoningEnabled?: boolean | null | undefined;
            temperature?: number | undefined;
            topP?: number | undefined;
            topK?: number | undefined;
            maxTokens?: number | undefined;
            stop?: string[] | undefined;
        }>;
    };
};
declare const GoogleEmbeddingModelConfigs: {
    readonly base: (maxDimensions: number) => {
        def: {
            readonly dimensions: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
        };
        schema: zod.ZodObject<{
            dimensions: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
        }, "strip", zod.ZodTypeAny, {
            dimensions?: number | undefined;
        }, {
            dimensions?: number | undefined;
        }>;
    };
};

declare const ChatModelBaseConfigSchema: (maxTemperature: number, defaultTemperature: number, maxOutputTokens: number, maxSequences: number, defaultTopP: number) => z.ZodObject<{
    temperature: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    maxTokens: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    stop: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    topP: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    toolChoice: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodEnum<[string, ...string[]]>>>>;
    safetySettings: z.ZodOptional<z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, {
        [x: string]: any;
    }, {
        [x: string]: any;
    }>>;
}, "strip", z.ZodTypeAny, {
    toolChoice?: string | null | undefined;
    safetySettings?: {
        [x: string]: any;
    } | undefined;
    temperature?: number | undefined;
    topP?: number | undefined;
    maxTokens?: number | undefined;
    stop?: string[] | undefined;
}, {
    toolChoice?: string | null | undefined;
    safetySettings?: {
        [x: string]: any;
    } | undefined;
    temperature?: number | undefined;
    topP?: number | undefined;
    maxTokens?: number | undefined;
    stop?: string[] | undefined;
}>;
declare const ChatModelBaseConfigDef: (maxTemperature: number, defaultTemperature: number, maxOutputTokens: number, maxSequences: number, defaultTopP: number) => {
    readonly temperature: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly maxTokens: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly stop: {
        type: "multi-string";
        param: string;
        title: string;
        description: string;
        max: number;
    };
    readonly topP: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly toolChoice: {
        type: "select-string";
        param: string;
        title: string;
        description: string;
        default: string;
        choices: string[];
    };
    readonly safetySettings: {
        type: "object-schema";
        param: string;
        title: string;
        description: string;
        objectSchema?: any;
    };
};

declare const ChatModelC1ConfigSchema: (maxTemperature: number, defaultTemperature: number, maxOutputTokens: number, maxSequences: number, defaultTopP: number, defaultTopK: number) => z.ZodObject<{
    temperature: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    maxTokens: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    stop: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    topP: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    topK: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    frequencyPenalty: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    presencePenalty: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    seed: z.ZodEffects<z.ZodOptional<z.ZodDefault<z.ZodNumber>>, number | undefined, number | undefined>;
    toolChoice: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodEnum<[string, ...string[]]>>>>;
    safetySettings: z.ZodOptional<z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, {
        [x: string]: any;
    }, {
        [x: string]: any;
    }>>;
}, "strip", z.ZodTypeAny, {
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    seed?: number | undefined;
    toolChoice?: string | null | undefined;
    safetySettings?: {
        [x: string]: any;
    } | undefined;
    temperature?: number | undefined;
    topP?: number | undefined;
    topK?: number | undefined;
    maxTokens?: number | undefined;
    stop?: string[] | undefined;
}, {
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    seed?: number | undefined;
    toolChoice?: string | null | undefined;
    safetySettings?: {
        [x: string]: any;
    } | undefined;
    temperature?: number | undefined;
    topP?: number | undefined;
    topK?: number | undefined;
    maxTokens?: number | undefined;
    stop?: string[] | undefined;
}>;
declare const ChatModelC1ConfigDef: (maxTemperature: number, defaultTemperature: number, maxOutputTokens: number, maxSequences: number, defaultTopP: number, defaultTopK: number) => {
    readonly temperature: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly maxTokens: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly stop: {
        type: "multi-string";
        param: string;
        title: string;
        description: string;
        max: number;
    };
    readonly topP: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly topK: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly frequencyPenalty: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly presencePenalty: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly seed: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly toolChoice: {
        type: "select-string";
        param: string;
        title: string;
        description: string;
        default: string;
        choices: string[];
    };
    readonly safetySettings: {
        type: "object-schema";
        param: string;
        title: string;
        description: string;
        objectSchema?: any;
    };
};

declare const temperature: (max: number, _default: number) => {
    def: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    schema: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
};
declare const maxTokens: (maxOutputTokens: number) => {
    def: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    schema: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
};
declare const stop: (maxSequences: number) => {
    def: {
        type: "multi-string";
        param: string;
        title: string;
        description: string;
        max: number;
    };
    schema: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
};
declare const topP: (_default: number) => {
    def: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    schema: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
};
declare const topK: (_default: number) => {
    def: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    schema: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
};
declare const frequencyPenalty: {
    def: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    schema: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
};
declare const presencePenalty: {
    def: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    schema: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
};
declare const seed: {
    def: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    schema: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
};
declare const toolChoice: {
    def: {
        type: "select-string";
        param: string;
        title: string;
        description: string;
        default: string;
        choices: string[];
    };
    schema: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodEnum<[string, ...string[]]>>>>;
};
declare const safetySettings: {
    def: {
        type: "object-schema";
        param: string;
        title: string;
        description: string;
        objectSchema?: any;
    };
    schema: z.ZodOptional<z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, {
        [x: string]: any;
    }, {
        [x: string]: any;
    }>>;
};
declare const reasoningEnabled: {
    def: {
        type: "select-boolean";
        param: string;
        title: string;
        description: string;
        default: boolean | null;
    };
    schema: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodBoolean>>>;
};

declare const ChatModelReasoningConfigSchema: (maxTemperature: number, defaultTemperature: number, maxOutputTokens: number, maxSequences: number, defaultTopP: number, defaultTopK: number) => z.ZodObject<{
    temperature: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    maxTokens: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    stop: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    topP: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    topK: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    frequencyPenalty: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    presencePenalty: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    seed: z.ZodEffects<z.ZodOptional<z.ZodDefault<z.ZodNumber>>, number | undefined, number | undefined>;
    toolChoice: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodEnum<[string, ...string[]]>>>>;
    safetySettings: z.ZodOptional<z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, {
        [x: string]: any;
    }, {
        [x: string]: any;
    }>>;
    reasoningEnabled: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodBoolean>>>;
}, "strip", z.ZodTypeAny, {
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    seed?: number | undefined;
    toolChoice?: string | null | undefined;
    safetySettings?: {
        [x: string]: any;
    } | undefined;
    reasoningEnabled?: boolean | null | undefined;
    temperature?: number | undefined;
    topP?: number | undefined;
    topK?: number | undefined;
    maxTokens?: number | undefined;
    stop?: string[] | undefined;
}, {
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    seed?: number | undefined;
    toolChoice?: string | null | undefined;
    safetySettings?: {
        [x: string]: any;
    } | undefined;
    reasoningEnabled?: boolean | null | undefined;
    temperature?: number | undefined;
    topP?: number | undefined;
    topK?: number | undefined;
    maxTokens?: number | undefined;
    stop?: string[] | undefined;
}>;
declare const ChatModelReasoningConfigDef: (maxTemperature: number, defaultTemperature: number, maxOutputTokens: number, maxSequences: number, defaultTopP: number, defaultTopK: number) => {
    readonly temperature: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly maxTokens: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly stop: {
        type: "multi-string";
        param: string;
        title: string;
        description: string;
        max: number;
    };
    readonly topP: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly topK: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly frequencyPenalty: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly presencePenalty: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly seed: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly toolChoice: {
        type: "select-string";
        param: string;
        title: string;
        description: string;
        default: string;
        choices: string[];
    };
    readonly safetySettings: {
        type: "object-schema";
        param: string;
        title: string;
        description: string;
        objectSchema?: any;
    };
    readonly reasoningEnabled: {
        type: "select-boolean";
        param: string;
        title: string;
        description: string;
        default: boolean | null;
    };
};

declare const EmbeddingModelBaseConfigSchema: (maxDimensions: number) => z.ZodObject<{
    dimensions: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    dimensions?: number | undefined;
}, {
    dimensions?: number | undefined;
}>;
declare const EmbeddingModelBaseConfigDef: (maxDimensions: number) => {
    readonly dimensions: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
};

declare const dimensions: (maxDimensions: number) => {
    def: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    schema: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
};

declare const GoogleChatModelRoles: z.ZodEnum<["system", "user", "assistant", "tool"]>;
declare const GoogleChatAssistantRoleLiteral = "model";
declare const GoogleChatToolRoleLiteral = "function";
declare const GoogleChatModelRolesMap: {
    readonly system: "user";
    readonly user: "user";
    readonly assistant: "model";
    readonly tool: "function";
};

declare const GoogleChatModelModalities: ChatModelSchemaType["modalities"];
declare const GoogleChatModelModalitiesEnum: z.ZodEnum<["text", "image", "tool-call", "tool-response"]>;
declare const GoogleChatModelTextModalities: ChatModelSchemaType["modalities"];
declare const GoogleChatModelTextModalitiesEnum: z.ZodEnum<["text"]>;
declare const GoogleChatModelTextVisionModalities: ChatModelSchemaType["modalities"];
declare const GoogleChatModelTextVisionModalitiesEnum: z.ZodEnum<["text", "image"]>;
declare const GoogleChatModelTextToolModalities: ChatModelSchemaType["modalities"];
declare const GoogleChatModelTextToolModalitiesEnum: z.ZodEnum<["text", "tool-call", "tool-response"]>;

declare const GoogleCompleteChatTextResponse: z.ZodObject<{
    text: z.ZodString;
}, "strip", z.ZodTypeAny, {
    text: string;
}, {
    text: string;
}>;
declare const GoogleCompleteChatToolResponse: z.ZodObject<{
    functionCall: z.ZodObject<{
        name: z.ZodString;
        args: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        args: Record<string, any>;
    }, {
        name: string;
        args: Record<string, any>;
    }>;
}, "strip", z.ZodTypeAny, {
    functionCall: {
        name: string;
        args: Record<string, any>;
    };
}, {
    functionCall: {
        name: string;
        args: Record<string, any>;
    };
}>;
declare const GoogleCompleteChatResponse: z.ZodObject<{
    candidates: z.ZodArray<z.ZodObject<{
        content: z.ZodOptional<z.ZodObject<{
            role: z.ZodString;
            parts: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                text: string;
            }, {
                text: string;
            }>, z.ZodObject<{
                functionCall: z.ZodObject<{
                    name: z.ZodString;
                    args: z.ZodRecord<z.ZodString, z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    args: Record<string, any>;
                }, {
                    name: string;
                    args: Record<string, any>;
                }>;
            }, "strip", z.ZodTypeAny, {
                functionCall: {
                    name: string;
                    args: Record<string, any>;
                };
            }, {
                functionCall: {
                    name: string;
                    args: Record<string, any>;
                };
            }>]>, "many">;
        }, "strip", z.ZodTypeAny, {
            role: string;
            parts: ({
                text: string;
            } | {
                functionCall: {
                    name: string;
                    args: Record<string, any>;
                };
            })[];
        }, {
            role: string;
            parts: ({
                text: string;
            } | {
                functionCall: {
                    name: string;
                    args: Record<string, any>;
                };
            })[];
        }>>;
        finishReason: z.ZodString;
        index: z.ZodOptional<z.ZodNumber>;
        safetyRatings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodString;
            probability: z.ZodString;
            blocked: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            category: string;
            probability: string;
            blocked?: boolean | undefined;
        }, {
            category: string;
            probability: string;
            blocked?: boolean | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        finishReason: string;
        content?: {
            role: string;
            parts: ({
                text: string;
            } | {
                functionCall: {
                    name: string;
                    args: Record<string, any>;
                };
            })[];
        } | undefined;
        index?: number | undefined;
        safetyRatings?: {
            category: string;
            probability: string;
            blocked?: boolean | undefined;
        }[] | undefined;
    }, {
        finishReason: string;
        content?: {
            role: string;
            parts: ({
                text: string;
            } | {
                functionCall: {
                    name: string;
                    args: Record<string, any>;
                };
            })[];
        } | undefined;
        index?: number | undefined;
        safetyRatings?: {
            category: string;
            probability: string;
            blocked?: boolean | undefined;
        }[] | undefined;
    }>, "many">;
    promptFeedback: z.ZodOptional<z.ZodObject<{
        safetyRatings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodString;
            probability: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            category: string;
            probability: string;
        }, {
            category: string;
            probability: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        safetyRatings?: {
            category: string;
            probability: string;
        }[] | undefined;
    }, {
        safetyRatings?: {
            category: string;
            probability: string;
        }[] | undefined;
    }>>;
    usageMetadata: z.ZodOptional<z.ZodObject<{
        promptTokenCount: z.ZodNumber;
        cachedContentTokenCount: z.ZodOptional<z.ZodNumber>;
        candidatesTokenCount: z.ZodOptional<z.ZodNumber>;
        totalTokenCount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        promptTokenCount: number;
        totalTokenCount: number;
        cachedContentTokenCount?: number | undefined;
        candidatesTokenCount?: number | undefined;
    }, {
        promptTokenCount: number;
        totalTokenCount: number;
        cachedContentTokenCount?: number | undefined;
        candidatesTokenCount?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    candidates: {
        finishReason: string;
        content?: {
            role: string;
            parts: ({
                text: string;
            } | {
                functionCall: {
                    name: string;
                    args: Record<string, any>;
                };
            })[];
        } | undefined;
        index?: number | undefined;
        safetyRatings?: {
            category: string;
            probability: string;
            blocked?: boolean | undefined;
        }[] | undefined;
    }[];
    promptFeedback?: {
        safetyRatings?: {
            category: string;
            probability: string;
        }[] | undefined;
    } | undefined;
    usageMetadata?: {
        promptTokenCount: number;
        totalTokenCount: number;
        cachedContentTokenCount?: number | undefined;
        candidatesTokenCount?: number | undefined;
    } | undefined;
}, {
    candidates: {
        finishReason: string;
        content?: {
            role: string;
            parts: ({
                text: string;
            } | {
                functionCall: {
                    name: string;
                    args: Record<string, any>;
                };
            })[];
        } | undefined;
        index?: number | undefined;
        safetyRatings?: {
            category: string;
            probability: string;
            blocked?: boolean | undefined;
        }[] | undefined;
    }[];
    promptFeedback?: {
        safetyRatings?: {
            category: string;
            probability: string;
        }[] | undefined;
    } | undefined;
    usageMetadata?: {
        promptTokenCount: number;
        totalTokenCount: number;
        cachedContentTokenCount?: number | undefined;
        candidatesTokenCount?: number | undefined;
    } | undefined;
}>;
type GoogleCompleteChatResponseType = z.infer<typeof GoogleCompleteChatResponse>;
declare const GoogleStreamChatTextResponse: z.ZodObject<{
    text: z.ZodString;
}, "strip", z.ZodTypeAny, {
    text: string;
}, {
    text: string;
}>;
declare const GoogleStreamChatToolResponse: z.ZodObject<{
    functionCall: z.ZodObject<{
        name: z.ZodString;
        args: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        args: Record<string, any>;
    }, {
        name: string;
        args: Record<string, any>;
    }>;
}, "strip", z.ZodTypeAny, {
    functionCall: {
        name: string;
        args: Record<string, any>;
    };
}, {
    functionCall: {
        name: string;
        args: Record<string, any>;
    };
}>;
declare const GoogleStreamChatResponse: z.ZodObject<{
    candidates: z.ZodArray<z.ZodObject<{
        content: z.ZodOptional<z.ZodObject<{
            role: z.ZodString;
            parts: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                text: string;
            }, {
                text: string;
            }>, z.ZodObject<{
                functionCall: z.ZodObject<{
                    name: z.ZodString;
                    args: z.ZodRecord<z.ZodString, z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    args: Record<string, any>;
                }, {
                    name: string;
                    args: Record<string, any>;
                }>;
            }, "strip", z.ZodTypeAny, {
                functionCall: {
                    name: string;
                    args: Record<string, any>;
                };
            }, {
                functionCall: {
                    name: string;
                    args: Record<string, any>;
                };
            }>]>, "many">;
        }, "strip", z.ZodTypeAny, {
            role: string;
            parts: ({
                text: string;
            } | {
                functionCall: {
                    name: string;
                    args: Record<string, any>;
                };
            })[];
        }, {
            role: string;
            parts: ({
                text: string;
            } | {
                functionCall: {
                    name: string;
                    args: Record<string, any>;
                };
            })[];
        }>>;
        finishReason: z.ZodOptional<z.ZodString>;
        index: z.ZodOptional<z.ZodNumber>;
        safetyRatings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodString;
            probability: z.ZodString;
            blocked: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            category: string;
            probability: string;
            blocked?: boolean | undefined;
        }, {
            category: string;
            probability: string;
            blocked?: boolean | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        content?: {
            role: string;
            parts: ({
                text: string;
            } | {
                functionCall: {
                    name: string;
                    args: Record<string, any>;
                };
            })[];
        } | undefined;
        index?: number | undefined;
        finishReason?: string | undefined;
        safetyRatings?: {
            category: string;
            probability: string;
            blocked?: boolean | undefined;
        }[] | undefined;
    }, {
        content?: {
            role: string;
            parts: ({
                text: string;
            } | {
                functionCall: {
                    name: string;
                    args: Record<string, any>;
                };
            })[];
        } | undefined;
        index?: number | undefined;
        finishReason?: string | undefined;
        safetyRatings?: {
            category: string;
            probability: string;
            blocked?: boolean | undefined;
        }[] | undefined;
    }>, "many">;
    promptFeedback: z.ZodOptional<z.ZodObject<{
        safetyRatings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodString;
            probability: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            category: string;
            probability: string;
        }, {
            category: string;
            probability: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        safetyRatings?: {
            category: string;
            probability: string;
        }[] | undefined;
    }, {
        safetyRatings?: {
            category: string;
            probability: string;
        }[] | undefined;
    }>>;
    usageMetadata: z.ZodOptional<z.ZodObject<{
        promptTokenCount: z.ZodOptional<z.ZodNumber>;
        cachedContentTokenCount: z.ZodOptional<z.ZodNumber>;
        candidatesTokenCount: z.ZodOptional<z.ZodNumber>;
        totalTokenCount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        promptTokenCount?: number | undefined;
        cachedContentTokenCount?: number | undefined;
        candidatesTokenCount?: number | undefined;
        totalTokenCount?: number | undefined;
    }, {
        promptTokenCount?: number | undefined;
        cachedContentTokenCount?: number | undefined;
        candidatesTokenCount?: number | undefined;
        totalTokenCount?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    candidates: {
        content?: {
            role: string;
            parts: ({
                text: string;
            } | {
                functionCall: {
                    name: string;
                    args: Record<string, any>;
                };
            })[];
        } | undefined;
        index?: number | undefined;
        finishReason?: string | undefined;
        safetyRatings?: {
            category: string;
            probability: string;
            blocked?: boolean | undefined;
        }[] | undefined;
    }[];
    promptFeedback?: {
        safetyRatings?: {
            category: string;
            probability: string;
        }[] | undefined;
    } | undefined;
    usageMetadata?: {
        promptTokenCount?: number | undefined;
        cachedContentTokenCount?: number | undefined;
        candidatesTokenCount?: number | undefined;
        totalTokenCount?: number | undefined;
    } | undefined;
}, {
    candidates: {
        content?: {
            role: string;
            parts: ({
                text: string;
            } | {
                functionCall: {
                    name: string;
                    args: Record<string, any>;
                };
            })[];
        } | undefined;
        index?: number | undefined;
        finishReason?: string | undefined;
        safetyRatings?: {
            category: string;
            probability: string;
            blocked?: boolean | undefined;
        }[] | undefined;
    }[];
    promptFeedback?: {
        safetyRatings?: {
            category: string;
            probability: string;
        }[] | undefined;
    } | undefined;
    usageMetadata?: {
        promptTokenCount?: number | undefined;
        cachedContentTokenCount?: number | undefined;
        candidatesTokenCount?: number | undefined;
        totalTokenCount?: number | undefined;
    } | undefined;
}>;
type GoogleStreamChatResponseType = z.infer<typeof GoogleStreamChatResponse>;

declare const GoogleChatContentPartText: z.ZodObject<{
    text: z.ZodString;
}, "strip", z.ZodTypeAny, {
    text: string;
}, {
    text: string;
}>;
type GoogleChatContentPartTextType = z.infer<typeof GoogleChatContentPartText>;
declare const GoogleChatContentPartInlineData: z.ZodObject<{
    inline_data: z.ZodObject<{
        mime_type: z.ZodString;
        data: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        data: string;
        mime_type: string;
    }, {
        data: string;
        mime_type: string;
    }>;
}, "strip", z.ZodTypeAny, {
    inline_data: {
        data: string;
        mime_type: string;
    };
}, {
    inline_data: {
        data: string;
        mime_type: string;
    };
}>;
type GoogleChatContentPartInlineDataType = z.infer<typeof GoogleChatContentPartInlineData>;
declare const GoogleChatContentPartFunctionCall: z.ZodObject<{
    function_call: z.ZodObject<{
        name: z.ZodString;
        args: z.ZodRecord<z.ZodString, z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        args: Record<string, string>;
    }, {
        name: string;
        args: Record<string, string>;
    }>;
}, "strip", z.ZodTypeAny, {
    function_call: {
        name: string;
        args: Record<string, string>;
    };
}, {
    function_call: {
        name: string;
        args: Record<string, string>;
    };
}>;
type GoogleChatContentPartFunctionCallType = z.infer<typeof GoogleChatContentPartFunctionCall>;
declare const GoogleChatContentPartFunctionResponse: z.ZodObject<{
    function_response: z.ZodObject<{
        name: z.ZodString;
        response: z.ZodRecord<z.ZodString, z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        response: Record<string, string>;
    }, {
        name: string;
        response: Record<string, string>;
    }>;
}, "strip", z.ZodTypeAny, {
    function_response: {
        name: string;
        response: Record<string, string>;
    };
}, {
    function_response: {
        name: string;
        response: Record<string, string>;
    };
}>;
type GoogleChatContentPartFunctionResponseType = z.infer<typeof GoogleChatContentPartFunctionResponse>;
declare const GoogleChatContent: z.ZodObject<{
    role: z.ZodEnum<["user", "model", "function"]>;
    parts: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        text: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        text: string;
    }, {
        text: string;
    }>, z.ZodObject<{
        inline_data: z.ZodObject<{
            mime_type: z.ZodString;
            data: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            data: string;
            mime_type: string;
        }, {
            data: string;
            mime_type: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        inline_data: {
            data: string;
            mime_type: string;
        };
    }, {
        inline_data: {
            data: string;
            mime_type: string;
        };
    }>, z.ZodObject<{
        function_call: z.ZodObject<{
            name: z.ZodString;
            args: z.ZodRecord<z.ZodString, z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            args: Record<string, string>;
        }, {
            name: string;
            args: Record<string, string>;
        }>;
    }, "strip", z.ZodTypeAny, {
        function_call: {
            name: string;
            args: Record<string, string>;
        };
    }, {
        function_call: {
            name: string;
            args: Record<string, string>;
        };
    }>, z.ZodObject<{
        function_response: z.ZodObject<{
            name: z.ZodString;
            response: z.ZodRecord<z.ZodString, z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            response: Record<string, string>;
        }, {
            name: string;
            response: Record<string, string>;
        }>;
    }, "strip", z.ZodTypeAny, {
        function_response: {
            name: string;
            response: Record<string, string>;
        };
    }, {
        function_response: {
            name: string;
            response: Record<string, string>;
        };
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    role: "function" | "user" | "model";
    parts: ({
        text: string;
    } | {
        inline_data: {
            data: string;
            mime_type: string;
        };
    } | {
        function_call: {
            name: string;
            args: Record<string, string>;
        };
    } | {
        function_response: {
            name: string;
            response: Record<string, string>;
        };
    })[];
}, {
    role: "function" | "user" | "model";
    parts: ({
        text: string;
    } | {
        inline_data: {
            data: string;
            mime_type: string;
        };
    } | {
        function_call: {
            name: string;
            args: Record<string, string>;
        };
    } | {
        function_response: {
            name: string;
            response: Record<string, string>;
        };
    })[];
}>;
type GoogleChatContentType = z.infer<typeof GoogleChatContent>;
declare const GoogleChatSystemInstruction: z.ZodObject<{
    parts: z.ZodArray<z.ZodObject<{
        text: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        text: string;
    }, {
        text: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    parts: {
        text: string;
    }[];
}, {
    parts: {
        text: string;
    }[];
}>;
type GoogleChatSystemInstructionType = z.infer<typeof GoogleChatSystemInstruction>;
declare const GoogleChatTool: z.ZodObject<{
    name: z.ZodString;
    description: z.ZodString;
    parameters: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    description: string;
    name: string;
    parameters?: any;
}, {
    description: string;
    name: string;
    parameters?: any;
}>;
type GoogleChatToolType = z.infer<typeof GoogleChatTool>;
declare const GoogleChatToolConfig: z.ZodObject<{
    function_calling_config: z.ZodObject<{
        mode: z.ZodEnum<["ANY", "AUTO", "NONE"]>;
        allowed_function_names: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        mode: "ANY" | "AUTO" | "NONE";
        allowed_function_names?: string[] | undefined;
    }, {
        mode: "ANY" | "AUTO" | "NONE";
        allowed_function_names?: string[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    function_calling_config: {
        mode: "ANY" | "AUTO" | "NONE";
        allowed_function_names?: string[] | undefined;
    };
}, {
    function_calling_config: {
        mode: "ANY" | "AUTO" | "NONE";
        allowed_function_names?: string[] | undefined;
    };
}>;
type GoogleChatToolConfigType = z.infer<typeof GoogleChatToolConfig>;
declare const GoogleChatGenerationConfig: z.ZodObject<{
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    temperature: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    presencePenalty: z.ZodOptional<z.ZodNumber>;
    frequencyPenalty: z.ZodOptional<z.ZodNumber>;
    seed: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    seed?: number | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    stopSequences?: string[] | undefined;
    topP?: number | undefined;
    topK?: number | undefined;
}, {
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    seed?: number | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    stopSequences?: string[] | undefined;
    topP?: number | undefined;
    topK?: number | undefined;
}>;
type GoogleChatGenerationConfigType = z.infer<typeof GoogleChatGenerationConfig>;
declare const GoogleChatSafetySettings: z.ZodObject<{
    category: z.ZodEnum<["HARM_CATEGORY_HARASSMENT", "HARM_CATEGORY_HATE_SPEECH", "HARM_CATEGORY_SEXUALLY_EXPLICIT", "HARM_CATEGORY_DANGEROUS_CONTENT", "HARM_CATEGORY_CIVIC_INTEGRITY"]>;
    threshold: z.ZodEnum<["HARM_BLOCK_THRESHOLD_UNSPECIFIED", "BLOCK_LOW_AND_ABOVE", "BLOCK_MEDIUM_AND_ABOVE", "BLOCK_ONLY_HIGH", "BLOCK_NONE", "OFF"]>;
}, "strip", z.ZodTypeAny, {
    threshold: "HARM_BLOCK_THRESHOLD_UNSPECIFIED" | "BLOCK_LOW_AND_ABOVE" | "BLOCK_MEDIUM_AND_ABOVE" | "BLOCK_ONLY_HIGH" | "BLOCK_NONE" | "OFF";
    category: "HARM_CATEGORY_HARASSMENT" | "HARM_CATEGORY_HATE_SPEECH" | "HARM_CATEGORY_SEXUALLY_EXPLICIT" | "HARM_CATEGORY_DANGEROUS_CONTENT" | "HARM_CATEGORY_CIVIC_INTEGRITY";
}, {
    threshold: "HARM_BLOCK_THRESHOLD_UNSPECIFIED" | "BLOCK_LOW_AND_ABOVE" | "BLOCK_MEDIUM_AND_ABOVE" | "BLOCK_ONLY_HIGH" | "BLOCK_NONE" | "OFF";
    category: "HARM_CATEGORY_HARASSMENT" | "HARM_CATEGORY_HATE_SPEECH" | "HARM_CATEGORY_SEXUALLY_EXPLICIT" | "HARM_CATEGORY_DANGEROUS_CONTENT" | "HARM_CATEGORY_CIVIC_INTEGRITY";
}>;
type GoogleChatSafetySettingsType = z.infer<typeof GoogleChatSafetySettings>;
declare const GoogleChatRequest: z.ZodObject<{
    model: z.ZodOptional<z.ZodString>;
    contents: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["user", "model", "function"]>;
        parts: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            text: string;
        }, {
            text: string;
        }>, z.ZodObject<{
            inline_data: z.ZodObject<{
                mime_type: z.ZodString;
                data: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                data: string;
                mime_type: string;
            }, {
                data: string;
                mime_type: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            inline_data: {
                data: string;
                mime_type: string;
            };
        }, {
            inline_data: {
                data: string;
                mime_type: string;
            };
        }>, z.ZodObject<{
            function_call: z.ZodObject<{
                name: z.ZodString;
                args: z.ZodRecord<z.ZodString, z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                args: Record<string, string>;
            }, {
                name: string;
                args: Record<string, string>;
            }>;
        }, "strip", z.ZodTypeAny, {
            function_call: {
                name: string;
                args: Record<string, string>;
            };
        }, {
            function_call: {
                name: string;
                args: Record<string, string>;
            };
        }>, z.ZodObject<{
            function_response: z.ZodObject<{
                name: z.ZodString;
                response: z.ZodRecord<z.ZodString, z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                response: Record<string, string>;
            }, {
                name: string;
                response: Record<string, string>;
            }>;
        }, "strip", z.ZodTypeAny, {
            function_response: {
                name: string;
                response: Record<string, string>;
            };
        }, {
            function_response: {
                name: string;
                response: Record<string, string>;
            };
        }>]>, "many">;
    }, "strip", z.ZodTypeAny, {
        role: "function" | "user" | "model";
        parts: ({
            text: string;
        } | {
            inline_data: {
                data: string;
                mime_type: string;
            };
        } | {
            function_call: {
                name: string;
                args: Record<string, string>;
            };
        } | {
            function_response: {
                name: string;
                response: Record<string, string>;
            };
        })[];
    }, {
        role: "function" | "user" | "model";
        parts: ({
            text: string;
        } | {
            inline_data: {
                data: string;
                mime_type: string;
            };
        } | {
            function_call: {
                name: string;
                args: Record<string, string>;
            };
        } | {
            function_response: {
                name: string;
                response: Record<string, string>;
            };
        })[];
    }>, "many">;
    systemInstruction: z.ZodOptional<z.ZodObject<{
        parts: z.ZodArray<z.ZodObject<{
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            text: string;
        }, {
            text: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        parts: {
            text: string;
        }[];
    }, {
        parts: {
            text: string;
        }[];
    }>>;
    system_instruction: z.ZodOptional<z.ZodObject<{
        parts: z.ZodArray<z.ZodObject<{
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            text: string;
        }, {
            text: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        parts: {
            text: string;
        }[];
    }, {
        parts: {
            text: string;
        }[];
    }>>;
    generationConfig: z.ZodOptional<z.ZodObject<{
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        presencePenalty: z.ZodOptional<z.ZodNumber>;
        frequencyPenalty: z.ZodOptional<z.ZodNumber>;
        seed: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
        seed?: number | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
    }, {
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
        seed?: number | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
    }>>;
    generation_config: z.ZodOptional<z.ZodObject<{
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        presencePenalty: z.ZodOptional<z.ZodNumber>;
        frequencyPenalty: z.ZodOptional<z.ZodNumber>;
        seed: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
        seed?: number | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
    }, {
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
        seed?: number | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
    }>>;
    safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
        category: z.ZodEnum<["HARM_CATEGORY_HARASSMENT", "HARM_CATEGORY_HATE_SPEECH", "HARM_CATEGORY_SEXUALLY_EXPLICIT", "HARM_CATEGORY_DANGEROUS_CONTENT", "HARM_CATEGORY_CIVIC_INTEGRITY"]>;
        threshold: z.ZodEnum<["HARM_BLOCK_THRESHOLD_UNSPECIFIED", "BLOCK_LOW_AND_ABOVE", "BLOCK_MEDIUM_AND_ABOVE", "BLOCK_ONLY_HIGH", "BLOCK_NONE", "OFF"]>;
    }, "strip", z.ZodTypeAny, {
        threshold: "HARM_BLOCK_THRESHOLD_UNSPECIFIED" | "BLOCK_LOW_AND_ABOVE" | "BLOCK_MEDIUM_AND_ABOVE" | "BLOCK_ONLY_HIGH" | "BLOCK_NONE" | "OFF";
        category: "HARM_CATEGORY_HARASSMENT" | "HARM_CATEGORY_HATE_SPEECH" | "HARM_CATEGORY_SEXUALLY_EXPLICIT" | "HARM_CATEGORY_DANGEROUS_CONTENT" | "HARM_CATEGORY_CIVIC_INTEGRITY";
    }, {
        threshold: "HARM_BLOCK_THRESHOLD_UNSPECIFIED" | "BLOCK_LOW_AND_ABOVE" | "BLOCK_MEDIUM_AND_ABOVE" | "BLOCK_ONLY_HIGH" | "BLOCK_NONE" | "OFF";
        category: "HARM_CATEGORY_HARASSMENT" | "HARM_CATEGORY_HATE_SPEECH" | "HARM_CATEGORY_SEXUALLY_EXPLICIT" | "HARM_CATEGORY_DANGEROUS_CONTENT" | "HARM_CATEGORY_CIVIC_INTEGRITY";
    }>, "many">>;
    safety_settings: z.ZodOptional<z.ZodArray<z.ZodObject<{
        category: z.ZodEnum<["HARM_CATEGORY_HARASSMENT", "HARM_CATEGORY_HATE_SPEECH", "HARM_CATEGORY_SEXUALLY_EXPLICIT", "HARM_CATEGORY_DANGEROUS_CONTENT", "HARM_CATEGORY_CIVIC_INTEGRITY"]>;
        threshold: z.ZodEnum<["HARM_BLOCK_THRESHOLD_UNSPECIFIED", "BLOCK_LOW_AND_ABOVE", "BLOCK_MEDIUM_AND_ABOVE", "BLOCK_ONLY_HIGH", "BLOCK_NONE", "OFF"]>;
    }, "strip", z.ZodTypeAny, {
        threshold: "HARM_BLOCK_THRESHOLD_UNSPECIFIED" | "BLOCK_LOW_AND_ABOVE" | "BLOCK_MEDIUM_AND_ABOVE" | "BLOCK_ONLY_HIGH" | "BLOCK_NONE" | "OFF";
        category: "HARM_CATEGORY_HARASSMENT" | "HARM_CATEGORY_HATE_SPEECH" | "HARM_CATEGORY_SEXUALLY_EXPLICIT" | "HARM_CATEGORY_DANGEROUS_CONTENT" | "HARM_CATEGORY_CIVIC_INTEGRITY";
    }, {
        threshold: "HARM_BLOCK_THRESHOLD_UNSPECIFIED" | "BLOCK_LOW_AND_ABOVE" | "BLOCK_MEDIUM_AND_ABOVE" | "BLOCK_ONLY_HIGH" | "BLOCK_NONE" | "OFF";
        category: "HARM_CATEGORY_HARASSMENT" | "HARM_CATEGORY_HATE_SPEECH" | "HARM_CATEGORY_SEXUALLY_EXPLICIT" | "HARM_CATEGORY_DANGEROUS_CONTENT" | "HARM_CATEGORY_CIVIC_INTEGRITY";
    }>, "many">>;
    tools: z.ZodOptional<z.ZodObject<{
        function_declarations: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodString;
            parameters: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            description: string;
            name: string;
            parameters?: any;
        }, {
            description: string;
            name: string;
            parameters?: any;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        function_declarations: {
            description: string;
            name: string;
            parameters?: any;
        }[];
    }, {
        function_declarations: {
            description: string;
            name: string;
            parameters?: any;
        }[];
    }>>;
    toolConfig: z.ZodOptional<z.ZodObject<{
        function_calling_config: z.ZodObject<{
            mode: z.ZodEnum<["ANY", "AUTO", "NONE"]>;
            allowed_function_names: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            mode: "ANY" | "AUTO" | "NONE";
            allowed_function_names?: string[] | undefined;
        }, {
            mode: "ANY" | "AUTO" | "NONE";
            allowed_function_names?: string[] | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        function_calling_config: {
            mode: "ANY" | "AUTO" | "NONE";
            allowed_function_names?: string[] | undefined;
        };
    }, {
        function_calling_config: {
            mode: "ANY" | "AUTO" | "NONE";
            allowed_function_names?: string[] | undefined;
        };
    }>>;
    tool_config: z.ZodOptional<z.ZodObject<{
        function_calling_config: z.ZodObject<{
            mode: z.ZodEnum<["ANY", "AUTO", "NONE"]>;
            allowed_function_names: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            mode: "ANY" | "AUTO" | "NONE";
            allowed_function_names?: string[] | undefined;
        }, {
            mode: "ANY" | "AUTO" | "NONE";
            allowed_function_names?: string[] | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        function_calling_config: {
            mode: "ANY" | "AUTO" | "NONE";
            allowed_function_names?: string[] | undefined;
        };
    }, {
        function_calling_config: {
            mode: "ANY" | "AUTO" | "NONE";
            allowed_function_names?: string[] | undefined;
        };
    }>>;
}, "strip", z.ZodTypeAny, {
    contents: {
        role: "function" | "user" | "model";
        parts: ({
            text: string;
        } | {
            inline_data: {
                data: string;
                mime_type: string;
            };
        } | {
            function_call: {
                name: string;
                args: Record<string, string>;
            };
        } | {
            function_response: {
                name: string;
                response: Record<string, string>;
            };
        })[];
    }[];
    safetySettings?: {
        threshold: "HARM_BLOCK_THRESHOLD_UNSPECIFIED" | "BLOCK_LOW_AND_ABOVE" | "BLOCK_MEDIUM_AND_ABOVE" | "BLOCK_ONLY_HIGH" | "BLOCK_NONE" | "OFF";
        category: "HARM_CATEGORY_HARASSMENT" | "HARM_CATEGORY_HATE_SPEECH" | "HARM_CATEGORY_SEXUALLY_EXPLICIT" | "HARM_CATEGORY_DANGEROUS_CONTENT" | "HARM_CATEGORY_CIVIC_INTEGRITY";
    }[] | undefined;
    model?: string | undefined;
    systemInstruction?: {
        parts: {
            text: string;
        }[];
    } | undefined;
    system_instruction?: {
        parts: {
            text: string;
        }[];
    } | undefined;
    generationConfig?: {
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
        seed?: number | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
    } | undefined;
    generation_config?: {
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
        seed?: number | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
    } | undefined;
    safety_settings?: {
        threshold: "HARM_BLOCK_THRESHOLD_UNSPECIFIED" | "BLOCK_LOW_AND_ABOVE" | "BLOCK_MEDIUM_AND_ABOVE" | "BLOCK_ONLY_HIGH" | "BLOCK_NONE" | "OFF";
        category: "HARM_CATEGORY_HARASSMENT" | "HARM_CATEGORY_HATE_SPEECH" | "HARM_CATEGORY_SEXUALLY_EXPLICIT" | "HARM_CATEGORY_DANGEROUS_CONTENT" | "HARM_CATEGORY_CIVIC_INTEGRITY";
    }[] | undefined;
    tools?: {
        function_declarations: {
            description: string;
            name: string;
            parameters?: any;
        }[];
    } | undefined;
    toolConfig?: {
        function_calling_config: {
            mode: "ANY" | "AUTO" | "NONE";
            allowed_function_names?: string[] | undefined;
        };
    } | undefined;
    tool_config?: {
        function_calling_config: {
            mode: "ANY" | "AUTO" | "NONE";
            allowed_function_names?: string[] | undefined;
        };
    } | undefined;
}, {
    contents: {
        role: "function" | "user" | "model";
        parts: ({
            text: string;
        } | {
            inline_data: {
                data: string;
                mime_type: string;
            };
        } | {
            function_call: {
                name: string;
                args: Record<string, string>;
            };
        } | {
            function_response: {
                name: string;
                response: Record<string, string>;
            };
        })[];
    }[];
    safetySettings?: {
        threshold: "HARM_BLOCK_THRESHOLD_UNSPECIFIED" | "BLOCK_LOW_AND_ABOVE" | "BLOCK_MEDIUM_AND_ABOVE" | "BLOCK_ONLY_HIGH" | "BLOCK_NONE" | "OFF";
        category: "HARM_CATEGORY_HARASSMENT" | "HARM_CATEGORY_HATE_SPEECH" | "HARM_CATEGORY_SEXUALLY_EXPLICIT" | "HARM_CATEGORY_DANGEROUS_CONTENT" | "HARM_CATEGORY_CIVIC_INTEGRITY";
    }[] | undefined;
    model?: string | undefined;
    systemInstruction?: {
        parts: {
            text: string;
        }[];
    } | undefined;
    system_instruction?: {
        parts: {
            text: string;
        }[];
    } | undefined;
    generationConfig?: {
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
        seed?: number | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
    } | undefined;
    generation_config?: {
        frequencyPenalty?: number | undefined;
        presencePenalty?: number | undefined;
        seed?: number | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
    } | undefined;
    safety_settings?: {
        threshold: "HARM_BLOCK_THRESHOLD_UNSPECIFIED" | "BLOCK_LOW_AND_ABOVE" | "BLOCK_MEDIUM_AND_ABOVE" | "BLOCK_ONLY_HIGH" | "BLOCK_NONE" | "OFF";
        category: "HARM_CATEGORY_HARASSMENT" | "HARM_CATEGORY_HATE_SPEECH" | "HARM_CATEGORY_SEXUALLY_EXPLICIT" | "HARM_CATEGORY_DANGEROUS_CONTENT" | "HARM_CATEGORY_CIVIC_INTEGRITY";
    }[] | undefined;
    tools?: {
        function_declarations: {
            description: string;
            name: string;
            parameters?: any;
        }[];
    } | undefined;
    toolConfig?: {
        function_calling_config: {
            mode: "ANY" | "AUTO" | "NONE";
            allowed_function_names?: string[] | undefined;
        };
    } | undefined;
    tool_config?: {
        function_calling_config: {
            mode: "ANY" | "AUTO" | "NONE";
            allowed_function_names?: string[] | undefined;
        };
    } | undefined;
}>;
type GoogleChatRequestType = z.infer<typeof GoogleChatRequest>;

declare const BaseChatModelOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type BaseChatModelOptionsType = z.infer<typeof BaseChatModelOptions>;
declare class BaseChatModel implements ChatModelV1<ChatModelSchemaType> {
    readonly version: "v1";
    modelSchema: ChatModelSchemaType;
    readonly modelName: string;
    private readonly apiKey;
    private readonly baseUrl;
    private readonly streamChatUrl;
    private readonly completeChatUrl;
    constructor(modelSchema: ChatModelSchemaType, options: BaseChatModelOptionsType);
    getDefaultBaseUrl(): UrlType;
    getDefaultHeaders(): HeadersType;
    getDefaultParams(): ParamsType;
    getRetryDelay(responseHeaders: HeadersType): {
        shouldRetry: boolean;
        delayMs: number;
    };
    getTokenCount(messages: MessageType[]): number;
    transformModelRequest(request: GoogleChatRequestType): {
        modelName: string | undefined;
        config: ConfigType;
        messages: MessageType[];
        tools: ToolType[] | undefined;
    };
    transformConfig(config: ConfigType, messages?: MessageType[], tools?: ToolType[]): ParamsType;
    transformMessages(messages: MessageType[]): ParamsType;
    transformTools(tools: ToolType[]): ParamsType;
    getCompleteChatUrl(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<UrlType>;
    getCompleteChatHeaders(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<HeadersType>;
    getCompleteChatData(config: ConfigType, messages: MessageType[], tools?: ToolType[]): Promise<ParamsType>;
    transformCompleteChatResponse(response: any): ChatResponseType;
    getStreamChatUrl(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<UrlType>;
    getStreamChatHeaders(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<HeadersType>;
    getStreamChatData(config: ConfigType, messages: MessageType[], tools?: ToolType[]): Promise<ParamsType>;
    transformStreamChatResponseChunk(chunk: string, buffer: string): AsyncGenerator<{
        partialResponse: PartialChatResponseType;
        buffer: string;
    }>;
    transformProxyStreamChatResponseChunk(chunk: string, buffer: string, data?: any, headers?: Record<string, string>, query?: Record<string, string>): AsyncGenerator<{
        partialResponse: PartialChatResponseType;
        buffer: string;
    }>;
    getProxyCompleteChatUrl(data?: any, headers?: Record<string, string>, query?: Record<string, string>): Promise<UrlType>;
    getProxyStreamChatUrl(data?: any, headers?: Record<string, string>, query?: Record<string, string>): Promise<UrlType>;
    getProxyCompleteChatHeaders(data?: any, headers?: Record<string, string>, query?: Record<string, string>): Promise<HeadersType>;
    getProxyStreamChatHeaders(data?: any, headers?: Record<string, string>, query?: Record<string, string>): Promise<HeadersType>;
    getModelPricing(): ChatModelPriceType;
}

declare class BaseChatModelGemini1 extends BaseChatModel {
    transformMessages(messages: MessageType[]): ParamsType;
}

declare const Gemini1_0Pro_001Literal = "gemini-1.0-pro-001";
declare const Gemini1_0Pro_001Schema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "tool-call" | "tool-response", ...("text" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini1_0Pro_001Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type Gemini1_0Pro_001OptionsType = z.infer<typeof Gemini1_0Pro_001Options>;
declare class Gemini1_0Pro_001 extends BaseChatModelGemini1 {
    constructor(options: Gemini1_0Pro_001OptionsType);
}

declare const Gemini1_0ProLatestLiteral = "gemini-1.0-pro-latest";
declare const Gemini1_0ProLatestSchema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "tool-call" | "tool-response", ...("text" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini1_0ProLatestOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type Gemini1_0ProLatestOptionsType = z.infer<typeof Gemini1_0ProLatestOptions>;
declare class Gemini1_0ProLatest extends BaseChatModelGemini1 {
    constructor(options: Gemini1_0ProLatestOptionsType);
}

declare const Gemini1_0ProVisionLiteral = "gemini-1.0-pro-vision";
declare const Gemini1_0ProVisionSchema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image", ...("text" | "image")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini1_0ProVisionOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type Gemini1_0ProVisionOptionsType = z.infer<typeof Gemini1_0ProVisionOptions>;
declare class Gemini1_0ProVision extends BaseChatModelGemini1 {
    constructor(options: Gemini1_0ProVisionOptionsType);
}

declare const Gemini1_0ProLiteral = "gemini-1.0-pro";
declare const Gemini1_0ProSchema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "tool-call" | "tool-response", ...("text" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini1_0ProOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type Gemini1_0ProOptionsType = z.infer<typeof Gemini1_0ProOptions>;
declare class Gemini1_0Pro extends BaseChatModelGemini1 {
    constructor(options: Gemini1_0ProOptionsType);
}

declare const Gemini1_5Flash001Literal = "gemini-1.5-flash-001";
declare const Gemini1_5Flash001Schema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini1_5Flash001Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type Gemini1_5Flash001OptionsType = z.infer<typeof Gemini1_5Flash001Options>;
declare class Gemini1_5Flash001 extends BaseChatModel {
    constructor(options: Gemini1_5Flash001OptionsType);
}

declare const Gemini1_5Flash002Literal = "gemini-1.5-flash-002";
declare const Gemini1_5Flash002Schema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini1_5Flash002Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type Gemini1_5Flash002OptionsType = z.infer<typeof Gemini1_5Flash002Options>;
declare class Gemini1_5Flash002 extends BaseChatModel {
    constructor(options: Gemini1_5Flash002OptionsType);
}

declare const Gemini1_5FlashLatestLiteral = "gemini-1.5-flash-latest";
declare const Gemini1_5FlashLatestSchema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini1_5FlashLatestOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type Gemini1_5FlashLatestOptionsType = z.infer<typeof Gemini1_5FlashLatestOptions>;
declare class Gemini1_5FlashLatest extends BaseChatModel {
    constructor(options: Gemini1_5FlashLatestOptionsType);
}

declare const Gemini1_5FlashLiteral = "gemini-1.5-flash";
declare const Gemini1_5FlashSchema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini1_5FlashOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type Gemini1_5FlashOptionsType = z.infer<typeof Gemini1_5FlashOptions>;
declare class Gemini1_5Flash extends BaseChatModel {
    constructor(options: Gemini1_5FlashOptionsType);
}

declare const Gemini1_5Pro001Literal = "gemini-1.5-pro-001";
declare const Gemini1_5Pro001Schema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini1_5Pro001Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type Gemini1_5Pro001OptionsType = z.infer<typeof Gemini1_5Pro001Options>;
declare class Gemini1_5Pro001 extends BaseChatModel {
    constructor(options: Gemini1_5Pro001OptionsType);
}

declare const Gemini1_5Pro002Literal = "gemini-1.5-pro-002";
declare const Gemini1_5Pro002Schema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini1_5Pro002Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type Gemini1_5Pro002OptionsType = z.infer<typeof Gemini1_5Pro002Options>;
declare class Gemini1_5Pro002 extends BaseChatModel {
    constructor(options: Gemini1_5Pro002OptionsType);
}

declare const Gemini1_5ProLatestLiteral = "gemini-1.5-pro-latest";
declare const Gemini1_5ProLatestSchema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini1_5ProLatestOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type Gemini1_5ProLatestOptionsType = z.infer<typeof Gemini1_5ProLatestOptions>;
declare class Gemini1_5ProLatest extends BaseChatModel {
    constructor(options: Gemini1_5ProLatestOptionsType);
}

declare const Gemini1_5ProLiteral = "gemini-1.5-pro";
declare const Gemini1_5ProSchema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini1_5ProOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type Gemini1_5ProOptionsType = z.infer<typeof Gemini1_5ProOptions>;
declare class Gemini1_5Pro extends BaseChatModel {
    constructor(options: Gemini1_5ProOptionsType);
}

declare const Gemini2_0FlashExpLiteral = "gemini-2.0-flash-exp";
declare const Gemini2_0FlashExpSchema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini2_0FlashExpOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type Gemini2_0FlashExpOptionsType = z.infer<typeof Gemini2_0FlashExpOptions>;
declare class Gemini2_0FlashExp extends BaseChatModel {
    constructor(options: Gemini2_0FlashExpOptionsType);
}

declare const Gemini2_5FlashPreview0417Literal = "gemini-2.5-flash-preview-04-17";
declare const Gemini2_5FlashPreview0417Schema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini2_5FlashPreview0417Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type Gemini2_5FlashPreview0417OptionsType = z.infer<typeof Gemini2_5FlashPreview0417Options>;
declare class Gemini2_5FlashPreview0417 extends BaseChatModel {
    constructor(options: Gemini2_5FlashPreview0417OptionsType);
}

declare const Gemini2_5ProPreview0325Literal = "gemini-2.5-pro-preview-03-25";
declare const Gemini2_5ProPreview0325Schema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini2_5ProPreview0325Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type Gemini2_5ProPreview0325OptionsType = z.infer<typeof Gemini2_5ProPreview0325Options>;
declare class Gemini2_5ProPreview0325 extends BaseChatModel {
    constructor(options: Gemini2_5ProPreview0325OptionsType);
}

declare const GeminiProVisionLiteral = "gemini-pro-vision";
declare const GeminiProVisionSchema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image", ...("text" | "image")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GeminiProVisionOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type GeminiProVisionOptionsType = z.infer<typeof GeminiProVisionOptions>;
declare class GeminiProVision extends BaseChatModelGemini1 {
    constructor(options: GeminiProVisionOptionsType);
}

declare const GeminiProLiteral = "gemini-pro";
declare const GeminiProSchema: {
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "tool-call" | "tool-response", ...("text" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GeminiProOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
}>;
type GeminiProOptionsType = z.infer<typeof GeminiProOptions>;
declare class GeminiPro extends BaseChatModelGemini1 {
    constructor(options: GeminiProOptionsType);
}

declare const GoogleEmbeddingModelModalities: EmbeddingModelSchemaType["modalities"];
declare const GoogleEmbeddingModelModalitiesEnum: z.ZodEnum<["text"]>;

declare const GoogleGetEmbeddingsResponse: z.ZodObject<{
    embeddings: z.ZodArray<z.ZodObject<{
        values: z.ZodArray<z.ZodNumber, "many">;
    }, "strip", z.ZodTypeAny, {
        values: number[];
    }, {
        values: number[];
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    embeddings: {
        values: number[];
    }[];
}, {
    embeddings: {
        values: number[];
    }[];
}>;
type GoogleGetEmbeddingsResponseType = z.infer<typeof GoogleGetEmbeddingsResponse>;

declare const GoogleEmbeddingRequestInput: z.ZodObject<{
    model: z.ZodString;
    content: z.ZodObject<{
        parts: z.ZodArray<z.ZodObject<{
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            text: string;
        }, {
            text: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        parts: {
            text: string;
        }[];
    }, {
        parts: {
            text: string;
        }[];
    }>;
}, "strip", z.ZodTypeAny, {
    content: {
        parts: {
            text: string;
        }[];
    };
    model: string;
}, {
    content: {
        parts: {
            text: string;
        }[];
    };
    model: string;
}>;
type GoogleEmbeddingRequestInputType = z.infer<typeof GoogleEmbeddingRequestInput>;
declare const GoogleEmbeddingRequest: z.ZodObject<{
    model: z.ZodOptional<z.ZodString>;
    requests: z.ZodArray<z.ZodObject<{
        model: z.ZodString;
        content: z.ZodObject<{
            parts: z.ZodArray<z.ZodObject<{
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                text: string;
            }, {
                text: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            parts: {
                text: string;
            }[];
        }, {
            parts: {
                text: string;
            }[];
        }>;
    }, "strip", z.ZodTypeAny, {
        content: {
            parts: {
                text: string;
            }[];
        };
        model: string;
    }, {
        content: {
            parts: {
                text: string;
            }[];
        };
        model: string;
    }>, "many">;
    outputDimensionality: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    requests: {
        content: {
            parts: {
                text: string;
            }[];
        };
        model: string;
    }[];
    outputDimensionality?: number | undefined;
    model?: string | undefined;
}, {
    requests: {
        content: {
            parts: {
                text: string;
            }[];
        };
        model: string;
    }[];
    outputDimensionality?: number | undefined;
    model?: string | undefined;
}>;
type GoogleEmbeddingRequestType = z.infer<typeof GoogleEmbeddingRequest>;

declare const BaseEmbeddingModelOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    getEmbeddingsUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    getEmbeddingsUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    getEmbeddingsUrl?: string | undefined;
}>;
type BaseEmbeddingModelOptionsType = z.infer<typeof BaseEmbeddingModelOptions>;
declare class BaseEmbeddingModel implements EmbeddingModelV1<EmbeddingModelSchemaType> {
    readonly version: "v1";
    modelSchema: EmbeddingModelSchemaType;
    readonly modelName: string;
    private readonly apiKey;
    private readonly baseUrl;
    private readonly getEmbeddingsUrl;
    constructor(modelSchema: EmbeddingModelSchemaType, options: BaseEmbeddingModelOptionsType);
    getDefaultBaseUrl(): UrlType;
    getDefaultHeaders(): HeadersType;
    getDefaultParams(): ParamsType;
    getRetryDelay(responseHeaders: HeadersType): {
        shouldRetry: boolean;
        delayMs: number;
    };
    getTokenCount(requests: EmbeddingRequestsType): number;
    transformModelRequest(request: any): {
        modelName: string | undefined;
        config: ConfigType;
        embeddingRequests: EmbeddingRequestsType;
    };
    transformConfig(config: ConfigType, requests?: EmbeddingRequestsType): ParamsType;
    transformEmbeddingRequests(requests: EmbeddingRequestsType): ParamsType;
    getGetEmbeddingsUrl(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<UrlType>;
    getGetEmbeddingsHeaders(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<HeadersType>;
    getGetEmbeddingsData(config: ConfigType, requests: EmbeddingRequestsType): Promise<ParamsType>;
    transformGetEmbeddingsResponse(response: any): EmbeddingResponseType;
}

declare const Text_Embedding_001Literal = "text-embedding-001";
declare const Text_Embedding_001Schema: {
    description: string;
    name: string;
    modalities: ["text", ..."text"[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
};
declare const Text_Embedding_001Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    getEmbeddingsUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    getEmbeddingsUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    getEmbeddingsUrl?: string | undefined;
}>;
type Text_Embedding_001OptionsType = z.infer<typeof Text_Embedding_001Options>;
declare class Text_Embedding_001 extends BaseEmbeddingModel {
    constructor(options: Text_Embedding_001OptionsType);
}

declare const Text_Embedding_004Literal = "text-embedding-004";
declare const Text_Embedding_004Schema: {
    description: string;
    name: string;
    modalities: ["text", ..."text"[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
};
declare const Text_Embedding_004Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    getEmbeddingsUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    getEmbeddingsUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    getEmbeddingsUrl?: string | undefined;
}>;
type Text_Embedding_004OptionsType = z.infer<typeof Text_Embedding_004Options>;
declare class Text_Embedding_004 extends BaseEmbeddingModel {
    constructor(options: Text_Embedding_004OptionsType);
}

declare const ProviderLiteral = "google";
declare class Google<C extends BaseChatModelOptionsType, E extends BaseEmbeddingModelOptionsType> implements ProviderV1<C, E> {
    readonly version: "v1";
    readonly name = "google";
    static readonly baseUrl: string;
    private readonly chatModelFactories;
    private readonly embeddingModelFactories;
    chatModelLiterals(): string[];
    chatModelSchemas(): Record<string, ChatModelSchemaType>;
    chatModel(options: C): ChatModelV1;
    embeddingModelLiterals(): string[];
    embeddingModelSchemas(): Record<string, EmbeddingModelSchemaType>;
    embeddingModel(options: E): EmbeddingModelV1;
}

export { BaseChatModel, BaseChatModelGemini1, BaseChatModelOptions, type BaseChatModelOptionsType, BaseEmbeddingModel, BaseEmbeddingModelOptions, type BaseEmbeddingModelOptionsType, ChatModelBaseConfigDef, ChatModelBaseConfigSchema, ChatModelC1ConfigDef, ChatModelC1ConfigSchema, ChatModelReasoningConfigDef, ChatModelReasoningConfigSchema, EmbeddingModelBaseConfigDef, EmbeddingModelBaseConfigSchema, Gemini1_0Pro, Gemini1_0ProLatest, Gemini1_0ProLatestLiteral, Gemini1_0ProLatestOptions, type Gemini1_0ProLatestOptionsType, Gemini1_0ProLatestSchema, Gemini1_0ProLiteral, Gemini1_0ProOptions, type Gemini1_0ProOptionsType, Gemini1_0ProSchema, Gemini1_0ProVision, Gemini1_0ProVisionLiteral, Gemini1_0ProVisionOptions, type Gemini1_0ProVisionOptionsType, Gemini1_0ProVisionSchema, Gemini1_0Pro_001, Gemini1_0Pro_001Literal, Gemini1_0Pro_001Options, type Gemini1_0Pro_001OptionsType, Gemini1_0Pro_001Schema, Gemini1_5Flash, Gemini1_5Flash001, Gemini1_5Flash001Literal, Gemini1_5Flash001Options, type Gemini1_5Flash001OptionsType, Gemini1_5Flash001Schema, Gemini1_5Flash002, Gemini1_5Flash002Literal, Gemini1_5Flash002Options, type Gemini1_5Flash002OptionsType, Gemini1_5Flash002Schema, Gemini1_5FlashLatest, Gemini1_5FlashLatestLiteral, Gemini1_5FlashLatestOptions, type Gemini1_5FlashLatestOptionsType, Gemini1_5FlashLatestSchema, Gemini1_5FlashLiteral, Gemini1_5FlashOptions, type Gemini1_5FlashOptionsType, Gemini1_5FlashSchema, Gemini1_5Pro, Gemini1_5Pro001, Gemini1_5Pro001Literal, Gemini1_5Pro001Options, type Gemini1_5Pro001OptionsType, Gemini1_5Pro001Schema, Gemini1_5Pro002, Gemini1_5Pro002Literal, Gemini1_5Pro002Options, type Gemini1_5Pro002OptionsType, Gemini1_5Pro002Schema, Gemini1_5ProLatest, Gemini1_5ProLatestLiteral, Gemini1_5ProLatestOptions, type Gemini1_5ProLatestOptionsType, Gemini1_5ProLatestSchema, Gemini1_5ProLiteral, Gemini1_5ProOptions, type Gemini1_5ProOptionsType, Gemini1_5ProSchema, Gemini2_0FlashExp, Gemini2_0FlashExpLiteral, Gemini2_0FlashExpOptions, type Gemini2_0FlashExpOptionsType, Gemini2_0FlashExpSchema, Gemini2_5FlashPreview0417, Gemini2_5FlashPreview0417Literal, Gemini2_5FlashPreview0417Options, type Gemini2_5FlashPreview0417OptionsType, Gemini2_5FlashPreview0417Schema, Gemini2_5ProPreview0325, Gemini2_5ProPreview0325Literal, Gemini2_5ProPreview0325Options, type Gemini2_5ProPreview0325OptionsType, Gemini2_5ProPreview0325Schema, GeminiPro, GeminiProLiteral, GeminiProOptions, type GeminiProOptionsType, GeminiProSchema, GeminiProVision, GeminiProVisionLiteral, GeminiProVisionOptions, type GeminiProVisionOptionsType, GeminiProVisionSchema, Google, GoogleChatAssistantRoleLiteral, GoogleChatContent, GoogleChatContentPartFunctionCall, type GoogleChatContentPartFunctionCallType, GoogleChatContentPartFunctionResponse, type GoogleChatContentPartFunctionResponseType, GoogleChatContentPartInlineData, type GoogleChatContentPartInlineDataType, GoogleChatContentPartText, type GoogleChatContentPartTextType, type GoogleChatContentType, GoogleChatGenerationConfig, type GoogleChatGenerationConfigType, GoogleChatModelConfigs, GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap, GoogleChatModelTextModalities, GoogleChatModelTextModalitiesEnum, GoogleChatModelTextToolModalities, GoogleChatModelTextToolModalitiesEnum, GoogleChatModelTextVisionModalities, GoogleChatModelTextVisionModalitiesEnum, GoogleChatRequest, type GoogleChatRequestType, GoogleChatSafetySettings, type GoogleChatSafetySettingsType, GoogleChatSystemInstruction, type GoogleChatSystemInstructionType, GoogleChatTool, GoogleChatToolConfig, type GoogleChatToolConfigType, GoogleChatToolRoleLiteral, type GoogleChatToolType, GoogleCompleteChatResponse, type GoogleCompleteChatResponseType, GoogleCompleteChatTextResponse, GoogleCompleteChatToolResponse, GoogleEmbeddingModelConfigs, GoogleEmbeddingModelModalities, GoogleEmbeddingModelModalitiesEnum, GoogleEmbeddingRequest, GoogleEmbeddingRequestInput, type GoogleEmbeddingRequestInputType, type GoogleEmbeddingRequestType, GoogleGetEmbeddingsResponse, type GoogleGetEmbeddingsResponseType, GoogleStreamChatResponse, type GoogleStreamChatResponseType, GoogleStreamChatTextResponse, GoogleStreamChatToolResponse, ProviderLiteral, Text_Embedding_001, Text_Embedding_001Literal, Text_Embedding_001Options, type Text_Embedding_001OptionsType, Text_Embedding_001Schema, Text_Embedding_004, Text_Embedding_004Literal, Text_Embedding_004Options, type Text_Embedding_004OptionsType, Text_Embedding_004Schema, dimensions, frequencyPenalty, maxTokens, presencePenalty, reasoningEnabled, safetySettings, seed, stop, temperature, toolChoice, topK, topP };
