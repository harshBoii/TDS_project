import * as zod from 'zod';
import { z } from 'zod';
import { ChatModelSchemaType, ChatModelV1, UrlType, HeadersType, ParamsType, EmbeddingModelSchemaType, EmbeddingModelV1, ProviderV1 } from '@adaline/provider';
import { MessageType, ConfigType, ToolType, ChatResponseType, PartialChatResponseType, ChatModelPriceType, EmbeddingRequestsType, EmbeddingResponseType } from '@adaline/types';

declare const OpenAIChatModelConfigs: {
    readonly base: (maxOutputTokens: number, maxSequences: number) => {
        def: {
            readonly temperature: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly maxTokens: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly stop: {
                type: "multi-string";
                param: string;
                title: string;
                description: string;
                max: number;
            };
            readonly topP: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly frequencyPenalty: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly presencePenalty: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly seed: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly logProbs: {
                type: "select-boolean";
                param: string;
                title: string;
                description: string;
                default: boolean | null;
            };
            readonly topLogProbs: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly toolChoice: {
                type: "select-string";
                param: string;
                title: string;
                description: string;
                default: string;
                choices: string[];
            };
        };
        schema: zod.ZodObject<{
            temperature: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            maxTokens: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            stop: zod.ZodOptional<zod.ZodDefault<zod.ZodArray<zod.ZodString, "many">>>;
            topP: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            frequencyPenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            presencePenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            seed: zod.ZodEffects<zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>, number | undefined, number | undefined>;
            logProbs: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodBoolean>>>;
            topLogProbs: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            toolChoice: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
        }, "strip", zod.ZodTypeAny, {
            temperature?: number | undefined;
            seed?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            topP?: number | undefined;
            frequencyPenalty?: number | undefined;
            presencePenalty?: number | undefined;
            logProbs?: boolean | null | undefined;
            topLogProbs?: number | undefined;
            toolChoice?: string | null | undefined;
        }, {
            temperature?: number | undefined;
            seed?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            topP?: number | undefined;
            frequencyPenalty?: number | undefined;
            presencePenalty?: number | undefined;
            logProbs?: boolean | null | undefined;
            topLogProbs?: number | undefined;
            toolChoice?: string | null | undefined;
        }>;
    };
    readonly responseFormat: (maxOutputTokens: number, maxSequences: number) => {
        def: {
            responseFormat: {
                type: "select-string";
                param: string;
                title: string;
                description: string;
                default: string;
                choices: string[];
            };
            temperature: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            maxTokens: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            stop: {
                type: "multi-string";
                param: string;
                title: string;
                description: string;
                max: number;
            };
            topP: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            frequencyPenalty: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            presencePenalty: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            seed: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            logProbs: {
                type: "select-boolean";
                param: string;
                title: string;
                description: string;
                default: boolean | null;
            };
            topLogProbs: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            toolChoice: {
                type: "select-string";
                param: string;
                title: string;
                description: string;
                default: string;
                choices: string[];
            };
        };
        schema: zod.ZodObject<zod.objectUtil.extendShape<{
            temperature: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            maxTokens: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            stop: zod.ZodOptional<zod.ZodDefault<zod.ZodArray<zod.ZodString, "many">>>;
            topP: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            frequencyPenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            presencePenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            seed: zod.ZodEffects<zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>, number | undefined, number | undefined>;
            logProbs: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodBoolean>>>;
            topLogProbs: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            toolChoice: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
        }, {
            responseFormat: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
        }>, "strip", zod.ZodTypeAny, {
            temperature?: number | undefined;
            seed?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            topP?: number | undefined;
            frequencyPenalty?: number | undefined;
            presencePenalty?: number | undefined;
            logProbs?: boolean | null | undefined;
            topLogProbs?: number | undefined;
            toolChoice?: string | null | undefined;
            responseFormat?: string | null | undefined;
        }, {
            temperature?: number | undefined;
            seed?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            topP?: number | undefined;
            frequencyPenalty?: number | undefined;
            presencePenalty?: number | undefined;
            logProbs?: boolean | null | undefined;
            topLogProbs?: number | undefined;
            toolChoice?: string | null | undefined;
            responseFormat?: string | null | undefined;
        }>;
    };
    readonly responseSchema: (maxOutputTokens: number, maxSequences: number) => {
        def: {
            responseFormat: {
                type: "select-string";
                param: string;
                title: string;
                description: string;
                default: string;
                choices: string[];
            };
            responseSchema: {
                type: "object-schema";
                param: string;
                title: string;
                description: string;
                objectSchema?: any;
            };
            temperature: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            maxTokens: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            stop: {
                type: "multi-string";
                param: string;
                title: string;
                description: string;
                max: number;
            };
            topP: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            frequencyPenalty: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            presencePenalty: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            seed: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            logProbs: {
                type: "select-boolean";
                param: string;
                title: string;
                description: string;
                default: boolean | null;
            };
            topLogProbs: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            toolChoice: {
                type: "select-string";
                param: string;
                title: string;
                description: string;
                default: string;
                choices: string[];
            };
        };
        schema: zod.ZodObject<zod.objectUtil.extendShape<{
            temperature: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            maxTokens: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            stop: zod.ZodOptional<zod.ZodDefault<zod.ZodArray<zod.ZodString, "many">>>;
            topP: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            frequencyPenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            presencePenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            seed: zod.ZodEffects<zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>, number | undefined, number | undefined>;
            logProbs: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodBoolean>>>;
            topLogProbs: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            toolChoice: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
        }, {
            responseFormat: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
            responseSchema: zod.ZodOptional<zod.ZodObject<zod.ZodRawShape, zod.UnknownKeysParam, zod.ZodTypeAny, {
                [x: string]: any;
            }, {
                [x: string]: any;
            }>>;
        }>, "strip", zod.ZodTypeAny, {
            temperature?: number | undefined;
            seed?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            topP?: number | undefined;
            frequencyPenalty?: number | undefined;
            presencePenalty?: number | undefined;
            logProbs?: boolean | null | undefined;
            topLogProbs?: number | undefined;
            toolChoice?: string | null | undefined;
            responseFormat?: string | null | undefined;
            responseSchema?: {
                [x: string]: any;
            } | undefined;
        }, {
            temperature?: number | undefined;
            seed?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            topP?: number | undefined;
            frequencyPenalty?: number | undefined;
            presencePenalty?: number | undefined;
            logProbs?: boolean | null | undefined;
            topLogProbs?: number | undefined;
            toolChoice?: string | null | undefined;
            responseFormat?: string | null | undefined;
            responseSchema?: {
                [x: string]: any;
            } | undefined;
        }>;
    };
    readonly oSeries: (maxOutputTokens: number, maxSequences: number) => {
        def: {
            temperature: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            reasoningEffort: {
                type: "select-string";
                param: string;
                title: string;
                description: string;
                default: string;
                choices: string[];
            };
            responseFormat: {
                type: "select-string";
                param: string;
                title: string;
                description: string;
                default: string;
                choices: string[];
            };
            responseSchema: {
                type: "object-schema";
                param: string;
                title: string;
                description: string;
                objectSchema?: any;
            };
            maxTokens: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            stop: {
                type: "multi-string";
                param: string;
                title: string;
                description: string;
                max: number;
            };
            topP: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            frequencyPenalty: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            presencePenalty: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            seed: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            logProbs: {
                type: "select-boolean";
                param: string;
                title: string;
                description: string;
                default: boolean | null;
            };
            topLogProbs: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            toolChoice: {
                type: "select-string";
                param: string;
                title: string;
                description: string;
                default: string;
                choices: string[];
            };
        };
        schema: zod.ZodObject<zod.objectUtil.extendShape<zod.objectUtil.extendShape<{
            temperature: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            maxTokens: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            stop: zod.ZodOptional<zod.ZodDefault<zod.ZodArray<zod.ZodString, "many">>>;
            topP: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            frequencyPenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            presencePenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            seed: zod.ZodEffects<zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>, number | undefined, number | undefined>;
            logProbs: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodBoolean>>>;
            topLogProbs: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            toolChoice: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
        }, {
            responseFormat: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
            responseSchema: zod.ZodOptional<zod.ZodObject<zod.ZodRawShape, zod.UnknownKeysParam, zod.ZodTypeAny, {
                [x: string]: any;
            }, {
                [x: string]: any;
            }>>;
        }>, {
            temperature: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
            reasoningEffort: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
        }>, "strip", zod.ZodTypeAny, {
            temperature?: number | undefined;
            seed?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            topP?: number | undefined;
            frequencyPenalty?: number | undefined;
            presencePenalty?: number | undefined;
            logProbs?: boolean | null | undefined;
            topLogProbs?: number | undefined;
            toolChoice?: string | null | undefined;
            responseFormat?: string | null | undefined;
            responseSchema?: {
                [x: string]: any;
            } | undefined;
            reasoningEffort?: string | null | undefined;
        }, {
            temperature?: number | undefined;
            seed?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            topP?: number | undefined;
            frequencyPenalty?: number | undefined;
            presencePenalty?: number | undefined;
            logProbs?: boolean | null | undefined;
            topLogProbs?: number | undefined;
            toolChoice?: string | null | undefined;
            responseFormat?: string | null | undefined;
            responseSchema?: {
                [x: string]: any;
            } | undefined;
            reasoningEffort?: string | null | undefined;
        }>;
    };
};
declare const OpenAIEmbeddingModelConfigs: {
    readonly base: () => {
        def: {
            readonly encodingFormat: {
                type: "select-string";
                param: string;
                title: string;
                description: string;
                default: string;
                choices: string[];
            };
        };
        schema: zod.ZodObject<{
            encodingFormat: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
        }, "strip", zod.ZodTypeAny, {
            encodingFormat?: string | null | undefined;
        }, {
            encodingFormat?: string | null | undefined;
        }>;
    };
    readonly dimensions: (maxDimensions: number) => {
        def: {
            readonly dimensions: {
                type: "range";
                param: string;
                title: string;
                description: string;
                max: number;
                default: number;
                min: number;
                step: number;
            };
            readonly encodingFormat: {
                type: "select-string";
                param: string;
                title: string;
                description: string;
                default: string;
                choices: string[];
            };
        };
        schema: zod.ZodObject<zod.objectUtil.extendShape<{
            encodingFormat: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
        }, {
            dimensions: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
        }>, "strip", zod.ZodTypeAny, {
            dimensions?: number | undefined;
            encodingFormat?: string | null | undefined;
        }, {
            dimensions?: number | undefined;
            encodingFormat?: string | null | undefined;
        }>;
    };
};

declare const ChatModelBaseConfigSchema: (maxOutputTokens: number, maxSequences: number) => z.ZodObject<{
    temperature: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    maxTokens: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    stop: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    topP: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    frequencyPenalty: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    presencePenalty: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    seed: z.ZodEffects<z.ZodOptional<z.ZodDefault<z.ZodNumber>>, number | undefined, number | undefined>;
    logProbs: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodBoolean>>>;
    topLogProbs: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    toolChoice: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodEnum<[string, ...string[]]>>>>;
}, "strip", z.ZodTypeAny, {
    temperature?: number | undefined;
    seed?: number | undefined;
    stop?: string[] | undefined;
    maxTokens?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    logProbs?: boolean | null | undefined;
    topLogProbs?: number | undefined;
    toolChoice?: string | null | undefined;
}, {
    temperature?: number | undefined;
    seed?: number | undefined;
    stop?: string[] | undefined;
    maxTokens?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    logProbs?: boolean | null | undefined;
    topLogProbs?: number | undefined;
    toolChoice?: string | null | undefined;
}>;
declare const ChatModelBaseConfigDef: (maxOutputTokens: number, maxSequences: number) => {
    readonly temperature: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly maxTokens: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly stop: {
        type: "multi-string";
        param: string;
        title: string;
        description: string;
        max: number;
    };
    readonly topP: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly frequencyPenalty: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly presencePenalty: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly seed: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly logProbs: {
        type: "select-boolean";
        param: string;
        title: string;
        description: string;
        default: boolean | null;
    };
    readonly topLogProbs: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly toolChoice: {
        type: "select-string";
        param: string;
        title: string;
        description: string;
        default: string;
        choices: string[];
    };
};

declare const temperature: {
    def: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    schema: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
};
declare const maxTokens: (maxOutputTokens: number) => {
    def: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    schema: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
};
declare const stop: (maxSequences: number) => {
    def: {
        type: "multi-string";
        param: string;
        title: string;
        description: string;
        max: number;
    };
    schema: zod.ZodOptional<zod.ZodDefault<zod.ZodArray<zod.ZodString, "many">>>;
};
declare const topP: {
    def: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    schema: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
};
declare const frequencyPenalty: {
    def: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    schema: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
};
declare const presencePenalty: {
    def: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    schema: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
};
declare const seed: {
    def: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    schema: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
};
declare const logProbs: {
    def: {
        type: "select-boolean";
        param: string;
        title: string;
        description: string;
        default: boolean | null;
    };
    schema: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodBoolean>>>;
};
declare const topLogProbs: {
    def: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    schema: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
};
declare const toolChoice: {
    def: {
        type: "select-string";
        param: string;
        title: string;
        description: string;
        default: string;
        choices: string[];
    };
    schema: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
};

declare const ChatModelOSeriesConfigDef: (maxOutputTokens: number, maxSequences: number) => {
    temperature: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    reasoningEffort: {
        type: "select-string";
        param: string;
        title: string;
        description: string;
        default: string;
        choices: string[];
    };
    responseFormat: {
        type: "select-string";
        param: string;
        title: string;
        description: string;
        default: string;
        choices: string[];
    };
    responseSchema: {
        type: "object-schema";
        param: string;
        title: string;
        description: string;
        objectSchema?: any;
    };
    maxTokens: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    stop: {
        type: "multi-string";
        param: string;
        title: string;
        description: string;
        max: number;
    };
    topP: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    frequencyPenalty: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    presencePenalty: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    seed: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    logProbs: {
        type: "select-boolean";
        param: string;
        title: string;
        description: string;
        default: boolean | null;
    };
    topLogProbs: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    toolChoice: {
        type: "select-string";
        param: string;
        title: string;
        description: string;
        default: string;
        choices: string[];
    };
};
declare const ChatModelOSeriesConfigSchema: (maxOutputTokens: number, maxSequences: number) => zod.ZodObject<zod.objectUtil.extendShape<zod.objectUtil.extendShape<{
    temperature: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    maxTokens: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    stop: zod.ZodOptional<zod.ZodDefault<zod.ZodArray<zod.ZodString, "many">>>;
    topP: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    frequencyPenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    presencePenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    seed: zod.ZodEffects<zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>, number | undefined, number | undefined>;
    logProbs: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodBoolean>>>;
    topLogProbs: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    toolChoice: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
}, {
    responseFormat: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
    responseSchema: zod.ZodOptional<zod.ZodObject<zod.ZodRawShape, zod.UnknownKeysParam, zod.ZodTypeAny, {
        [x: string]: any;
    }, {
        [x: string]: any;
    }>>;
}>, {
    temperature: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    reasoningEffort: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
}>, "strip", zod.ZodTypeAny, {
    temperature?: number | undefined;
    seed?: number | undefined;
    stop?: string[] | undefined;
    maxTokens?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    logProbs?: boolean | null | undefined;
    topLogProbs?: number | undefined;
    toolChoice?: string | null | undefined;
    responseFormat?: string | null | undefined;
    responseSchema?: {
        [x: string]: any;
    } | undefined;
    reasoningEffort?: string | null | undefined;
}, {
    temperature?: number | undefined;
    seed?: number | undefined;
    stop?: string[] | undefined;
    maxTokens?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    logProbs?: boolean | null | undefined;
    topLogProbs?: number | undefined;
    toolChoice?: string | null | undefined;
    responseFormat?: string | null | undefined;
    responseSchema?: {
        [x: string]: any;
    } | undefined;
    reasoningEffort?: string | null | undefined;
}>;

declare const ChatModelResponseFormatConfigDef: (maxOutputTokens: number, maxSequences: number) => {
    responseFormat: {
        type: "select-string";
        param: string;
        title: string;
        description: string;
        default: string;
        choices: string[];
    };
    temperature: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    maxTokens: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    stop: {
        type: "multi-string";
        param: string;
        title: string;
        description: string;
        max: number;
    };
    topP: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    frequencyPenalty: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    presencePenalty: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    seed: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    logProbs: {
        type: "select-boolean";
        param: string;
        title: string;
        description: string;
        default: boolean | null;
    };
    topLogProbs: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    toolChoice: {
        type: "select-string";
        param: string;
        title: string;
        description: string;
        default: string;
        choices: string[];
    };
};
declare const ChatModelResponseFormatConfigSchema: (maxOutputTokens: number, maxSequences: number) => zod.ZodObject<zod.objectUtil.extendShape<{
    temperature: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    maxTokens: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    stop: zod.ZodOptional<zod.ZodDefault<zod.ZodArray<zod.ZodString, "many">>>;
    topP: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    frequencyPenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    presencePenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    seed: zod.ZodEffects<zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>, number | undefined, number | undefined>;
    logProbs: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodBoolean>>>;
    topLogProbs: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    toolChoice: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
}, {
    responseFormat: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
}>, "strip", zod.ZodTypeAny, {
    temperature?: number | undefined;
    seed?: number | undefined;
    stop?: string[] | undefined;
    maxTokens?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    logProbs?: boolean | null | undefined;
    topLogProbs?: number | undefined;
    toolChoice?: string | null | undefined;
    responseFormat?: string | null | undefined;
}, {
    temperature?: number | undefined;
    seed?: number | undefined;
    stop?: string[] | undefined;
    maxTokens?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    logProbs?: boolean | null | undefined;
    topLogProbs?: number | undefined;
    toolChoice?: string | null | undefined;
    responseFormat?: string | null | undefined;
}>;

declare const ChatModelResponseSchemaConfigDef: (maxOutputTokens: number, maxSequences: number) => {
    responseFormat: {
        type: "select-string";
        param: string;
        title: string;
        description: string;
        default: string;
        choices: string[];
    };
    responseSchema: {
        type: "object-schema";
        param: string;
        title: string;
        description: string;
        objectSchema?: any;
    };
    temperature: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    maxTokens: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    stop: {
        type: "multi-string";
        param: string;
        title: string;
        description: string;
        max: number;
    };
    topP: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    frequencyPenalty: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    presencePenalty: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    seed: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    logProbs: {
        type: "select-boolean";
        param: string;
        title: string;
        description: string;
        default: boolean | null;
    };
    topLogProbs: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    toolChoice: {
        type: "select-string";
        param: string;
        title: string;
        description: string;
        default: string;
        choices: string[];
    };
};
declare const ChatModelResponseSchemaConfigSchema: (maxOutputTokens: number, maxSequences: number) => zod.ZodObject<zod.objectUtil.extendShape<{
    temperature: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    maxTokens: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    stop: zod.ZodOptional<zod.ZodDefault<zod.ZodArray<zod.ZodString, "many">>>;
    topP: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    frequencyPenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    presencePenalty: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    seed: zod.ZodEffects<zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>, number | undefined, number | undefined>;
    logProbs: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodBoolean>>>;
    topLogProbs: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
    toolChoice: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
}, {
    responseFormat: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
    responseSchema: zod.ZodOptional<zod.ZodObject<zod.ZodRawShape, zod.UnknownKeysParam, zod.ZodTypeAny, {
        [x: string]: any;
    }, {
        [x: string]: any;
    }>>;
}>, "strip", zod.ZodTypeAny, {
    temperature?: number | undefined;
    seed?: number | undefined;
    stop?: string[] | undefined;
    maxTokens?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    logProbs?: boolean | null | undefined;
    topLogProbs?: number | undefined;
    toolChoice?: string | null | undefined;
    responseFormat?: string | null | undefined;
    responseSchema?: {
        [x: string]: any;
    } | undefined;
}, {
    temperature?: number | undefined;
    seed?: number | undefined;
    stop?: string[] | undefined;
    maxTokens?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    logProbs?: boolean | null | undefined;
    topLogProbs?: number | undefined;
    toolChoice?: string | null | undefined;
    responseFormat?: string | null | undefined;
    responseSchema?: {
        [x: string]: any;
    } | undefined;
}>;

declare const EmbeddingModelBaseConfigSchema: () => z.ZodObject<{
    encodingFormat: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodEnum<[string, ...string[]]>>>>;
}, "strip", z.ZodTypeAny, {
    encodingFormat?: string | null | undefined;
}, {
    encodingFormat?: string | null | undefined;
}>;
declare const EmbeddingModelBaseConfigDef: () => {
    readonly encodingFormat: {
        type: "select-string";
        param: string;
        title: string;
        description: string;
        default: string;
        choices: string[];
    };
};

declare const encodingFormat: {
    def: {
        type: "select-string";
        param: string;
        title: string;
        description: string;
        default: string;
        choices: string[];
    };
    schema: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
};
declare const dimensions: (maxDimensions: number) => {
    def: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    schema: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
};

declare const EmbeddingModelDimensionsConfigSchema: (maxDimensions: number) => zod.ZodObject<zod.objectUtil.extendShape<{
    encodingFormat: zod.ZodOptional<zod.ZodDefault<zod.ZodNullable<zod.ZodEnum<[string, ...string[]]>>>>;
}, {
    dimensions: zod.ZodOptional<zod.ZodDefault<zod.ZodNumber>>;
}>, "strip", zod.ZodTypeAny, {
    dimensions?: number | undefined;
    encodingFormat?: string | null | undefined;
}, {
    dimensions?: number | undefined;
    encodingFormat?: string | null | undefined;
}>;
declare const EmbeddingModelDimensionsConfigDef: (maxDimensions: number) => {
    readonly dimensions: {
        type: "range";
        param: string;
        title: string;
        description: string;
        max: number;
        default: number;
        min: number;
        step: number;
    };
    readonly encodingFormat: {
        type: "select-string";
        param: string;
        title: string;
        description: string;
        default: string;
        choices: string[];
    };
};

declare const OpenAIChatModelRoles: z.ZodEnum<["system", "user", "assistant", "tool"]>;
declare const OpenAIChatModelRolesMap: {
    readonly system: "system";
    readonly user: "user";
    readonly assistant: "assistant";
    readonly tool: "tool";
};

declare const OpenAIChatModelModalities: ChatModelSchemaType["modalities"];
declare const OpenAIChatModelModalitiesEnum: z.ZodEnum<["text", "image", "tool-call", "tool-response"]>;
declare const OpenAIChatModelTextModalities: ChatModelSchemaType["modalities"];
declare const OpenAIChatModelTextModalitiesEnum: z.ZodEnum<["text"]>;
declare const OpenAIChatModelTextToolModalities: ChatModelSchemaType["modalities"];
declare const OpenAIChatModelTextToolModalitiesEnum: z.ZodEnum<["text", "tool-call", "tool-response"]>;

declare const OpenAIToolCallsCompleteChatResponse: z.ZodArray<z.ZodObject<{
    id: z.ZodString;
    type: z.ZodEnum<["function"]>;
    function: z.ZodObject<{
        name: z.ZodString;
        arguments: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        arguments: string;
    }, {
        name: string;
        arguments: string;
    }>;
}, "strip", z.ZodTypeAny, {
    function: {
        name: string;
        arguments: string;
    };
    type: "function";
    id: string;
}, {
    function: {
        name: string;
        arguments: string;
    };
    type: "function";
    id: string;
}>, "many">;
declare const OpenAICompleteChatResponse: z.ZodObject<{
    id: z.ZodString;
    object: z.ZodLiteral<"chat.completion">;
    created: z.ZodNumber;
    model: z.ZodString;
    system_fingerprint: z.ZodNullable<z.ZodString>;
    choices: z.ZodArray<z.ZodObject<{
        index: z.ZodNumber;
        message: z.ZodObject<{
            role: z.ZodString;
            content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tool_calls: z.ZodOptional<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                type: z.ZodEnum<["function"]>;
                function: z.ZodObject<{
                    name: z.ZodString;
                    arguments: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    arguments: string;
                }, {
                    name: string;
                    arguments: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }, {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }>, "many">>;
            refusal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            role: string;
            content?: string | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            refusal?: string | null | undefined;
        }, {
            role: string;
            content?: string | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            refusal?: string | null | undefined;
        }>;
        logprobs: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            content: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
                token: z.ZodString;
                logprob: z.ZodNumber;
                bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
            }, {
                top_logprobs: z.ZodArray<z.ZodObject<{
                    token: z.ZodString;
                    logprob: z.ZodNumber;
                    bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
                }, "strip", z.ZodTypeAny, {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }, {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }>, "many">;
            }>, "strip", z.ZodTypeAny, {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }, {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }>, "many">>>;
            refusal: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
                token: z.ZodString;
                logprob: z.ZodNumber;
                bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
            }, {
                top_logprobs: z.ZodArray<z.ZodObject<{
                    token: z.ZodString;
                    logprob: z.ZodNumber;
                    bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
                }, "strip", z.ZodTypeAny, {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }, {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }>, "many">;
            }>, "strip", z.ZodTypeAny, {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }, {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }>, "many">>>;
        }, "strip", z.ZodTypeAny, {
            content?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
            refusal?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
        }, {
            content?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
            refusal?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
        }>>>;
        finish_reason: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: {
            role: string;
            content?: string | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            refusal?: string | null | undefined;
        };
        index: number;
        finish_reason: string;
        logprobs?: {
            content?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
            refusal?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
        } | null | undefined;
    }, {
        message: {
            role: string;
            content?: string | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            refusal?: string | null | undefined;
        };
        index: number;
        finish_reason: string;
        logprobs?: {
            content?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
            refusal?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
        } | null | undefined;
    }>, "many">;
    usage: z.ZodObject<{
        prompt_tokens: z.ZodNumber;
        completion_tokens: z.ZodNumber;
        total_tokens: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        prompt_tokens: number;
        completion_tokens: number;
        total_tokens: number;
    }, {
        prompt_tokens: number;
        completion_tokens: number;
        total_tokens: number;
    }>;
}, "strip", z.ZodTypeAny, {
    object: "chat.completion";
    choices: {
        message: {
            role: string;
            content?: string | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            refusal?: string | null | undefined;
        };
        index: number;
        finish_reason: string;
        logprobs?: {
            content?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
            refusal?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
        } | null | undefined;
    }[];
    id: string;
    model: string;
    created: number;
    system_fingerprint: string | null;
    usage: {
        prompt_tokens: number;
        completion_tokens: number;
        total_tokens: number;
    };
}, {
    object: "chat.completion";
    choices: {
        message: {
            role: string;
            content?: string | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            refusal?: string | null | undefined;
        };
        index: number;
        finish_reason: string;
        logprobs?: {
            content?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
            refusal?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
        } | null | undefined;
    }[];
    id: string;
    model: string;
    created: number;
    system_fingerprint: string | null;
    usage: {
        prompt_tokens: number;
        completion_tokens: number;
        total_tokens: number;
    };
}>;
type OpenAICompleteChatResponseType = z.infer<typeof OpenAICompleteChatResponse>;
declare const OpenAIToolCallsStreamChatResponse: z.ZodArray<z.ZodObject<{
    index: z.ZodNumber;
    id: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodEnum<["function"]>>;
    function: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        arguments?: string | undefined;
    }, {
        name?: string | undefined;
        arguments?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    index: number;
    function?: {
        name?: string | undefined;
        arguments?: string | undefined;
    } | undefined;
    type?: "function" | undefined;
    id?: string | undefined;
}, {
    index: number;
    function?: {
        name?: string | undefined;
        arguments?: string | undefined;
    } | undefined;
    type?: "function" | undefined;
    id?: string | undefined;
}>, "many">;
declare const OpenAIStreamChatResponse: z.ZodObject<{
    id: z.ZodString;
    object: z.ZodString;
    created: z.ZodNumber;
    model: z.ZodString;
    system_fingerprint: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    choices: z.ZodArray<z.ZodObject<{
        index: z.ZodNumber;
        delta: z.ZodUnion<[z.ZodObject<{
            content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tool_calls: z.ZodOptional<z.ZodArray<z.ZodObject<{
                index: z.ZodNumber;
                id: z.ZodOptional<z.ZodString>;
                type: z.ZodOptional<z.ZodEnum<["function"]>>;
                function: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    arguments: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    arguments?: string | undefined;
                }, {
                    name?: string | undefined;
                    arguments?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                index: number;
                function?: {
                    name?: string | undefined;
                    arguments?: string | undefined;
                } | undefined;
                type?: "function" | undefined;
                id?: string | undefined;
            }, {
                index: number;
                function?: {
                    name?: string | undefined;
                    arguments?: string | undefined;
                } | undefined;
                type?: "function" | undefined;
                id?: string | undefined;
            }>, "many">>;
            refusal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            content?: string | null | undefined;
            tool_calls?: {
                index: number;
                function?: {
                    name?: string | undefined;
                    arguments?: string | undefined;
                } | undefined;
                type?: "function" | undefined;
                id?: string | undefined;
            }[] | undefined;
            refusal?: string | null | undefined;
        }, {
            content?: string | null | undefined;
            tool_calls?: {
                index: number;
                function?: {
                    name?: string | undefined;
                    arguments?: string | undefined;
                } | undefined;
                type?: "function" | undefined;
                id?: string | undefined;
            }[] | undefined;
            refusal?: string | null | undefined;
        }>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>]>;
        logprobs: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            content: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
                token: z.ZodString;
                logprob: z.ZodNumber;
                bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
            }, {
                top_logprobs: z.ZodArray<z.ZodObject<{
                    token: z.ZodString;
                    logprob: z.ZodNumber;
                    bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
                }, "strip", z.ZodTypeAny, {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }, {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }>, "many">;
            }>, "strip", z.ZodTypeAny, {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }, {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }>, "many">>>;
            refusal: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
                token: z.ZodString;
                logprob: z.ZodNumber;
                bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
            }, {
                top_logprobs: z.ZodArray<z.ZodObject<{
                    token: z.ZodString;
                    logprob: z.ZodNumber;
                    bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
                }, "strip", z.ZodTypeAny, {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }, {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }>, "many">;
            }>, "strip", z.ZodTypeAny, {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }, {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }>, "many">>>;
        }, "strip", z.ZodTypeAny, {
            content?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
            refusal?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
        }, {
            content?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
            refusal?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
        }>>>;
        finish_reason: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        index: number;
        finish_reason: string | null;
        delta: {
            content?: string | null | undefined;
            tool_calls?: {
                index: number;
                function?: {
                    name?: string | undefined;
                    arguments?: string | undefined;
                } | undefined;
                type?: "function" | undefined;
                id?: string | undefined;
            }[] | undefined;
            refusal?: string | null | undefined;
        } | {};
        logprobs?: {
            content?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
            refusal?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
        } | null | undefined;
    }, {
        index: number;
        finish_reason: string | null;
        delta: {
            content?: string | null | undefined;
            tool_calls?: {
                index: number;
                function?: {
                    name?: string | undefined;
                    arguments?: string | undefined;
                } | undefined;
                type?: "function" | undefined;
                id?: string | undefined;
            }[] | undefined;
            refusal?: string | null | undefined;
        } | {};
        logprobs?: {
            content?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
            refusal?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
        } | null | undefined;
    }>, "many">;
    usage: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        prompt_tokens: z.ZodNumber;
        completion_tokens: z.ZodNumber;
        total_tokens: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        prompt_tokens: number;
        completion_tokens: number;
        total_tokens: number;
    }, {
        prompt_tokens: number;
        completion_tokens: number;
        total_tokens: number;
    }>>>;
}, "strip", z.ZodTypeAny, {
    object: string;
    choices: {
        index: number;
        finish_reason: string | null;
        delta: {
            content?: string | null | undefined;
            tool_calls?: {
                index: number;
                function?: {
                    name?: string | undefined;
                    arguments?: string | undefined;
                } | undefined;
                type?: "function" | undefined;
                id?: string | undefined;
            }[] | undefined;
            refusal?: string | null | undefined;
        } | {};
        logprobs?: {
            content?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
            refusal?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
        } | null | undefined;
    }[];
    id: string;
    model: string;
    created: number;
    system_fingerprint?: string | null | undefined;
    usage?: {
        prompt_tokens: number;
        completion_tokens: number;
        total_tokens: number;
    } | null | undefined;
}, {
    object: string;
    choices: {
        index: number;
        finish_reason: string | null;
        delta: {
            content?: string | null | undefined;
            tool_calls?: {
                index: number;
                function?: {
                    name?: string | undefined;
                    arguments?: string | undefined;
                } | undefined;
                type?: "function" | undefined;
                id?: string | undefined;
            }[] | undefined;
            refusal?: string | null | undefined;
        } | {};
        logprobs?: {
            content?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
            refusal?: {
                top_logprobs: {
                    token: string;
                    logprob: number;
                    bytes: number[] | null;
                }[];
                token: string;
                logprob: number;
                bytes: number[] | null;
            }[] | null | undefined;
        } | null | undefined;
    }[];
    id: string;
    model: string;
    created: number;
    system_fingerprint?: string | null | undefined;
    usage?: {
        prompt_tokens: number;
        completion_tokens: number;
        total_tokens: number;
    } | null | undefined;
}>;
type OpenAIStreamChatResponseType = z.infer<typeof OpenAIStreamChatResponse>;

declare const OpenAIChatRequestTool: z.ZodObject<{
    type: z.ZodLiteral<"function">;
    function: z.ZodObject<{
        name: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        strict: z.ZodOptional<z.ZodBoolean>;
        parameters: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description?: string | undefined;
        strict?: boolean | undefined;
        parameters?: any;
    }, {
        name: string;
        description?: string | undefined;
        strict?: boolean | undefined;
        parameters?: any;
    }>;
}, "strip", z.ZodTypeAny, {
    function: {
        name: string;
        description?: string | undefined;
        strict?: boolean | undefined;
        parameters?: any;
    };
    type: "function";
}, {
    function: {
        name: string;
        description?: string | undefined;
        strict?: boolean | undefined;
        parameters?: any;
    };
    type: "function";
}>;
type OpenAIChatRequestToolType = z.infer<typeof OpenAIChatRequestTool>;
declare const OpenAIChatRequestToolChoiceEnum: z.ZodEnum<["none", "auto", "required"]>;
type OpenAIChatRequestToolChoiceEnumType = z.infer<typeof OpenAIChatRequestToolChoiceEnum>;
declare const OpenAIChatRequestToolChoiceFunction: z.ZodObject<{
    type: z.ZodLiteral<"function">;
    function: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    function: {
        name: string;
    };
    type: "function";
}, {
    function: {
        name: string;
    };
    type: "function";
}>;
type OpenAIChatRequestToolChoiceFunctionType = z.infer<typeof OpenAIChatRequestToolChoiceFunction>;
declare const OpenAIChatRequestResponseFormat: z.ZodUnion<[z.ZodObject<{
    type: z.ZodEnum<["text", "json_object"]>;
}, "strip", z.ZodTypeAny, {
    type: "text" | "json_object";
}, {
    type: "text" | "json_object";
}>, z.ZodObject<{
    type: z.ZodLiteral<"json_schema">;
    json_schema: z.ZodObject<{
        name: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        strict: z.ZodOptional<z.ZodBoolean>;
        schema: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description?: string | undefined;
        strict?: boolean | undefined;
        schema?: any;
    }, {
        name: string;
        description?: string | undefined;
        strict?: boolean | undefined;
        schema?: any;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "json_schema";
    json_schema: {
        name: string;
        description?: string | undefined;
        strict?: boolean | undefined;
        schema?: any;
    };
}, {
    type: "json_schema";
    json_schema: {
        name: string;
        description?: string | undefined;
        strict?: boolean | undefined;
        schema?: any;
    };
}>]>;
type OpenAIChatRequestResponseFormatType = z.infer<typeof OpenAIChatRequestResponseFormat>;
declare const OpenAIChatRequestTextContent: z.ZodObject<{
    text: z.ZodString;
    type: z.ZodLiteral<"text">;
}, "strip", z.ZodTypeAny, {
    type: "text";
    text: string;
}, {
    type: "text";
    text: string;
}>;
type OpenAIChatRequestTextContentType = z.infer<typeof OpenAIChatRequestTextContent>;
declare const OpenAIChatRequestImageContent: z.ZodObject<{
    type: z.ZodLiteral<"image_url">;
    image_url: z.ZodObject<{
        url: z.ZodString;
        detail: z.ZodOptional<z.ZodEnum<["low", "high", "auto"]>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        detail?: "auto" | "low" | "high" | undefined;
    }, {
        url: string;
        detail?: "auto" | "low" | "high" | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "image_url";
    image_url: {
        url: string;
        detail?: "auto" | "low" | "high" | undefined;
    };
}, {
    type: "image_url";
    image_url: {
        url: string;
        detail?: "auto" | "low" | "high" | undefined;
    };
}>;
type OpenAIChatRequestImageContentType = z.infer<typeof OpenAIChatRequestImageContent>;
declare const OpenAIChatRequestToolCallContent: z.ZodObject<{
    id: z.ZodString;
    type: z.ZodLiteral<"function">;
    function: z.ZodObject<{
        name: z.ZodString;
        arguments: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        arguments: string;
    }, {
        name: string;
        arguments: string;
    }>;
}, "strip", z.ZodTypeAny, {
    function: {
        name: string;
        arguments: string;
    };
    type: "function";
    id: string;
}, {
    function: {
        name: string;
        arguments: string;
    };
    type: "function";
    id: string;
}>;
type OpenAIChatRequestToolCallContentType = z.infer<typeof OpenAIChatRequestToolCallContent>;
declare const OpenAIChatRequestSystemMessage: z.ZodObject<{
    role: z.ZodLiteral<"system">;
    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
        text: z.ZodString;
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
    }, {
        type: "text";
        text: string;
    }>, "many">]>;
}, "strip", z.ZodTypeAny, {
    role: "system";
    content: string | {
        type: "text";
        text: string;
    }[];
}, {
    role: "system";
    content: string | {
        type: "text";
        text: string;
    }[];
}>;
type OpenAIChatRequestSystemMessageType = z.infer<typeof OpenAIChatRequestSystemMessage>;
declare const OpenAIChatRequestUserMessage: z.ZodObject<{
    role: z.ZodLiteral<"user">;
    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodObject<{
        text: z.ZodString;
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
    }, {
        type: "text";
        text: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"image_url">;
        image_url: z.ZodObject<{
            url: z.ZodString;
            detail: z.ZodOptional<z.ZodEnum<["low", "high", "auto"]>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        }, {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    }, {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    }>]>, "many">]>;
}, "strip", z.ZodTypeAny, {
    role: "user";
    content: string | ({
        type: "text";
        text: string;
    } | {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    })[];
}, {
    role: "user";
    content: string | ({
        type: "text";
        text: string;
    } | {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    })[];
}>;
type OpenAIChatRequestUserMessageType = z.infer<typeof OpenAIChatRequestUserMessage>;
declare const OpenAIChatRequestAssistantMessage: z.ZodObject<{
    role: z.ZodLiteral<"assistant">;
    content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
        text: z.ZodString;
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
    }, {
        type: "text";
        text: string;
    }>, "many">]>>;
    tool_calls: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        type: z.ZodLiteral<"function">;
        function: z.ZodObject<{
            name: z.ZodString;
            arguments: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            arguments: string;
        }, {
            name: string;
            arguments: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }, {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    role: "assistant";
    content?: string | {
        type: "text";
        text: string;
    }[] | undefined;
    tool_calls?: {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }[] | undefined;
}, {
    role: "assistant";
    content?: string | {
        type: "text";
        text: string;
    }[] | undefined;
    tool_calls?: {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }[] | undefined;
}>;
type OpenAIChatRequestAssistantMessageType = z.infer<typeof OpenAIChatRequestAssistantMessage>;
declare const OpenAIChatRequestToolMessage: z.ZodObject<{
    role: z.ZodLiteral<"tool">;
    tool_call_id: z.ZodString;
    content: z.ZodString;
}, "strip", z.ZodTypeAny, {
    role: "tool";
    content: string;
    tool_call_id: string;
}, {
    role: "tool";
    content: string;
    tool_call_id: string;
}>;
type OpenAIChatRequestToolMessageType = z.infer<typeof OpenAIChatRequestToolMessage>;
declare const OpenAIChatRequestMessage: z.ZodUnion<[z.ZodObject<{
    role: z.ZodLiteral<"system">;
    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
        text: z.ZodString;
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
    }, {
        type: "text";
        text: string;
    }>, "many">]>;
}, "strip", z.ZodTypeAny, {
    role: "system";
    content: string | {
        type: "text";
        text: string;
    }[];
}, {
    role: "system";
    content: string | {
        type: "text";
        text: string;
    }[];
}>, z.ZodObject<{
    role: z.ZodLiteral<"user">;
    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodObject<{
        text: z.ZodString;
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
    }, {
        type: "text";
        text: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"image_url">;
        image_url: z.ZodObject<{
            url: z.ZodString;
            detail: z.ZodOptional<z.ZodEnum<["low", "high", "auto"]>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        }, {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    }, {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    }>]>, "many">]>;
}, "strip", z.ZodTypeAny, {
    role: "user";
    content: string | ({
        type: "text";
        text: string;
    } | {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    })[];
}, {
    role: "user";
    content: string | ({
        type: "text";
        text: string;
    } | {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    })[];
}>, z.ZodObject<{
    role: z.ZodLiteral<"assistant">;
    content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
        text: z.ZodString;
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
    }, {
        type: "text";
        text: string;
    }>, "many">]>>;
    tool_calls: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        type: z.ZodLiteral<"function">;
        function: z.ZodObject<{
            name: z.ZodString;
            arguments: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            arguments: string;
        }, {
            name: string;
            arguments: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }, {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    role: "assistant";
    content?: string | {
        type: "text";
        text: string;
    }[] | undefined;
    tool_calls?: {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }[] | undefined;
}, {
    role: "assistant";
    content?: string | {
        type: "text";
        text: string;
    }[] | undefined;
    tool_calls?: {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }[] | undefined;
}>, z.ZodObject<{
    role: z.ZodLiteral<"tool">;
    tool_call_id: z.ZodString;
    content: z.ZodString;
}, "strip", z.ZodTypeAny, {
    role: "tool";
    content: string;
    tool_call_id: string;
}, {
    role: "tool";
    content: string;
    tool_call_id: string;
}>]>;
type OpenAIChatRequestMessageType = z.infer<typeof OpenAIChatRequestMessage>;
declare const OpenAIChatRequest: z.ZodObject<{
    model: z.ZodOptional<z.ZodString>;
    messages: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        role: z.ZodLiteral<"system">;
        content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
            text: z.ZodString;
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
        }, {
            type: "text";
            text: string;
        }>, "many">]>;
    }, "strip", z.ZodTypeAny, {
        role: "system";
        content: string | {
            type: "text";
            text: string;
        }[];
    }, {
        role: "system";
        content: string | {
            type: "text";
            text: string;
        }[];
    }>, z.ZodObject<{
        role: z.ZodLiteral<"user">;
        content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodObject<{
            text: z.ZodString;
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
        }, {
            type: "text";
            text: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"image_url">;
            image_url: z.ZodObject<{
                url: z.ZodString;
                detail: z.ZodOptional<z.ZodEnum<["low", "high", "auto"]>>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            }, {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        }, {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        }>]>, "many">]>;
    }, "strip", z.ZodTypeAny, {
        role: "user";
        content: string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[];
    }, {
        role: "user";
        content: string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[];
    }>, z.ZodObject<{
        role: z.ZodLiteral<"assistant">;
        content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
            text: z.ZodString;
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
        }, {
            type: "text";
            text: string;
        }>, "many">]>>;
        tool_calls: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            type: z.ZodLiteral<"function">;
            function: z.ZodObject<{
                name: z.ZodString;
                arguments: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                arguments: string;
            }, {
                name: string;
                arguments: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        role: "assistant";
        content?: string | {
            type: "text";
            text: string;
        }[] | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
    }, {
        role: "assistant";
        content?: string | {
            type: "text";
            text: string;
        }[] | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
    }>, z.ZodObject<{
        role: z.ZodLiteral<"tool">;
        tool_call_id: z.ZodString;
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        role: "tool";
        content: string;
        tool_call_id: string;
    }, {
        role: "tool";
        content: string;
        tool_call_id: string;
    }>]>, "many">;
    frequency_penalty: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    logprobs: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    top_logprobs: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    max_completion_tokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    presence_penalty: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        type: z.ZodEnum<["text", "json_object"]>;
    }, "strip", z.ZodTypeAny, {
        type: "text" | "json_object";
    }, {
        type: "text" | "json_object";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"json_schema">;
        json_schema: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
            strict: z.ZodOptional<z.ZodBoolean>;
            schema: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description?: string | undefined;
            strict?: boolean | undefined;
            schema?: any;
        }, {
            name: string;
            description?: string | undefined;
            strict?: boolean | undefined;
            schema?: any;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            strict?: boolean | undefined;
            schema?: any;
        };
    }, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            strict?: boolean | undefined;
            schema?: any;
        };
    }>]>>;
    seed: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    stop: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>>;
    temperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    top_p: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    tools: z.ZodOptional<z.ZodArray<z.ZodObject<{
        type: z.ZodLiteral<"function">;
        function: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
            strict: z.ZodOptional<z.ZodBoolean>;
            parameters: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description?: string | undefined;
            strict?: boolean | undefined;
            parameters?: any;
        }, {
            name: string;
            description?: string | undefined;
            strict?: boolean | undefined;
            parameters?: any;
        }>;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
            description?: string | undefined;
            strict?: boolean | undefined;
            parameters?: any;
        };
        type: "function";
    }, {
        function: {
            name: string;
            description?: string | undefined;
            strict?: boolean | undefined;
            parameters?: any;
        };
        type: "function";
    }>, "many">>;
    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["none", "auto", "required"]>, z.ZodObject<{
        type: z.ZodLiteral<"function">;
        function: z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
        };
        type: "function";
    }, {
        function: {
            name: string;
        };
        type: "function";
    }>]>>;
}, "strip", z.ZodTypeAny, {
    messages: ({
        role: "system";
        content: string | {
            type: "text";
            text: string;
        }[];
    } | {
        role: "user";
        content: string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[];
    } | {
        role: "assistant";
        content?: string | {
            type: "text";
            text: string;
        }[] | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
    } | {
        role: "tool";
        content: string;
        tool_call_id: string;
    })[];
    temperature?: number | null | undefined;
    top_p?: number | null | undefined;
    frequency_penalty?: number | null | undefined;
    presence_penalty?: number | null | undefined;
    seed?: number | null | undefined;
    logprobs?: boolean | null | undefined;
    top_logprobs?: number | null | undefined;
    tool_choice?: "auto" | "required" | "none" | {
        function: {
            name: string;
        };
        type: "function";
    } | undefined;
    max_completion_tokens?: number | null | undefined;
    stop?: string | string[] | null | undefined;
    response_format?: {
        type: "text" | "json_object";
    } | {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            strict?: boolean | undefined;
            schema?: any;
        };
    } | undefined;
    model?: string | undefined;
    tools?: {
        function: {
            name: string;
            description?: string | undefined;
            strict?: boolean | undefined;
            parameters?: any;
        };
        type: "function";
    }[] | undefined;
}, {
    messages: ({
        role: "system";
        content: string | {
            type: "text";
            text: string;
        }[];
    } | {
        role: "user";
        content: string | ({
            type: "text";
            text: string;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[];
    } | {
        role: "assistant";
        content?: string | {
            type: "text";
            text: string;
        }[] | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
    } | {
        role: "tool";
        content: string;
        tool_call_id: string;
    })[];
    temperature?: number | null | undefined;
    top_p?: number | null | undefined;
    frequency_penalty?: number | null | undefined;
    presence_penalty?: number | null | undefined;
    seed?: number | null | undefined;
    logprobs?: boolean | null | undefined;
    top_logprobs?: number | null | undefined;
    tool_choice?: "auto" | "required" | "none" | {
        function: {
            name: string;
        };
        type: "function";
    } | undefined;
    max_completion_tokens?: number | null | undefined;
    stop?: string | string[] | null | undefined;
    response_format?: {
        type: "text" | "json_object";
    } | {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            strict?: boolean | undefined;
            schema?: any;
        };
    } | undefined;
    model?: string | undefined;
    tools?: {
        function: {
            name: string;
            description?: string | undefined;
            strict?: boolean | undefined;
            parameters?: any;
        };
        type: "function";
    }[] | undefined;
}>;
type OpenAIChatRequestType = z.infer<typeof OpenAIChatRequest>;

declare const BaseChatModelOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type BaseChatModelOptionsType = z.infer<typeof BaseChatModelOptions>;
declare class BaseChatModel implements ChatModelV1<ChatModelSchemaType> {
    readonly version: "v1";
    modelSchema: ChatModelSchemaType;
    modelName: string;
    private readonly apiKey;
    private readonly baseUrl;
    private readonly streamChatUrl;
    private readonly completeChatUrl;
    private readonly organization;
    constructor(modelSchema: ChatModelSchemaType, options: BaseChatModelOptionsType);
    getDefaultBaseUrl(): UrlType;
    getDefaultHeaders(): HeadersType;
    getDefaultParams(): ParamsType;
    getRetryDelay(responseHeaders: HeadersType): {
        shouldRetry: boolean;
        delayMs: number;
    };
    getTokenCount(messages: MessageType[]): number;
    transformModelRequest(request: OpenAIChatRequestType): {
        modelName: string | undefined;
        config: ConfigType;
        messages: MessageType[];
        tools: ToolType[] | undefined;
    };
    transformConfig(config: ConfigType, messages?: MessageType[], tools?: ToolType[]): ParamsType;
    transformMessages(messages: MessageType[]): ParamsType;
    transformTools(tools: ToolType[]): ParamsType;
    getCompleteChatUrl(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<UrlType>;
    getCompleteChatHeaders(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<HeadersType>;
    getCompleteChatData(config: ConfigType, messages: MessageType[], tools?: ToolType[]): Promise<ParamsType>;
    transformCompleteChatResponse(response: any): ChatResponseType;
    getStreamChatUrl(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<UrlType>;
    getStreamChatHeaders(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<HeadersType>;
    getStreamChatData(config: ConfigType, messages: MessageType[], tools?: ToolType[]): Promise<ParamsType>;
    transformStreamChatResponseChunk(chunk: string, buffer: string): AsyncGenerator<{
        partialResponse: PartialChatResponseType;
        buffer: string;
    }>;
    transformProxyStreamChatResponseChunk(chunk: string, buffer: string, data?: any, headers?: Record<string, string>, query?: Record<string, string>): AsyncGenerator<{
        partialResponse: PartialChatResponseType;
        buffer: string;
    }>;
    getProxyStreamChatUrl(data?: any, headers?: Record<string, string>, query?: Record<string, string>): Promise<UrlType>;
    getProxyCompleteChatUrl(data?: any, headers?: Record<string, string>, query?: Record<string, string>): Promise<UrlType>;
    getProxyCompleteChatHeaders(data?: any, headers?: Record<string, string>, query?: Record<string, string>): Promise<HeadersType>;
    getProxyStreamChatHeaders(data?: any, headers?: Record<string, string>, query?: Record<string, string>): Promise<HeadersType>;
    getModelPricing(): ChatModelPriceType;
}

declare const GPT_3_5_Turbo_0125Literal = "gpt-3.5-turbo-0125";
declare const GPT_3_5_Turbo_0125Schema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "tool-call" | "tool-response", ...("text" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GPT_3_5_Turbo_0125Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type GPT_3_5_Turbo_0125OptionsType = z.infer<typeof GPT_3_5_Turbo_0125Options>;
declare class GPT_3_5_Turbo_0125 extends BaseChatModel {
    constructor(options: GPT_3_5_Turbo_0125OptionsType);
}

declare const GPT_3_5_Turbo_1106Literal = "gpt-3.5-turbo-1106";
declare const GPT_3_5_Turbo_1106Schema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "tool-call" | "tool-response", ...("text" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GPT_3_5_Turbo_1106Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type GPT_3_5_Turbo_1106OptionsType = z.infer<typeof GPT_3_5_Turbo_1106Options>;
declare class GPT_3_5_Turbo_1106 extends BaseChatModel {
    constructor(options: GPT_3_5_Turbo_1106OptionsType);
}

declare const GPT_3_5_TurboLiteral = "gpt-3.5-turbo";
declare const GPT_3_5_TurboSchema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "tool-call" | "tool-response", ...("text" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GPT_3_5_TurboOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type GPT_3_5_TurboOptionsType = z.infer<typeof GPT_3_5_TurboOptions>;
declare class GPT_3_5_Turbo extends BaseChatModel {
    constructor(options: GPT_3_5_TurboOptionsType);
}

declare const GPT_4_0125_PreviewLiteral = "gpt-4-0125-preview";
declare const GPT_4_0125_PreviewSchema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "tool-call" | "tool-response", ...("text" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GPT_4_0125_PreviewOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type GPT_4_0125_PreviewOptionsType = z.infer<typeof GPT_4_0125_PreviewOptions>;
declare class GPT_4_0125_Preview extends BaseChatModel {
    constructor(options: GPT_4_0125_PreviewOptionsType);
}

declare const GPT_4_0613Literal = "gpt-4-0613";
declare const GPT_4_0613Schema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "tool-call" | "tool-response", ...("text" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GPT_4_0613Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type GPT_4_0613OptionsType = z.infer<typeof GPT_4_0613Options>;
declare class GPT_4_0613 extends BaseChatModel {
    constructor(options: GPT_4_0613OptionsType);
}

declare const GPT_4_1106_PreviewLiteral = "gpt-4-1106-preview";
declare const GPT_4_1106_PreviewSchema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "tool-call" | "tool-response", ...("text" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GPT_4_1106_PreviewOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type GPT_4_1106_PreviewOptionsType = z.infer<typeof GPT_4_1106_PreviewOptions>;
declare class GPT_4_1106_Preview extends BaseChatModel {
    constructor(options: GPT_4_1106_PreviewOptionsType);
}

declare const GPT_4_Turbo_2024_04_09Literal = "gpt-4-turbo-2024-04-09";
declare const GPT_4_Turbo_2024_04_09Schema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GPT_4_Turbo_2024_04_09Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type GPT_4_Turbo_2024_04_09OptionsType = z.infer<typeof GPT_4_Turbo_2024_04_09Options>;
declare class GPT_4_Turbo_2024_04_09 extends BaseChatModel {
    constructor(options: GPT_4_Turbo_2024_04_09OptionsType);
}

declare const GPT_4_Turbo_PreviewLiteral = "gpt-4-turbo-preview";
declare const GPT_4_Turbo_PreviewSchema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "tool-call" | "tool-response", ...("text" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GPT_4_Turbo_PreviewOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type GPT_4_Turbo_PreviewOptionsType = z.infer<typeof GPT_4_Turbo_PreviewOptions>;
declare class GPT_4_Turbo_Preview extends BaseChatModel {
    constructor(options: GPT_4_Turbo_PreviewOptionsType);
}

declare const GPT_4_TurboLiteral = "gpt-4-turbo";
declare const GPT_4_TurboSchema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GPT_4_TurboOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type GPT_4_TurboOptionsType = z.infer<typeof GPT_4_TurboOptions>;
declare class GPT_4_Turbo extends BaseChatModel {
    constructor(options: GPT_4_TurboOptionsType);
}

declare const GPT_4Literal = "gpt-4";
declare const GPT_4Schema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "tool-call" | "tool-response", ...("text" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GPT_4Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type GPT_4OptionsType = z.infer<typeof GPT_4Options>;
declare class GPT_4 extends BaseChatModel {
    constructor(options: GPT_4OptionsType);
}

declare const GPT_4o_2024_05_13Literal = "gpt-4o-2024-05-13";
declare const GPT_4o_2024_05_13Schema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GPT_4o_2024_05_13Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type GPT_4o_2024_05_13OptionsType = z.infer<typeof GPT_4o_2024_05_13Options>;
declare class GPT_4o_2024_05_13 extends BaseChatModel {
    constructor(options: GPT_4o_2024_05_13OptionsType);
}

declare const GPT_4o_2024_08_06Literal = "gpt-4o-2024-08-06";
declare const GPT_4o_2024_08_06Schema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GPT_4o_2024_08_06Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type GPT_4o_2024_08_06OptionsType = z.infer<typeof GPT_4o_2024_08_06Options>;
declare class GPT_4o_2024_08_06 extends BaseChatModel {
    constructor(options: GPT_4o_2024_08_06OptionsType);
}

declare const GPT_4o_Mini_2024_07_18Literal = "gpt-4o-mini-2024-07-18";
declare const GPT_4o_Mini_2024_07_18Schema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GPT_4o_Mini_2024_07_18Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type GPT_4o_Mini_2024_07_18OptionsType = z.infer<typeof GPT_4o_Mini_2024_07_18Options>;
declare class GPT_4o_Mini_2024_07_18 extends BaseChatModel {
    constructor(options: GPT_4o_Mini_2024_07_18OptionsType);
}

declare const GPT_4o_MiniLiteral = "gpt-4o-mini";
declare const GPT_4o_MiniSchema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GPT_4o_MiniOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type GPT_4o_MiniOptionsType = z.infer<typeof GPT_4o_MiniOptions>;
declare class GPT_4o_Mini extends BaseChatModel {
    constructor(options: GPT_4o_MiniOptionsType);
}

declare const GPT_4oLiteral = "gpt-4o";
declare const GPT_4oSchema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const GPT_4oOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type GPT_4oOptionsType = z.infer<typeof GPT_4oOptions>;
declare class GPT_4o extends BaseChatModel {
    constructor(options: GPT_4oOptionsType);
}

declare const O1_2024_12_17Literal = "o1-2024-12-17";
declare const O1_2024_12_17Schema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const O1_2024_12_17Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type O1_2024_12_17OptionsType = z.infer<typeof O1_2024_12_17Options>;
declare class O1_2024_12_17 extends BaseChatModel {
    constructor(options: O1_2024_12_17OptionsType);
}

declare const O1Literal = "o1";
declare const O1Schema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const O1Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type O1OptionsType = z.infer<typeof O1Options>;
declare class O1 extends BaseChatModel {
    constructor(options: O1OptionsType);
}

declare const O3_2025_04_16Literal = "o3-2025-04-16";
declare const O3_2025_04_16Schema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const O3_2025_04_16Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type O3_2025_04_16OptionsType = z.infer<typeof O3_2025_04_16Options>;
declare class O3_2025_04_16 extends BaseChatModel {
    constructor(options: O3_2025_04_16OptionsType);
}

declare const O3Literal = "o3";
declare const O3Schema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const O3Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type O3OptionsType = z.infer<typeof O3Options>;
declare class O3 extends BaseChatModel {
    constructor(options: O3OptionsType);
}

declare const O3MiniLiteral = "o3-mini";
declare const O3MiniSchema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "tool-call" | "tool-response", ...("text" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const O3MiniOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type O3MiniOptionsType = z.infer<typeof O3MiniOptions>;
declare class O3Mini extends BaseChatModel {
    constructor(options: O3MiniOptionsType);
}

declare const O3Mini2025_01_31Literal = "o3-mini-2025-01-31";
declare const O3Mini2025_01_31Schema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "tool-call" | "tool-response", ...("text" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const O3Mini2025_01_31Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type O3Mini2025_01_31OptionsType = z.infer<typeof O3Mini2025_01_31Options>;
declare class O3Mini2025_01_31 extends BaseChatModel {
    constructor(options: O3Mini2025_01_31OptionsType);
}

declare const O4_Mini_2025_04_16Literal = "o4-mini-2025-04-16";
declare const O4_Mini_2025_04_16Schema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const O4_Mini_2025_04_16Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type O4_Mini_2025_04_16OptionsType = z.infer<typeof O4_Mini_2025_04_16Options>;
declare class O4_Mini_2025_04_16 extends BaseChatModel {
    constructor(options: O4_Mini_2025_04_16OptionsType);
}

declare const O4_MiniLiteral = "o4-mini";
declare const O4_MiniSchema: {
    description: string;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
            maxTokens?: number | null | undefined;
        }[];
    };
    maxReasoningTokens?: number | undefined;
};
declare const O4_MiniOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    completeChatUrl: z.ZodOptional<z.ZodString>;
    streamChatUrl: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    completeChatUrl?: string | undefined;
    streamChatUrl?: string | undefined;
    organization?: string | undefined;
}>;
type O4_MiniOptionsType = z.infer<typeof O4_MiniOptions>;
declare class O4_Mini extends BaseChatModel {
    constructor(options: O4_MiniOptionsType);
}

declare const OpenAIEmbeddingModelModalities: EmbeddingModelSchemaType["modalities"];
declare const OpenAIEmbeddingModelModalitiesEnum: z.ZodEnum<["text", "token"]>;

declare const OpenAIGetEmbeddingsResponse: z.ZodObject<{
    object: z.ZodLiteral<"list">;
    model: z.ZodString;
    data: z.ZodArray<z.ZodObject<{
        index: z.ZodNumber;
        object: z.ZodLiteral<"embedding">;
        embedding: z.ZodUnion<[z.ZodArray<z.ZodNumber, "many">, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        object: "embedding";
        index: number;
        embedding: string | number[];
    }, {
        object: "embedding";
        index: number;
        embedding: string | number[];
    }>, "many">;
    usage: z.ZodObject<{
        prompt_tokens: z.ZodNumber;
        total_tokens: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        prompt_tokens: number;
        total_tokens: number;
    }, {
        prompt_tokens: number;
        total_tokens: number;
    }>;
}, "strip", z.ZodTypeAny, {
    object: "list";
    data: {
        object: "embedding";
        index: number;
        embedding: string | number[];
    }[];
    model: string;
    usage: {
        prompt_tokens: number;
        total_tokens: number;
    };
}, {
    object: "list";
    data: {
        object: "embedding";
        index: number;
        embedding: string | number[];
    }[];
    model: string;
    usage: {
        prompt_tokens: number;
        total_tokens: number;
    };
}>;

declare const OpenAIEmbeddingRequestInput: z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodArray<z.ZodNumber, "many">]>, z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">]>;
type OpenAIEmbeddingRequestInputType = z.infer<typeof OpenAIEmbeddingRequestInput>;
declare const OpenAIEmbeddingRequest: z.ZodObject<{
    model: z.ZodOptional<z.ZodString>;
    input: z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, z.ZodArray<z.ZodNumber, "many">]>, z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">]>;
    encoding_format: z.ZodOptional<z.ZodEnum<["float", "base64"]>>;
    dimensions: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    input: string | string[] | number[] | number[][];
    encoding_format?: "float" | "base64" | undefined;
    dimensions?: number | undefined;
    model?: string | undefined;
}, {
    input: string | string[] | number[] | number[][];
    encoding_format?: "float" | "base64" | undefined;
    dimensions?: number | undefined;
    model?: string | undefined;
}>;
type OpenAIEmbeddingRequestType = z.infer<typeof OpenAIEmbeddingRequest>;

declare const BaseEmbeddingModelOptions: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    getEmbeddingsUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    getEmbeddingsUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    getEmbeddingsUrl?: string | undefined;
}>;
type BaseEmbeddingModelOptionsType = z.infer<typeof BaseEmbeddingModelOptions>;
declare class BaseEmbeddingModel implements EmbeddingModelV1<EmbeddingModelSchemaType> {
    readonly version: "v1";
    modelSchema: EmbeddingModelSchemaType;
    modelName: string;
    private readonly apiKey;
    private readonly baseUrl;
    private readonly getEmbeddingsUrl;
    constructor(modelSchema: EmbeddingModelSchemaType, options: BaseEmbeddingModelOptionsType);
    getDefaultBaseUrl(): UrlType;
    getDefaultHeaders(): HeadersType;
    getDefaultParams(): ParamsType;
    getRetryDelay(responseHeaders: HeadersType): {
        shouldRetry: boolean;
        delayMs: number;
    };
    getTokenCount(requests: EmbeddingRequestsType): number;
    transformModelRequest(request: any): {
        modelName: string | undefined;
        config: ConfigType;
        embeddingRequests: EmbeddingRequestsType;
    };
    transformConfig(config: ConfigType, requests?: EmbeddingRequestsType): ParamsType;
    transformEmbeddingRequests(requests: EmbeddingRequestsType): ParamsType;
    getGetEmbeddingsUrl(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<UrlType>;
    getGetEmbeddingsHeaders(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<HeadersType>;
    getGetEmbeddingsData(config: ConfigType, requests: EmbeddingRequestsType): Promise<ParamsType>;
    transformGetEmbeddingsResponse(response: any): EmbeddingResponseType;
}

declare const Text_Embedding_Ada002Literal = "text-embedding-ada-002";
declare const Text_Embedding_Ada002Schema: {
    description: string;
    name: string;
    modalities: ["text" | "token", ...("text" | "token")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
};
declare const Text_Embedding_Ada002_Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    getEmbeddingsUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    getEmbeddingsUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    getEmbeddingsUrl?: string | undefined;
}>;
type Text_Embedding_Ada002_OptionsType = z.infer<typeof Text_Embedding_Ada002_Options>;
declare class Text_Embedding_Ada002 extends BaseEmbeddingModel {
    constructor(options: Text_Embedding_Ada002_OptionsType);
}

declare const Text_Embedding_3_SmallLiteral = "text-embedding-3-small";
declare const Text_Embedding_3_SmallSchema: {
    description: string;
    name: string;
    modalities: ["text" | "token", ...("text" | "token")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
};
declare const Text_Embedding_3_Small_Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    getEmbeddingsUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    getEmbeddingsUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    getEmbeddingsUrl?: string | undefined;
}>;
type Text_Embedding_3_Small_OptionsType = z.infer<typeof Text_Embedding_3_Small_Options>;
declare class Text_Embedding_3_Small extends BaseEmbeddingModel {
    constructor(options: Text_Embedding_3_Small_OptionsType);
}

declare const Text_Embedding_3_LargeLiteral = "text-embedding-3-large";
declare const Text_Embedding_3_LargeSchema: {
    description: string;
    name: string;
    modalities: ["text" | "token", ...("text" | "token")[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
};
declare const Text_Embedding_3_Large_Options: z.ZodObject<{
    modelName: z.ZodString;
    apiKey: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    getEmbeddingsUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    getEmbeddingsUrl?: string | undefined;
}, {
    modelName: string;
    apiKey: string;
    baseUrl?: string | undefined;
    getEmbeddingsUrl?: string | undefined;
}>;
type Text_Embedding_3_Large_OptionsType = z.infer<typeof Text_Embedding_3_Large_Options>;
declare class Text_Embedding_3_Large extends BaseEmbeddingModel {
    constructor(options: Text_Embedding_3_Large_OptionsType);
}

declare const ProviderLiteral = "openai";
declare class OpenAI<C extends BaseChatModelOptionsType, E extends BaseEmbeddingModelOptionsType> implements ProviderV1<C, E> {
    readonly version: "v1";
    readonly name = "openai";
    static readonly baseUrl = "https://api.openai.com/v1";
    private readonly chatModelFactories;
    private readonly embeddingModelFactories;
    chatModelLiterals(): string[];
    chatModelSchemas(): Record<string, ChatModelSchemaType>;
    chatModel(options: C): ChatModelV1;
    embeddingModelLiterals(): string[];
    embeddingModelSchemas(): Record<string, EmbeddingModelSchemaType>;
    embeddingModel(options: E): EmbeddingModelV1;
}

export { BaseChatModel, BaseChatModelOptions, type BaseChatModelOptionsType, BaseEmbeddingModel, BaseEmbeddingModelOptions, type BaseEmbeddingModelOptionsType, ChatModelBaseConfigDef, ChatModelBaseConfigSchema, ChatModelOSeriesConfigDef, ChatModelOSeriesConfigSchema, ChatModelResponseFormatConfigDef, ChatModelResponseFormatConfigSchema, ChatModelResponseSchemaConfigDef, ChatModelResponseSchemaConfigSchema, EmbeddingModelBaseConfigDef, EmbeddingModelBaseConfigSchema, EmbeddingModelDimensionsConfigDef, EmbeddingModelDimensionsConfigSchema, GPT_3_5_Turbo, GPT_3_5_TurboLiteral, GPT_3_5_TurboOptions, type GPT_3_5_TurboOptionsType, GPT_3_5_TurboSchema, GPT_3_5_Turbo_0125, GPT_3_5_Turbo_0125Literal, GPT_3_5_Turbo_0125Options, type GPT_3_5_Turbo_0125OptionsType, GPT_3_5_Turbo_0125Schema, GPT_3_5_Turbo_1106, GPT_3_5_Turbo_1106Literal, GPT_3_5_Turbo_1106Options, type GPT_3_5_Turbo_1106OptionsType, GPT_3_5_Turbo_1106Schema, GPT_4, GPT_4Literal, GPT_4Options, type GPT_4OptionsType, GPT_4Schema, GPT_4_0125_Preview, GPT_4_0125_PreviewLiteral, GPT_4_0125_PreviewOptions, type GPT_4_0125_PreviewOptionsType, GPT_4_0125_PreviewSchema, GPT_4_0613, GPT_4_0613Literal, GPT_4_0613Options, type GPT_4_0613OptionsType, GPT_4_0613Schema, GPT_4_1106_Preview, GPT_4_1106_PreviewLiteral, GPT_4_1106_PreviewOptions, type GPT_4_1106_PreviewOptionsType, GPT_4_1106_PreviewSchema, GPT_4_Turbo, GPT_4_TurboLiteral, GPT_4_TurboOptions, type GPT_4_TurboOptionsType, GPT_4_TurboSchema, GPT_4_Turbo_2024_04_09, GPT_4_Turbo_2024_04_09Literal, GPT_4_Turbo_2024_04_09Options, type GPT_4_Turbo_2024_04_09OptionsType, GPT_4_Turbo_2024_04_09Schema, GPT_4_Turbo_Preview, GPT_4_Turbo_PreviewLiteral, GPT_4_Turbo_PreviewOptions, type GPT_4_Turbo_PreviewOptionsType, GPT_4_Turbo_PreviewSchema, GPT_4o, GPT_4oLiteral, GPT_4oOptions, type GPT_4oOptionsType, GPT_4oSchema, GPT_4o_2024_05_13, GPT_4o_2024_05_13Literal, GPT_4o_2024_05_13Options, type GPT_4o_2024_05_13OptionsType, GPT_4o_2024_05_13Schema, GPT_4o_2024_08_06, GPT_4o_2024_08_06Literal, GPT_4o_2024_08_06Options, type GPT_4o_2024_08_06OptionsType, GPT_4o_2024_08_06Schema, GPT_4o_Mini, GPT_4o_MiniLiteral, GPT_4o_MiniOptions, type GPT_4o_MiniOptionsType, GPT_4o_MiniSchema, GPT_4o_Mini_2024_07_18, GPT_4o_Mini_2024_07_18Literal, GPT_4o_Mini_2024_07_18Options, type GPT_4o_Mini_2024_07_18OptionsType, GPT_4o_Mini_2024_07_18Schema, O1, O1Literal, O1Options, type O1OptionsType, O1Schema, O1_2024_12_17, O1_2024_12_17Literal, O1_2024_12_17Options, type O1_2024_12_17OptionsType, O1_2024_12_17Schema, O3, O3Literal, O3Mini, O3Mini2025_01_31, O3Mini2025_01_31Literal, O3Mini2025_01_31Options, type O3Mini2025_01_31OptionsType, O3Mini2025_01_31Schema, O3MiniLiteral, O3MiniOptions, type O3MiniOptionsType, O3MiniSchema, O3Options, type O3OptionsType, O3Schema, O3_2025_04_16, O3_2025_04_16Literal, O3_2025_04_16Options, type O3_2025_04_16OptionsType, O3_2025_04_16Schema, O4_Mini, O4_MiniLiteral, O4_MiniOptions, type O4_MiniOptionsType, O4_MiniSchema, O4_Mini_2025_04_16, O4_Mini_2025_04_16Literal, O4_Mini_2025_04_16Options, type O4_Mini_2025_04_16OptionsType, O4_Mini_2025_04_16Schema, OpenAI, OpenAIChatModelConfigs, OpenAIChatModelModalities, OpenAIChatModelModalitiesEnum, OpenAIChatModelRoles, OpenAIChatModelRolesMap, OpenAIChatModelTextModalities, OpenAIChatModelTextModalitiesEnum, OpenAIChatModelTextToolModalities, OpenAIChatModelTextToolModalitiesEnum, OpenAIChatRequest, OpenAIChatRequestAssistantMessage, type OpenAIChatRequestAssistantMessageType, OpenAIChatRequestImageContent, type OpenAIChatRequestImageContentType, OpenAIChatRequestMessage, type OpenAIChatRequestMessageType, OpenAIChatRequestResponseFormat, type OpenAIChatRequestResponseFormatType, OpenAIChatRequestSystemMessage, type OpenAIChatRequestSystemMessageType, OpenAIChatRequestTextContent, type OpenAIChatRequestTextContentType, OpenAIChatRequestTool, OpenAIChatRequestToolCallContent, type OpenAIChatRequestToolCallContentType, OpenAIChatRequestToolChoiceEnum, type OpenAIChatRequestToolChoiceEnumType, OpenAIChatRequestToolChoiceFunction, type OpenAIChatRequestToolChoiceFunctionType, OpenAIChatRequestToolMessage, type OpenAIChatRequestToolMessageType, type OpenAIChatRequestToolType, type OpenAIChatRequestType, OpenAIChatRequestUserMessage, type OpenAIChatRequestUserMessageType, OpenAICompleteChatResponse, type OpenAICompleteChatResponseType, OpenAIEmbeddingModelConfigs, OpenAIEmbeddingModelModalities, OpenAIEmbeddingModelModalitiesEnum, OpenAIEmbeddingRequest, OpenAIEmbeddingRequestInput, type OpenAIEmbeddingRequestInputType, type OpenAIEmbeddingRequestType, OpenAIGetEmbeddingsResponse, OpenAIStreamChatResponse, type OpenAIStreamChatResponseType, OpenAIToolCallsCompleteChatResponse, OpenAIToolCallsStreamChatResponse, ProviderLiteral, Text_Embedding_3_Large, Text_Embedding_3_LargeLiteral, Text_Embedding_3_LargeSchema, Text_Embedding_3_Large_Options, type Text_Embedding_3_Large_OptionsType, Text_Embedding_3_Small, Text_Embedding_3_SmallLiteral, Text_Embedding_3_SmallSchema, Text_Embedding_3_Small_Options, type Text_Embedding_3_Small_OptionsType, Text_Embedding_Ada002, Text_Embedding_Ada002Literal, Text_Embedding_Ada002Schema, Text_Embedding_Ada002_Options, type Text_Embedding_Ada002_OptionsType, dimensions, encodingFormat, frequencyPenalty, logProbs, maxTokens, presencePenalty, seed, stop, temperature, toolChoice, topLogProbs, topP };
