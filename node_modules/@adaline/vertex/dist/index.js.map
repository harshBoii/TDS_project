{"version":3,"sources":["../src/models/chat-models/base-chat-model.vertex.ts","../../../../packages/types/src/message/roles.ts","../../../../packages/types/src/message/content/image-content.ts","../../../../packages/types/src/message/content/reasoning-content.ts","../../../../packages/types/src/message/content/text-content.ts","../../../../packages/types/src/message/content/tool-call-content.ts","../../../../packages/types/src/message/content/tool-response-content.ts","../../../../packages/types/src/message/content/content.ts","../../../../packages/types/src/message/message.ts","../../../../packages/types/src/chat/chat-response.ts","../../../../packages/types/src/config/config.ts","../../../../packages/types/src/config/response-schema.config.ts","../../../../packages/types/src/embedding/embedding-requests.ts","../../../../packages/types/src/embedding/embedding-response.ts","../../../../packages/types/src/errors/gateway-base.error.ts","../../../../packages/types/src/pricing/pricing-tiers.ts","../../../../packages/types/src/tool/function-tool.ts","../../../../packages/types/src/tool/tool.ts","../../../../packages/types/src/utils/create-message.ts","../../../../packages/provider/src/errors/provider.error.ts","../../../../packages/provider/src/errors/model.error.ts","../../../../packages/provider/src/errors/model-response.error.ts","../../../../packages/provider/src/errors/invalid-model-request.error.ts","../../../../packages/provider/src/errors/invalid-config.error.ts","../../../../packages/provider/src/errors/invalid-messages.error.ts","../../../../packages/provider/src/errors/invalid-tools.error.ts","../../../../packages/provider/src/errors/invalid-embedding-requests.error.ts","../../../../packages/provider/src/types/config/multi-string-config-item.ts","../../../../packages/provider/src/types/config/object-schema-config-item.ts","../../../../packages/provider/src/types/config/range-config-item.ts","../../../../packages/provider/src/types/config/select-boolean-config-item.ts","../../../../packages/provider/src/types/config/select-string-config-item.ts","../../../../packages/provider/src/types/config/config-item.ts","../../../../packages/provider/src/model/chat-model/chat-model.schema.v1.ts","../../../../packages/provider/src/model/embedding-model/embedding-model.schema.v1.ts","../../../../packages/provider/src/types/headers.ts","../../../../packages/provider/src/types/params.ts","../../../../packages/provider/src/types/url.ts","../../../../packages/provider/src/utils/common-config.def.chat-model.ts","../../../../packages/provider/src/utils/common-config.def.word-embedding.ts","../../../../packages/provider/src/utils/remove-undefined-entries.ts","../../../../packages/provider/src/utils/url.ts","../../google/src/configs/chat-model/base.config.chat-model.google.ts","../../google/src/configs/chat-model/common.config.chat-model.google.ts","../../google/src/configs/chat-model/c1.config.chat-model.google.ts","../../google/src/configs/chat-model/reasoning.config.chat-model.google.ts","../../google/src/configs/embedding-model/common.config.embedding-model.google.ts","../../google/src/configs/embedding-model/base.config.embedding-model.google.ts","../../google/src/configs/configs.google.ts","../../google/src/provider/provider.google.ts","../../google/src/models/pricing.json","../../google/src/models/chat-models/types/roles.chat-model.google.ts","../../google/src/models/chat-models/types/modalities.chat-model.google.ts","../../google/src/models/chat-models/types/response.chat-model.google.ts","../../google/src/models/chat-models/types/request.chat-model.google.ts","../../google/src/models/chat-models/base-chat-model.google.ts","../../google/src/models/chat-models/base-gemini-1-chat-model.google.ts","../../google/src/models/chat-models/gemini-1.0-pro-001.google.ts","../../google/src/models/chat-models/gemini-1.0-pro-latest.google.ts","../../google/src/models/chat-models/gemini-1.0-pro-vision.google.ts","../../google/src/models/chat-models/gemini-1.0-pro.google.ts","../../google/src/models/chat-models/gemini-1.5-flash-001.google.ts","../../google/src/models/chat-models/gemini-1.5-flash-002.google.ts","../../google/src/models/chat-models/gemini-1.5-flash-latest.google.ts","../../google/src/models/chat-models/gemini-1.5-flash.google.ts","../../google/src/models/chat-models/gemini-1.5-pro-001.google.ts","../../google/src/models/chat-models/gemini-1.5-pro-002.google.ts","../../google/src/models/chat-models/gemini-1.5-pro-latest.google.ts","../../google/src/models/chat-models/gemini-1.5-pro.google.ts","../../google/src/models/chat-models/gemini-2.0-flash-exp.google.ts","../../google/src/models/chat-models/gemini-2.5-flash-preview-04-17.google.ts","../../google/src/models/chat-models/gemini-2.5-pro-preview-03-25.google.ts","../../google/src/models/chat-models/gemini-pro-vision.google.ts","../../google/src/models/chat-models/gemini-pro.google.ts","../../google/src/models/embedding-models/types/modalitites.embedding-model.google.ts","../../google/src/models/embedding-models/types/response.embedding-model.google.ts","../../google/src/models/embedding-models/types/request.embedding-model.google.ts","../../google/src/models/embedding-models/base-embedding-model.google.ts","../../google/src/models/embedding-models/text-embedding-001.google.ts","../../google/src/models/embedding-models/text-embedding-004.google.ts","../src/provider/provider.vertex.ts","../src/models/pricing.json","../src/models/chat-models/gemini-1-0-pro-001.vertex.ts","../src/models/chat-models/gemini-1-0-pro-vision.vertex.ts","../src/models/chat-models/gemini-1-0-pro.vertex.ts","../src/models/chat-models/gemini-1-5-flash-001.vertex.ts","../src/models/chat-models/gemini-1-5-flash-002.vertex.ts","../src/models/chat-models/gemini-1-5-flash.vertex.ts","../src/models/chat-models/gemini-1-5-pro-001.vertex.ts","../src/models/chat-models/gemini-1-5-pro-002.vertex.ts","../src/models/chat-models/gemini-1-5-pro.vertex.ts","../src/models/chat-models/gemini-2-0-flash-exp.vertex.ts","../src/models/embedding-models/types/modalitites.embedding-model.vertex.ts","../src/models/embedding-models/types/response.embedding-model.vertex.ts","../src/models/embedding-models/types/request.embedding-model.vertex.ts","../src/models/embedding-models/base-embedding-model.vertex.ts","../src/configs/embedding-model/common.config.embedding-model.vertex.ts","../src/configs/embedding-model/base.config.embedding-model.vertex.ts","../src/configs/configs.vertex.ts","../src/models/embedding-models/text-embedding-004.vertex.ts","../src/models/embedding-models/text-multilingual-embedding-002.vertex.ts","../src/models/embedding-models/textembedding-gecko-multilingual-001.vertex.ts","../src/models/embedding-models/textembedding-gecko-003.vertex.ts"],"names":["SystemRoleLiteral","UserRoleLiteral","AssistantRoleLiteral","ToolRoleLiteral","RoleLiterals","RoleEnum","z","PartialRoleLiterals","PartialRoleEnum","ImageModalityLiteral","Base64ImageContentTypeLiteral","Base64ImageContentMediaTypeLiterals","Base64ImageContentValue","UrlImageContentTypeLiteral","UrlImageContentValue","ImageContentValue","ImageContentDetails","ImageContentDetailsLiteral","ImageContent","Metadata","ReasoningModalityLiteral","PartialReasoningModalityLiteral","ReasoningContentTypeLiteral","RedactedReasoningContentTypeLiteral","ReasoningContentValue","RedactedReasoningContentValue","ReasoningContentValueUnion","ReasoningContent","PartialReasoningContentValue","PartialReasoningContentValueUnion","PartialReasoningContent","TextModalityLiteral","TextContent","PartialTextModalityLiteral","PartialTextContent","ToolCallModalityLiteral","ToolCallContent","PartialToolCallModalityLiteral","PartialToolCallContent","ToolResponseModalityLiteral","ToolResponseContent","ModalityLiterals","ModalityEnum","Content","TextContentMetadata","ImageContentMetadata","ToolCallContentMetadata","ToolResponseContentMetadata","ReasoningContentMetadata","PartialModalityLiterals","PartialModalityEnum","PartialContent","PartialTextContentMetadata","PartialToolCallContentMetadata","PartialReasoningContentMetadata","Message","Role","MessageMetadata","PartialMessage","ChatUsage","ChatBaseLogProb","ChatLogProb","ChatLogProbs","PartialChatUsage","Config","ResponseSchemaTypes","ResponseSchemaTypesLiteral","ResponseSchemaProperty","ResponseSchemaStructure","ResponseSchema","EmbeddingTextModalityLiteral","EmbeddingTokenModalityLiteral","EmbeddingModalityLiterals","EmbeddingModalityEnum","TextEmbeddingRequests","TokenEmbeddingRequests","EmbeddingRequests","FloatEmbeddingLiteral","FloatEmbedding","Base64EmbeddingLiteral","Base64Embedding","EmbeddingsUsage","EmbeddingResponse","safeStringify","obj","seen","key","value","getErrorMessage","error","GatewayBaseErrorLiteral","GatewayBaseError","_GatewayBaseError","info","cause","name","ChatModelTokenPairPrice","ChatModelTokenTypePrice","ChatModelTokenRangePrice","t","ChatModelPrice","data","ctx","tokenRanges","i","prev","curr","last","FunctionToolLiteral","FunctionParameterTypesLiteral","FunctionParameter","Function","ToolTypesLiteral","FunctionTool","ToolLiterals","Tool","FunctionToolMetadata","createTextContent","content","createToolCallContent","index","id","args","createPartialTextMessage","role","createPartialToolCallMessage","ProviderErrorLiteral","ProviderError","_ProviderError","ModelErrorLiteral","ModelError","_ModelError","ModelResponseErrorLiteral","ModelResponseError","_ModelResponseError","InvalidModelRequestErrorLiteral","InvalidModelRequestError","_InvalidModelRequestError","InvalidConfigErrorLiteral","InvalidConfigError","_InvalidConfigError","InvalidMessagesErrorLiteral","InvalidMessagesError","_InvalidMessagesError","InvalidToolsErrorLiteral","InvalidToolsError","_InvalidToolsError","InvalidEmbeddingRequestsErrorLiteral","InvalidEmbeddingRequestsError","_InvalidEmbeddingRequestsError","MultiStringConfigItemTypeLiteral","MultiStringConfigItemDef","MultiStringConfigItemSchema","max","MultiStringConfigItem","__spreadValues","ObjectSchemaConfigItemTypeLiteral","ObjectSchemaConfigItemDef","ObjectSchemaConfigItemSchema","schema","ObjectSchemaConfigItem","RangeConfigItemTypeLiteral","RangeConfigItemDef","RangeConfigItemSchema","min","step","defaultValue","RangeConfigItem","SelectBooleanConfigItemTypeLiteral","SelectBooleanConfigItemDef","SelectBooleanConfigItemSchema","SelectBooleanConfigItem","SelectStringConfigItemTypeLiteral","SelectStringConfigItemDef","SelectStringConfigItemSchema","choices","SelectStringConfigItem","ConfigItemLiterals","ConfigItemEnum","ConfigItemDef","ChatModelSchema","Roles","Modalities","config","_a","_b","defKeys","schemaKeys","EmbeddingModelSchema","TEMPERATURE","MAX_TOKENS","MAX_REASONING_TOKENS","STOP","TOP_A","TOP_P","TOP_K","MIN_P","FREQUENCY_PENALTY","PRESENCE_PENALTY","SEED","REPETITION_PENALTY","LOG_PROBS","TOP_LOG_PROBS","ECHO","RESPONSE_FORMAT","RESPONSE_FORMAT_WITH_SCHEMA","RESPONSE_SCHEMA","CHAT_CONFIG","DIMENSIONS","ENCODING_FORMAT","EMBEDDING_CONFIG","removeUndefinedEntries","record","_","urlWithoutTrailingSlash","url","wt","vt","Nt","No","It","Lt","le","s","e","Dt","Io","E","Lo","S","n","r","l","a","Do","no","p","C","P","Fo","temperature","_default","maxTokens","maxOutputTokens","stop","maxSequences","topP","topK","frequencyPenalty","presencePenalty","seed","toolChoice","safetySettings","reasoningEnabled","ChatModelBaseConfigSchema","maxTemperature","defaultTemperature","defaultTopP","ChatModelBaseConfigDef","ChatModelC1ConfigSchema","defaultTopK","ChatModelC1ConfigDef","ChatModelReasoningConfigSchema","ChatModelReasoningConfigDef","dimensions","maxDimensions","EmbeddingModelBaseConfigSchema","EmbeddingModelBaseConfigDef","GoogleChatModelConfigs","GoogleEmbeddingModelConfigs","ProviderLiteral","Google","GeminiProLiteral","GeminiPro","GeminiProOptions","GeminiProSchema","GeminiProVisionLiteral","GeminiProVision","GeminiProVisionOptions","GeminiProVisionSchema","Gemini1_5Flash001Literal","Gemini1_5Flash001","Gemini1_5Flash001Options","Gemini1_5Flash001Schema","Gemini1_5Flash002Literal","Gemini1_5Flash002","Gemini1_5Flash002Options","Gemini1_5Flash002Schema","Gemini1_5FlashLatestLiteral","Gemini1_5FlashLatest","Gemini1_5FlashLatestOptions","Gemini1_5FlashLatestSchema","Gemini1_5FlashLiteral","Gemini1_5Flash","Gemini1_5FlashOptions","Gemini1_5FlashSchema","Gemini1_5Pro001Literal","Gemini1_5Pro001","Gemini1_5Pro001Options","Gemini1_5Pro001Schema","Gemini1_5Pro002Literal","Gemini1_5Pro002","Gemini1_5Pro002Options","Gemini1_5Pro002Schema","Gemini1_5ProLatestLiteral","Gemini1_5ProLatest","Gemini1_5ProLatestOptions","Gemini1_5ProLatestSchema","Gemini1_5ProLiteral","Gemini1_5Pro","Gemini1_5ProOptions","Gemini1_5ProSchema","Gemini1_0ProLiteral","Gemini1_0Pro","Gemini1_0ProOptions","Gemini1_0ProSchema","Gemini1_0ProVisionLiteral","Gemini1_0ProVision","Gemini1_0ProVisionOptions","Gemini1_0ProVisionSchema","Gemini1_0ProLatestLiteral","Gemini1_0ProLatest","Gemini1_0ProLatestOptions","Gemini1_0ProLatestSchema","Gemini1_0Pro_001Literal","Gemini1_0Pro_001","Gemini1_0Pro_001Options","Gemini1_0Pro_001Schema","Gemini2_0FlashExpLiteral","Gemini2_0FlashExp","Gemini2_0FlashExpOptions","Gemini2_0FlashExpSchema","Gemini2_5FlashPreview0417Literal","Gemini2_5FlashPreview0417","Gemini2_5FlashPreview0417Options","Gemini2_5FlashPreview0417Schema","Gemini2_5ProPreview0325Literal","Gemini2_5ProPreview0325","Gemini2_5ProPreview0325Options","Gemini2_5ProPreview0325Schema","Text_Embedding_001Literal","Text_Embedding_001","Text_Embedding_001Options","Text_Embedding_001Schema","Text_Embedding_004Literal","Text_Embedding_004","Text_Embedding_004Options","Text_Embedding_004Schema","acc","options","modelName","model","parsedOptions","pricing_default","GoogleChatModelRoles","GoogleChatAssistantRoleLiteral","GoogleChatToolRoleLiteral","GoogleChatModelRolesMap","GoogleChatModelModalities","GoogleChatModelModalitiesEnum","GoogleChatModelTextVisionModalities","GoogleChatModelTextVisionModalitiesEnum","GoogleChatModelTextToolModalities","GoogleChatModelTextToolModalitiesEnum","GoogleCompleteChatTextResponse","GoogleCompleteChatToolResponse","GoogleCompleteChatResponse","GoogleStreamChatTextResponse","GoogleStreamChatToolResponse","GoogleStreamChatResponse","GoogleChatContentPartText","GoogleChatContentPartInlineData","GoogleChatContentPartFunctionCall","GoogleChatContentPartFunctionResponse","GoogleChatContent","GoogleChatSystemInstruction","GoogleChatTool","GoogleChatToolConfig","GoogleChatGenerationConfig","GoogleChatSafetySettings","GoogleChatRequest","BaseChatModelOptions","BaseChatModel","modelSchema","responseHeaders","messages","message","request","safeRequest","parsedRequest","systemInstruction","generationConfig","toolConfig","_config","part","_content","c","tools","tool","_toolChoice","_parsedConfig","parsedConfig","transformedConfig","def","paramKey","paramValue","__spreadProps","configToolChoice","stripBase64Prefix","prefixMatch","parsedMessages","parsedMessage","nonSystemMessages","assistantContent","userContent","base64Data","toolResponseContent","getNextExpectedRoles","parsedTool","__async","resolve","transformedMessages","transformedTools","response","safe","parsedResponse","usage","contentItem","safetyRatings","rating","chunk","buffer","__asyncGenerator","lines","line","completeLine","structuredLine","partialResponse","messagePart","toolCall","headers","query","__yieldStar","newData","newBuffer","currentIndex","newlineIndex","jsonStr","sanitizedHeaders","BaseChatModelGemini1","systemUserMessage","Gemini1_0Pro_001Description","Gemini1_0ProLatestDescription","Gemini1_0ProVisionDescription","Gemini1_0ProDescription","Gemini1_5Flash001Description","Gemini1_5Flash002Description","Gemini1_5FlashLatestDescription","Gemini1_5FlashDescription","Gemini1_5Pro001Description","Gemini1_5Pro002Description","Gemini1_5ProLatestDescription","Gemini1_5ProDescription","Gemini2_0FlashExpDescription","Gemini2_5FlashPreview0417Description","Gemini2_5ProPreview0325Description","GeminiProVisionDescription","GeminiProDescription","GoogleEmbeddingModelModalities","GoogleEmbeddingModelModalitiesEnum","GoogleGetEmbeddingsResponse","GoogleEmbeddingRequestInput","GoogleEmbeddingRequest","BaseEmbeddingModelOptions","BaseEmbeddingModel","requests","embeddingRequests","_parsedRequests","_requests","embeddings","embedding","Text_Embedding_001_Description","Text_Embedding_004_Description","Vertex","Gemini1_0Pro001Literal","Gemini1_0Pro001","Gemini1_0Pro001Options","Gemini1_0Pro001Schema","Text_Multilingual_Embedding_002Literal","Text_Multilingual_Embedding_002","Text_Multilingual_Embedding_002Options","Text_Multilingual_Embedding_002Schema","Text_Embedding_Gecko_003Literal","Text_Embedding_Gecko_003","Text_Embedding_Gecko_003Options","Text_Embedding_Gecko_003Schema","Text_Embedding_Gecko_Multilingual_001Literal","Text_Embedding_Gecko_Multilingual_001","Text_Embedding_Gecko_Multilingual_001Options","Text_Embedding_Gecko_Multilingual_001Schema","j","location","projectId","publisher","BaseChatModelVertex","M","baseUrl","B","ao","lo","mo","po","co","ho","fo","uo","Co","To","VertexEmbeddingModelModalities","Fe","VertexEmbeddingModelModalitiesEnum","VertexGetEmbeddingsResponse","VertexEmbeddingRequest","_c","_d","N","pt","Vt","instance","ft","K","prediction","Tn","ct","Yt","autoTruncate","VertexEmbeddingModelConfigs","At","Text_Multilingual_Embedding_002_Description","Text_Embedding_Gecko_Multilingual_001_Description","Text_Embedding_Gecko_003_Description"],"mappings":"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","file":"index.js","sourcesContent":["import { z } from \"zod\";\n\nimport { BaseChatModel } from \"@adaline/google\";\nimport { ChatModelSchemaType, HeadersType, ModelError, ModelResponseError } from \"@adaline/provider\";\nimport { ChatModelPriceType } from \"@adaline/types\";\n\nimport { Vertex } from \"../../provider/provider.vertex\";\nimport pricingData from \"../pricing.json\";\n\nconst BaseChatModelOptions = z.object({\n  accessToken: z.string(),\n  modelName: z.string(),\n  baseUrl: z.string().url().optional(),\n  location: z.string().optional(),\n  projectId: z.string().optional(),\n  publisher: z.string().optional(),\n});\ntype BaseChatModelOptionsType = z.infer<typeof BaseChatModelOptions>;\n\nclass BaseChatModelVertex extends BaseChatModel {\n  readonly version = \"v1\" as const;\n  modelSchema: ChatModelSchemaType;\n  modelName: string;\n\n  private readonly accessToken: string;\n  private readonly location: string | undefined;\n  private readonly projectId: string | undefined;\n  private readonly publisher: string | undefined;\n\n  constructor(modelSchema: ChatModelSchemaType, options: BaseChatModelOptionsType) {\n    const parsedOptions = BaseChatModelOptions.parse(options);\n    let baseUrl: string | undefined;\n\n    if (parsedOptions.baseUrl) {\n      baseUrl = parsedOptions.baseUrl;\n    } else if (parsedOptions.location && parsedOptions.projectId) {\n      baseUrl = Vertex.baseUrl(parsedOptions.location, parsedOptions.projectId, parsedOptions.publisher);\n    } else {\n      throw new ModelError({\n        info: \"Either 'baseUrl' must be provided or 'location' and 'projectId' must be provided\",\n        cause: new Error(\"Either 'baseUrl' must be provided or 'location' and 'projectId' must be provided\"),\n      });\n    }\n\n    super(modelSchema, {\n      modelName: parsedOptions.modelName,\n      apiKey: \"random-api-key\",\n      completeChatUrl: `${baseUrl}/models/${parsedOptions.modelName}:generateContent`,\n      streamChatUrl: `${baseUrl}/models/${parsedOptions.modelName}:streamGenerateContent`,\n    });\n\n    this.modelSchema = modelSchema;\n    this.modelName = parsedOptions.modelName;\n    this.accessToken = parsedOptions.accessToken;\n    this.location = parsedOptions.location;\n    this.projectId = parsedOptions.projectId;\n    this.publisher = parsedOptions.publisher;\n  }\n\n  getDefaultHeaders(): HeadersType {\n    return {\n      ...super.getDefaultHeaders(),\n      Authorization: `Bearer ${this.accessToken}`,\n    };\n  }\n  getModelPricing(): ChatModelPriceType {\n    // Check if the modelName exists in pricingData before accessing it\n    if (!(this.modelName in pricingData)) {\n      throw new ModelResponseError({\n        info: `Invalid model pricing for model : '${this.modelName}'`,\n        cause: new Error(`No pricing configuration found for model \"${this.modelName}\"`),\n      });\n    }\n\n    const entry = pricingData[this.modelName as keyof typeof pricingData];\n    return entry as ChatModelPriceType;\n  }\n}\n\nexport { BaseChatModelOptions, BaseChatModelVertex, type BaseChatModelOptionsType };\n","import { z } from \"zod\";\n\nconst SystemRoleLiteral = \"system\" as const;\nconst UserRoleLiteral = \"user\" as const;\nconst AssistantRoleLiteral = \"assistant\" as const;\nconst ToolRoleLiteral = \"tool\" as const;\n\nconst RoleLiterals = [SystemRoleLiteral, UserRoleLiteral, AssistantRoleLiteral, ToolRoleLiteral] as const;\nconst RoleEnum = z.enum(RoleLiterals);\ntype RoleEnumType = z.infer<typeof RoleEnum>;\n\nconst PartialRoleLiterals = [AssistantRoleLiteral] as const;\nconst PartialRoleEnum = z.enum(PartialRoleLiterals);\ntype PartialRoleEnumType = z.infer<typeof PartialRoleEnum>;\n\nexport {\n  UserRoleLiteral,\n  ToolRoleLiteral,\n  SystemRoleLiteral,\n  AssistantRoleLiteral,\n  RoleEnum,\n  RoleLiterals,\n  PartialRoleEnum,\n  PartialRoleLiterals,\n  type RoleEnumType,\n  type PartialRoleEnumType,\n};\n","import { z } from \"zod\";\n\nconst ImageModalityLiteral = \"image\" as const;\n\nconst Base64ImageContentTypeLiteral = \"base64\" as const;\nconst Base64ImageContentMediaTypeLiterals = [\"png\", \"jpeg\", \"webp\", \"gif\"] as const;\nconst Base64ImageContentValue = z.object({\n  type: z.literal(Base64ImageContentTypeLiteral),\n  base64: z.string(),\n  mediaType: z.enum(Base64ImageContentMediaTypeLiterals),\n});\ntype Base64ImageContentValueType = z.infer<typeof Base64ImageContentValue>;\n\nconst UrlImageContentTypeLiteral = \"url\" as const;\nconst UrlImageContentValue = z.object({\n  type: z.literal(UrlImageContentTypeLiteral),\n  url: z.string(),\n});\ntype UrlImageContentValueType = z.infer<typeof UrlImageContentValue>;\n\nconst ImageContentValue = z.discriminatedUnion(\"type\", [Base64ImageContentValue, UrlImageContentValue]);\ntype ImageContentValueType = z.infer<typeof ImageContentValue>;\n\nconst ImageContentDetails = [\"low\", \"medium\", \"high\", \"auto\"] as const;\nconst ImageContentDetailsLiteral = z.enum(ImageContentDetails);\ntype ImageContentDetailsLiteralType = z.infer<typeof ImageContentDetailsLiteral>;\nconst ImageContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ImageModalityLiteral),\n    detail: ImageContentDetailsLiteral,\n    value: ImageContentValue,\n    metadata: Metadata,\n  });\ntype ImageContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ImageContent<M>>>;\n\nexport {\n  Base64ImageContentValue,\n  ImageContent,\n  ImageContentDetails,\n  ImageContentDetailsLiteral,\n  ImageModalityLiteral,\n  UrlImageContentValue,\n  UrlImageContentTypeLiteral,\n  Base64ImageContentTypeLiteral,\n  Base64ImageContentMediaTypeLiterals,\n  type Base64ImageContentValueType,\n  type ImageContentDetailsLiteralType,\n  type ImageContentType,\n  type ImageContentValueType,\n  type UrlImageContentValueType,\n};\n","import { z } from \"zod\";\n\nconst ReasoningModalityLiteral = \"reasoning\" as const;\nconst PartialReasoningModalityLiteral = \"partial-reasoning\" as const;\n\nconst ReasoningContentTypeLiteral = \"thinking\" as const;\nconst RedactedReasoningContentTypeLiteral = \"redacted\" as const;\n\nconst ReasoningContentValue = z.object({\n  type: z.literal(ReasoningContentTypeLiteral),\n  thinking: z.string(),\n  signature: z.string(),\n});\ntype ReasoningContentValueType = z.infer<typeof ReasoningContentValue>;\n\nconst RedactedReasoningContentValue = z.object({\n  type: z.literal(RedactedReasoningContentTypeLiteral),\n  data: z.string()\n});\ntype RedactedReasoningContentValueType = z.infer<typeof RedactedReasoningContentValue>;\n\nconst ReasoningContentValueUnion = z.discriminatedUnion(\"type\", [ ReasoningContentValue, RedactedReasoningContentValue ]);\ntype ReasoningContentValueUnionType = z.infer<typeof ReasoningContentValueUnion>;\n\nconst ReasoningContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ReasoningModalityLiteral),\n    value: ReasoningContentValueUnion,\n    metadata: Metadata,\n  });\n\ntype ReasoningContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ReasoningContent<M>>>;\n\nconst PartialReasoningContentValue = z.object({\n  type: z.literal(ReasoningContentTypeLiteral),\n  thinking: ReasoningContentValue.shape.thinking.optional(),\n  signature: ReasoningContentValue.shape.signature.optional(),\n});\nconst PartialReasoningContentValueUnion = z.discriminatedUnion(\"type\", [ \n  PartialReasoningContentValue, \n  RedactedReasoningContentValue \n]);\n\nconst PartialReasoningContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(PartialReasoningModalityLiteral),\n    value: PartialReasoningContentValueUnion,\n    metadata: Metadata,\n  });\ntype PartialReasoningContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof PartialReasoningContent<M>>>;\n\nexport {\n  ReasoningContent,\n  PartialReasoningContent,\n  PartialReasoningModalityLiteral,\n  ReasoningContentTypeLiteral,\n  ReasoningContentValue,\n  PartialReasoningContentValue,\n  ReasoningContentValueUnion,\n  PartialReasoningContentValueUnion,\n  ReasoningModalityLiteral,\n  RedactedReasoningContentTypeLiteral,\n  RedactedReasoningContentValue,\n  type PartialReasoningContentType,\n  type ReasoningContentType,\n  type ReasoningContentValueType,\n  type ReasoningContentValueUnionType,\n  type RedactedReasoningContentValueType,\n};\n","import { z } from \"zod\";\n\nconst TextModalityLiteral = \"text\" as const;\n\nconst TextContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(TextModalityLiteral),\n    value: z.string(),\n    metadata: Metadata,\n  });\ntype TextContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof TextContent<M>>>;\nconst PartialTextModalityLiteral = \"partial-text\" as const;\n\nconst PartialTextContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(PartialTextModalityLiteral),\n    value: z.string(),\n    metadata: Metadata,\n  });\ntype PartialTextContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof PartialTextContent<M>>>;\n\nexport {\n  TextContent,\n  PartialTextContent,\n  TextModalityLiteral,\n  PartialTextModalityLiteral,\n  type TextContentType,\n  type PartialTextContentType,\n};\n","import { z } from \"zod\";\n\nconst ToolCallModalityLiteral = \"tool-call\" as const;\n\nconst ToolCallContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ToolCallModalityLiteral),\n    index: z.number().int().nonnegative(),\n    id: z.string().min(1),\n    name: z.string().min(1),\n    arguments: z.string(),\n    metadata: Metadata,\n  });\ntype ToolCallContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ToolCallContent<M>>>;\nconst PartialToolCallModalityLiteral = \"partial-tool-call\" as const;\n\nconst PartialToolCallContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(PartialToolCallModalityLiteral),\n    index: z.number().int().nonnegative(),\n    id: z.string().optional(),\n    name: z.string().optional(),\n    arguments: z.string().optional(),\n    metadata: Metadata,\n  });\ntype PartialToolCallContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof PartialToolCallContent<M>>>;\n\nexport {\n  ToolCallContent,\n  PartialToolCallContent,\n  ToolCallModalityLiteral,\n  PartialToolCallModalityLiteral,\n  type ToolCallContentType,\n  type PartialToolCallContentType,\n};\n","import { z } from \"zod\";\n\nconst ToolResponseModalityLiteral = \"tool-response\" as const;\n\nconst ToolResponseContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ToolResponseModalityLiteral),\n    index: z.number().int().nonnegative(),\n    id: z.string().min(1),\n    name: z.string().min(1),\n    data: z.string(),\n    metadata: Metadata,\n  });\ntype ToolResponseContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ToolResponseContent<M>>>;\n\nexport { ToolResponseContent, ToolResponseModalityLiteral, type ToolResponseContentType };\n","import { z } from \"zod\";\n\nimport { ImageContent, ImageModalityLiteral } from \"./image-content\";\nimport { PartialReasoningContent, PartialReasoningModalityLiteral, ReasoningContent, ReasoningModalityLiteral } from \"./reasoning-content\";\nimport { PartialTextContent, PartialTextModalityLiteral, TextContent, TextModalityLiteral } from \"./text-content\";\nimport { PartialToolCallContent, PartialToolCallModalityLiteral, ToolCallContent, ToolCallModalityLiteral } from \"./tool-call-content\";\nimport { ToolResponseContent, ToolResponseModalityLiteral } from \"./tool-response-content\";\n\nconst ModalityLiterals = [\n  TextModalityLiteral,\n  ImageModalityLiteral,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n  ReasoningModalityLiteral,\n] as const;\nconst ModalityEnum = z.enum(ModalityLiterals);\ntype ModalityEnumType = z.infer<typeof ModalityEnum>;\n\nconst Content = <\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n  TCCM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  TextContentMetadata: TCM = z.undefined() as TCM,\n  ImageContentMetadata: ICM = z.undefined() as ICM,\n  ToolCallContentMetadata: CCM = z.undefined() as CCM,\n  ToolResponseContentMetadata: RCM = z.undefined() as RCM,\n  ReasoningContentMetadata: TCCM = z.undefined() as TCCM\n) =>\n  z.discriminatedUnion(\"modality\", [\n    TextContent(TextContentMetadata),\n    ImageContent(ImageContentMetadata),\n    ToolCallContent(ToolCallContentMetadata),\n    ToolResponseContent(ToolResponseContentMetadata),\n    ReasoningContent(ReasoningContentMetadata),\n  ]);\ntype ContentType<\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n> = z.infer<ReturnType<typeof Content<TCM, ICM, CCM, RCM>>>;\n\nconst PartialModalityLiterals = [PartialTextModalityLiteral, PartialToolCallModalityLiteral, PartialReasoningModalityLiteral] as const;\nconst PartialModalityEnum = z.enum(PartialModalityLiterals);\ntype PartialModalityEnumType = z.infer<typeof PartialModalityEnum>;\n\nconst PartialContent = <\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  PartialTextContentMetadata: TCM = z.undefined() as TCM,\n  PartialToolCallContentMetadata: CCM = z.undefined() as CCM,\n  PartialReasoningContentMetadata: z.ZodTypeAny = z.undefined() as z.ZodTypeAny as RCM\n) =>\n  z.discriminatedUnion(\"modality\", [\n    PartialTextContent(PartialTextContentMetadata),\n    PartialToolCallContent(PartialToolCallContentMetadata),\n    PartialReasoningContent(PartialReasoningContentMetadata),\n  ]);\ntype PartialContentType<TCM extends z.ZodTypeAny = z.ZodUndefined, CCM extends z.ZodTypeAny = z.ZodUndefined> = z.infer<\n  ReturnType<typeof PartialContent<TCM, CCM>>\n>;\n\nexport {\n  Content,\n  ModalityEnum,\n  ModalityLiterals,\n  PartialContent,\n  PartialModalityEnum,\n  PartialModalityLiterals,\n  type ContentType,\n  type ModalityEnumType,\n  type PartialContentType,\n  type PartialModalityEnumType,\n};\n","import { z } from \"zod\";\n\nimport { Content, PartialContent } from \"./content\";\nimport { PartialRoleEnum, RoleEnum } from \"./roles\";\n\nconst Message = <\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n  RTCM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  Role: R = RoleEnum as unknown as R,\n  TextContentMetadata: TCM = z.undefined() as TCM,\n  ImageContentMetadata: ICM = z.undefined() as ICM,\n  ToolCallContentMetadata: CCM = z.undefined() as CCM,\n  ToolResponseContentMetadata: RCM = z.undefined() as RCM,\n  MessageMetadata: MM = z.undefined() as MM,\n  ReasoningContentMetadata: z.ZodTypeAny = z.undefined() as RTCM\n) =>\n  z.object({\n    role: Role,\n    content: z.array(\n      Content(TextContentMetadata, ImageContentMetadata, ToolCallContentMetadata, ToolResponseContentMetadata, ReasoningContentMetadata)\n    ),\n    metadata: MessageMetadata,\n  });\ntype MessageType<\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n  RTCM extends z.ZodTypeAny = z.ZodUndefined,\n> = z.infer<ReturnType<typeof Message<R, TCM, ICM, CCM, RCM, MM, RTCM>>>;\n\n// const PartialMessage = <\n//   R extends z.ZodEnum<[string, ...string[]]> = typeof PartialRoleEnum,\n//   TCM extends z.ZodTypeAny = z.ZodUndefined,\n//   CCM extends z.ZodTypeAny = z.ZodUndefined,\n//   MM extends z.ZodTypeAny = z.ZodUndefined,\n// >(\n//   Role: R = PartialRoleEnum as unknown as R,\n//   TextContentMetadata: TCM = z.undefined() as TCM,\n//   ToolCallContentMetadata: CCM = z.undefined() as CCM,\n//   MessageMetadata: MM = z.undefined() as MM,\n// ) => Message(\n//   Role,\n//   TextContentMetadata,\n//   undefined,\n//   ToolCallContentMetadata,\n//   undefined,\n//   MessageMetadata\n// ).omit({ content: true }).merge(z.object({\n//   partialContent: PartialContent(TextContentMetadata, ToolCallContentMetadata),\n// }));\nconst PartialMessage = <\n  R extends z.ZodEnum<[string, ...string[]]> = typeof PartialRoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n  RTCM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  Role: R = PartialRoleEnum as unknown as R,\n  TextContentMetadata: TCM = z.undefined() as TCM,\n  ToolCallContentMetadata: CCM = z.undefined() as CCM,\n  ReasoningContentMetadata: z.ZodTypeAny = z.undefined() as RTCM,\n  MessageMetadata: MM = z.undefined() as MM\n) =>\n  z.object({\n    role: Role,\n    partialContent: PartialContent(TextContentMetadata, ToolCallContentMetadata, ReasoningContentMetadata),\n    metadata: MessageMetadata,\n  });\ntype PartialMessageType<\n  R extends z.ZodEnum<[string, ...string[]]> = typeof PartialRoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n> = z.infer<ReturnType<typeof PartialMessage<R, TCM, CCM, MM>>>;\n\nexport { Message, PartialMessage, type MessageType, type PartialMessageType };\n","import { z } from \"zod\";\n\nimport { Message, PartialMessage } from \"./../message\";\n\nconst ChatUsage = z.object({\n  promptTokens: z.number().nonnegative(),\n  completionTokens: z.number().nonnegative(),\n  totalTokens: z.number().nonnegative(),\n});\ntype ChatUsageType = z.infer<typeof ChatUsage>;\n\nconst ChatBaseLogProb = z.object({\n  token: z.string(),\n  logProb: z.number(),\n  bytes: z.array(z.number().int()).nullable(),\n});\ntype ChatBaseLogProbType = z.infer<typeof ChatBaseLogProb>;\n\nconst ChatLogProb = ChatBaseLogProb.extend({\n  topLogProbs: z.array(ChatBaseLogProb),\n});\ntype ChatLogProbType = z.infer<typeof ChatLogProb>;\n\nconst ChatLogProbs = z.array(ChatLogProb);\ntype ChatLogProbsType = z.infer<typeof ChatLogProbs>;\n\nconst ChatResponse = z.object({\n  messages: z.array(Message()),\n  usage: ChatUsage.optional(),\n  logProbs: ChatLogProbs.optional(),\n});\ntype ChatResponseType = z.infer<typeof ChatResponse>;\n\nconst PartialChatUsage = z.object({\n  promptTokens: z.number().nonnegative().optional(),\n  completionTokens: z.number().nonnegative().optional(),\n  totalTokens: z.number().nonnegative().optional(),\n});\n\ntype PartialChatUsageType = z.infer<typeof PartialChatUsage>;\n\nconst PartialChatResponse = z.object({\n  partialMessages: z.array(PartialMessage()),\n  usage: PartialChatUsage.optional(),\n  logProbs: ChatLogProbs.optional(),\n});\ntype PartialChatResponseType = z.infer<typeof PartialChatResponse>;\n\nexport {\n  ChatBaseLogProb,\n  ChatLogProb,\n  ChatLogProbs,\n  ChatResponse,\n  ChatUsage,\n  PartialChatResponse,\n  PartialChatUsage,\n  type ChatBaseLogProbType,\n  type ChatLogProbsType,\n  type ChatLogProbType,\n  type ChatResponseType,\n  type ChatUsageType,\n  type PartialChatResponseType,\n  type PartialChatUsageType,\n};\n","import { z } from \"zod\";\n\nconst Config = <C extends z.ZodRecord<z.ZodString, z.ZodAny> = z.ZodRecord<z.ZodString, z.ZodAny>>(\n  Config: C = z.record(z.string(), z.any()).optional() as unknown as C\n) => Config;\ntype ConfigType<C extends z.ZodRecord<z.ZodString, z.ZodAny> = z.ZodRecord<z.ZodString, z.ZodAny>> = z.infer<ReturnType<typeof Config<C>>>;\n\nexport { Config, type ConfigType };\n","import { z } from \"zod\";\n\n// TODO: move to json schema 7 type and validator when implemented for tool types\nconst ResponseSchemaTypes = [\"object\", \"array\", \"number\", \"string\", \"boolean\", \"enum\"] as const;\nconst ResponseSchemaTypesLiteral = z.enum(ResponseSchemaTypes);\ntype ResponseSchemaTypesType = z.infer<typeof ResponseSchemaTypesLiteral>;\n\nconst ResponseSchemaProperty = z.object({\n  anyOf: z.array(z.any()).optional(),\n  type: z.union([ResponseSchemaTypesLiteral, z.array(z.union([ResponseSchemaTypesLiteral, z.literal(\"null\")]))]).optional(),\n  default: z.any().optional(),\n  title: z.string().optional(),\n  description: z.string().max(4096).optional(),\n  properties: z.record(z.any()).optional(),\n  required: z.array(z.string()).optional(),\n  minItems: z.number().int().min(0).optional(),\n  maxItems: z.number().int().optional(),\n  items: z.record(z.any()).optional(), // Recursive structure to handle nested arrays and objects\n  enum: z.array(z.union([z.string(), z.number(), z.boolean(), z.null()])).optional(), // Enum for allowed values\n  minimum: z.number().optional(), // Minimum value for number\n  maximum: z.number().optional(), // Maximum value for number\n  minLength: z.number().int().min(0).optional(), // Minimum length for string\n  maxLength: z.number().int().optional(), // Maximum length for string\n  $ref: z.string().optional(), // Reference to another schema\n});\ntype ResponseSchemaPropertyType = z.infer<typeof ResponseSchemaProperty>;\n\nconst ResponseSchemaStructure = z.object({\n  type: z.enum([\"object\"]),\n  required: z.array(z.string()),\n  $defs: z.record(z.any()).optional(),\n  properties: z.record(ResponseSchemaProperty),\n  additionalProperties: z.literal(false),\n});\ntype ResponseSchemaStructureType = z.infer<typeof ResponseSchemaStructure>;\n\nconst ResponseSchema = z\n  .object({\n    name: z\n      .string()\n      .regex(/^[a-zA-Z0-9_]{1,64}$/)\n      .max(64),\n    description: z.string().max(4096),\n    strict: z.boolean().optional(),\n    schema: ResponseSchemaStructure,\n  })\n  .optional();\ntype ResponseSchemaType = z.infer<typeof ResponseSchema>;\n\nexport {\n  ResponseSchema,\n  ResponseSchemaProperty,\n  ResponseSchemaStructure,\n  ResponseSchemaTypes,\n  ResponseSchemaTypesLiteral,\n  type ResponseSchemaTypesType,\n  type ResponseSchemaType,\n  type ResponseSchemaPropertyType,\n  type ResponseSchemaStructureType,\n};\n","import { z } from \"zod\";\n\nconst EmbeddingTextModalityLiteral = \"text\" as const;\nconst EmbeddingTokenModalityLiteral = \"token\" as const;\n\nconst EmbeddingModalityLiterals = [EmbeddingTextModalityLiteral, EmbeddingTokenModalityLiteral] as const;\nconst EmbeddingModalityEnum = z.enum(EmbeddingModalityLiterals);\ntype EmbeddingModalityEnumType = z.infer<typeof EmbeddingModalityEnum>;\n\nconst TextEmbeddingRequests = z.array(z.string().min(1));\ntype TextEmbeddingRequestsType = z.infer<typeof TextEmbeddingRequests>;\n\nconst TokenEmbeddingRequests = z.array(z.array(z.number().int().nonnegative()));\ntype TokenEmbeddingRequestsType = z.infer<typeof TokenEmbeddingRequests>;\n\nconst EmbeddingRequests = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.discriminatedUnion(\"modality\", [\n    z.object({\n      modality: z.literal(EmbeddingTextModalityLiteral),\n      metadata: Metadata,\n      requests: TextEmbeddingRequests,\n    }),\n    z.object({\n      modality: z.literal(EmbeddingTokenModalityLiteral),\n      metadata: Metadata,\n      requests: TokenEmbeddingRequests,\n    }),\n  ]);\ntype EmbeddingRequestsType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof EmbeddingRequests<M>>>;\n\nexport {\n  EmbeddingTextModalityLiteral,\n  EmbeddingTokenModalityLiteral,\n  EmbeddingModalityLiterals,\n  EmbeddingModalityEnum,\n  TextEmbeddingRequests,\n  TokenEmbeddingRequests,\n  EmbeddingRequests,\n  type EmbeddingRequestsType,\n  type EmbeddingModalityEnumType,\n  type TextEmbeddingRequestsType,\n  type TokenEmbeddingRequestsType,\n};\n","import { z } from \"zod\";\n\nconst FloatEmbeddingLiteral = \"float\" as const;\nconst FloatEmbedding = z.object({\n  index: z.number().int().nonnegative(),\n  embedding: z.array(z.number()),\n});\ntype FloatEmbeddingType = z.infer<typeof FloatEmbedding>;\n\nconst Base64EmbeddingLiteral = \"base64\" as const;\nconst Base64Embedding = z.object({\n  index: z.number().int().nonnegative(),\n  embedding: z.string().base64(),\n});\ntype Base64EmbeddingType = z.infer<typeof Base64Embedding>;\n\nconst EmbeddingsUsage = z.object({\n  totalTokens: z.number().int().nonnegative(),\n});\ntype EmbeddingsUsageType = z.infer<typeof EmbeddingsUsage>;\n\nconst EmbeddingResponse = z.discriminatedUnion(\"encodingFormat\", [\n  z.object({\n    encodingFormat: z.literal(FloatEmbeddingLiteral),\n    embeddings: z.array(FloatEmbedding),\n    usage: EmbeddingsUsage.optional(),\n  }),\n  z.object({\n    encodingFormat: z.literal(Base64EmbeddingLiteral),\n    embeddings: z.array(Base64Embedding),\n    usage: EmbeddingsUsage.optional(),\n  }),\n]);\ntype EmbeddingResponseType = z.infer<typeof EmbeddingResponse>;\n\nexport {\n  FloatEmbeddingLiteral,\n  Base64EmbeddingLiteral,\n  FloatEmbedding,\n  Base64Embedding,\n  EmbeddingsUsage,\n  EmbeddingResponse,\n  type FloatEmbeddingType,\n  type Base64EmbeddingType,\n  type EmbeddingsUsageType,\n  type EmbeddingResponseType,\n};\n","const safeStringify = (obj: unknown) => {\n  const seen = new WeakSet();\n  return JSON.stringify(obj, (key, value) => {\n    if (typeof value === \"object\" && value !== null) {\n      if (seen.has(value)) {\n        return; // Skip circular reference\n      }\n      seen.add(value);\n    }\n    return value;\n  });\n};\n\nconst getErrorMessage = (error: unknown | undefined): string => {\n  if (error == null) return \"unknown error\";\n  if (typeof error === \"string\") return error;\n  if (error instanceof Error) return error.message;\n  return safeStringify(error);\n};\n\nconst GatewayBaseErrorLiteral = \"GatewayBaseError\" as const;\nclass GatewayBaseError extends Error {\n  readonly name: string = GatewayBaseErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }, name?: string) {\n    super(`[${name ?? GatewayBaseErrorLiteral}]: ${info}\\nMessage: ${getErrorMessage(cause)}`);\n    this.info = info;\n    this.cause = cause;\n    this.name = name ?? GatewayBaseErrorLiteral;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isGatewayBaseError(error: unknown): error is GatewayBaseError {\n    return error instanceof GatewayBaseError;\n  }\n\n  toJSON(): object {\n    return {\n      name: this.name,\n      info: this.info,\n      cause: this.cause,\n      message: this.message,\n      stack: this.stack,\n    };\n  }\n}\n\nexport { GatewayBaseError };\n","import { z } from \"zod\";\n\n/**\n * A pair of per‑million‑token rates for a single price category (e.g., base input/output).\n * Represents the input and output cost for 1 million tokens within a specific category (like 'base') of a pricing tier.\n */\nconst ChatModelTokenPairPrice = z\n  .object({\n    inputPricePerMillion: z.number().nonnegative().describe(\"Price per 1M input tokens\"),\n    outputPricePerMillion: z.number().nonnegative().describe(\"Price per 1M output tokens\"),\n  })\n  .describe(\"Input/output price pair (per 1M tokens) for a specific category within a ChatModel pricing tier.\");\n\ntype ChatModelTokenPairPriceType = z.infer<typeof ChatModelTokenPairPrice>;\n\n/**\n * Defines the price categories (e.g., base) applicable within a single pricing tier (`ChatModelTokenRangePrice`).\n * Each category holds a `ChatModelTokenPairPrice`.\n */\nconst ChatModelTokenTypePrice = z\n  .object({\n    base: ChatModelTokenPairPrice.describe(\"Base (uncached, non‑reasoning) rates\"),\n    // Add optional 'cached' and 'reasoning' here if they become standard\n  })\n  .describe(\"Holds the `ChatModelTokenPairPrice` for different categories (e.g., base) within a single pricing tier.\");\n\ntype ChatModelTokenTypePriceType = z.infer<typeof ChatModelTokenTypePrice>;\n\n/**\n * Defines a single tier in a model's pricing schedule (`ChatModelPrice`), based on token count range.\n * - `minTokens`: inclusive lower bound (integer ≥ 0).\n * - `maxTokens`: exclusive upper bound (integer > minTokens), or `null` for ∞.\n * - `prices`: the `ChatModelTokenTypePrice` (categories and their rates) applicable to this tier.\n */\nconst ChatModelTokenRangePrice = z\n  .object({\n    minTokens: z.number().int().nonnegative().describe(\"Inclusive lower token bound for this tier.\"),\n    maxTokens: z.number().int().nullable().optional().describe(\"Exclusive upper token bound; `null` means ∞.\"),\n    prices: ChatModelTokenTypePrice.describe(\"Price categories and rates for this specific token range.\"),\n  })\n  .refine((t) => t.maxTokens === null || (typeof t.maxTokens === \"number\" && t.maxTokens > t.minTokens), {\n    message: \"maxTokens must be > minTokens (or null for infinite).\",\n    path: [\"maxTokens\"],\n  })\n  .describe(\"A single pricing tier defined by a token range and associated prices.\");\n\ntype ChatModelTokenRangePriceType = z.infer<typeof ChatModelTokenRangePrice>;\n\n/**\n * Full pricing schedule for a specific chat model, potentially with multiple `ChatModelTokenRangePrice` tiers.\n * Ensures tiers are contiguous and cover the full range from 0 to infinity.\n * - First tier must start at 0 tokens.\n * - `tokenRanges` must be contiguous: each tier.minTokens === previous.maxTokens.\n * - Last `tokenRange` must have maxTokens = null (infinite).\n */\nconst ChatModelPrice = z\n  .object({\n    modelName: z.string().describe(\"Model name this schedule applies to.\"),\n    currency: z.string().default(\"USD\").describe(\"Currency code (e.g., USD).\"),\n    tokenRanges: z\n      .array(ChatModelTokenRangePrice)\n      .min(1)\n      .describe(\"Pricing tiers (`ChatModelTokenRangePrice`) schedule, sorted by minTokens.\"),\n  })\n  .superRefine((data, ctx) => {\n    const { tokenRanges } = data;\n\n    // 1) First tier starts at 0\n    if (tokenRanges[0].minTokens !== 0) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        path: [\"tokenRanges\", 0, \"minTokens\"],\n        message: \"The first tier must have minTokens = 0.\",\n      });\n    }\n\n    // 2) tokenRanges must be sorted and contiguous\n    for (let i = 1; i < tokenRanges.length; i++) {\n      const prev = tokenRanges[i - 1];\n      const curr = tokenRanges[i];\n\n      if (prev.maxTokens === null) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          path: [\"tokenRanges\", i - 1, \"maxTokens\"],\n          message: \"Cannot define any tokenRanges after an infinite tier (maxTokens = null).\",\n        });\n        break; // Stop further checks if structure is already invalid\n      }\n\n      if (curr.minTokens !== prev.maxTokens) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          path: [\"tokenRanges\", i, \"minTokens\"],\n          message: `Tier ${i} minTokens (${curr.minTokens}) must equal previous tier's maxTokens (${prev.maxTokens}) for contiguity.`,\n        });\n      }\n\n      // Ensure sorting (although contiguity check often implies this)\n      if (curr.minTokens < prev.minTokens) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          path: [\"tokenRanges\", i, \"minTokens\"],\n          message: `tokenRanges must be sorted by ascending minTokens. Tier ${i} (${curr.minTokens}) starts before Tier ${i - 1} (${prev.minTokens}).`,\n        });\n      }\n    }\n\n    // 3) Last tier must be infinite\n    const last = tokenRanges[tokenRanges.length - 1];\n    // Check last.maxTokens only if the loop didn't break early due to a previous infinite tier\n    if (tokenRanges.every((t) => t.maxTokens !== null || t === last) && last.maxTokens !== null) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        path: [\"tokenRanges\", tokenRanges.length - 1, \"maxTokens\"],\n        message: \"The final tier must have maxTokens = null (representing infinity).\",\n      });\n    }\n  })\n  .describe(\"Complete pricing schedule for a single chat model, including all its token-based tiers.\");\n\ntype ChatModelPriceType = z.infer<typeof ChatModelPrice>;\n\n// Export the schemas and types\nexport { ChatModelPrice, ChatModelTokenPairPrice, ChatModelTokenRangePrice, ChatModelTokenTypePrice };\nexport type { ChatModelPriceType, ChatModelTokenPairPriceType, ChatModelTokenRangePriceType, ChatModelTokenTypePriceType };\n","// import { JSONSchema7 } from \"json-schema\";\n// import { Validator } from \"jsonschema\";\nimport { z } from \"zod\";\n\nconst FunctionToolLiteral = \"function\" as const;\n\n// TODO: fix 'name' property not allowed in JSONSchema7\n// const FunctionTool = z.object({\n//   type: z.literal(FunctionToolLiteral),\n//   definition: z.object({\n//     schema: z.object({}).refine((schema) => {\n//       const validator = new Validator();\n//       return validator.validate(schema, { type: \"object\" }).valid;\n//     }),\n//   }),\n//   callback: z.function().args(z.string().min(0)).returns(z.promise(z.any())).optional(),\n// });\n\n// const FunctionTool = z.object({\n//   type: z.literal(FunctionToolLiteral),\n//   definition: z.object({\n//     schema: z.object({}),\n//   }),\n//   callback: z.function().args(z.string().min(0)).returns(z.promise(z.any())).optional(),\n// });\n// type FunctionToolType = z.infer<typeof FunctionTool>;\n\nconst FunctionParameterTypes = [\"object\", \"array\", \"number\", \"string\", \"boolean\", \"null\"];\nconst FunctionParameterTypesLiteral = z.enum([\"object\", \"array\", \"number\", \"string\", \"boolean\", \"null\"]);\ntype FunctionParameterTypesType = z.infer<typeof FunctionParameterTypesLiteral>;\n\n// TODO: make a proper fix here\nconst FunctionParameter = z.object({\n  anyOf: z.array(z.any()).optional(),\n  type: FunctionParameterTypesLiteral.optional(),\n  default: z.any().optional(),\n  title: z.string().optional(),\n  description: z.string().max(4096).optional(),\n  properties: z.record(z.any()).optional(),\n  required: z.array(z.string()).optional(),\n  minItems: z.number().int().min(0).optional(),\n  maxItems: z.number().int().optional(),\n  items: z.record(z.any()).optional(), // Recursive structure to handle nested arrays and objects\n  enum: z.array(z.union([z.string(), z.number(), z.boolean(), z.null()])).optional(), // Enum for allowed values\n  minimum: z.number().optional(), // Minimum value for number\n  maximum: z.number().optional(), // Maximum value for number\n  minLength: z.number().int().min(0).optional(), // Minimum length for string\n  maxLength: z.number().int().optional(), // Maximum length for string\n});\ntype FunctionParameterType = z.infer<typeof FunctionParameter>;\n\nconst FunctionParameters = z.object({\n  type: z.enum([\"object\"]),\n  title: z.string().optional(),\n  $defs: z.record(z.any()).optional(),\n  properties: z.record(FunctionParameter).optional(),\n  required: z.array(z.string()).optional(),\n});\ntype FunctionParametersType = z.infer<typeof FunctionParameters>;\n\nconst Function = z.object({\n  name: z\n    .string()\n    .regex(/^[a-zA-Z0-9_]{1,64}$/)\n    .max(64),\n  description: z.string().max(4096),\n  parameters: z.any(),\n  strict: z.boolean().optional(),\n});\ntype FunctionType = z.infer<typeof Function>;\n\nconst ToolTypes = [\"function\"];\nconst ToolTypesLiteral = z.enum([\"function\"]);\ntype ToolTypesType = z.infer<typeof ToolTypesLiteral>;\n\nconst FunctionTool = z.object({\n  type: ToolTypesLiteral,\n  definition: z.object({\n    schema: Function, // TODO: convert to union with more tool types\n  }),\n});\ntype FunctionToolType = z.infer<typeof FunctionTool>;\n\n// const Tools = z.array(Tool).nonempty().optional();\n// type ToolsType = z.infer<typeof Tools>;\n\nexport {\n  Function,\n  FunctionParameter,\n  FunctionParameters,\n  FunctionParameterTypes,\n  FunctionParameterTypesLiteral,\n  ToolTypes,\n  ToolTypesLiteral,\n  type FunctionParametersType,\n  type FunctionParameterType,\n  type FunctionParameterTypesType,\n  type FunctionType,\n  type ToolTypesType,\n};\n\nexport { FunctionTool, FunctionToolLiteral, type FunctionToolType };\n","import { z } from \"zod\";\n\nimport { FunctionTool, FunctionToolLiteral } from \"./function-tool\";\n\nconst ToolLiterals = [FunctionToolLiteral] as const;\nconst ToolEnum = z.enum(ToolLiterals);\ntype ToolEnumType = z.infer<typeof ToolEnum>;\n\nconst Tool = <FTM extends z.ZodTypeAny>(FunctionToolMetadata: FTM = z.undefined() as FTM) =>\n  z.discriminatedUnion(\"type\", [FunctionTool.extend({ metadata: FunctionToolMetadata })]);\ntype ToolType<FTM extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof Tool<FTM>>>;\n\nexport { Tool, ToolEnum, ToolLiterals, type ToolEnumType, type ToolType };\n","import {\n  Base64ImageContentTypeLiteral,\n  ContentType,\n  ImageContent,\n  ImageContentDetailsLiteralType,\n  ImageModalityLiteral,\n  Message,\n  MessageType,\n  PartialMessage,\n  PartialMessageType,\n  PartialReasoningContent,\n  PartialReasoningModalityLiteral,\n  PartialTextContent,\n  PartialTextModalityLiteral,\n  PartialToolCallContent,\n  PartialToolCallModalityLiteral,\n  ReasoningContent,\n  ReasoningContentTypeLiteral,\n  ReasoningModalityLiteral,\n  RedactedReasoningContentTypeLiteral,\n  RoleEnumType,\n  TextContent,\n  TextModalityLiteral,\n  ToolCallContent,\n  ToolCallModalityLiteral,\n  ToolResponseContent,\n  ToolResponseModalityLiteral,\n  UrlImageContentTypeLiteral,\n} from \"./../message\";\n\nconst createTextContent = (content: string): ContentType => {\n  return TextContent().parse({\n    modality: TextModalityLiteral,\n    value: content,\n  });\n};\n\nconst createToolCallContent = (index: number, id: string, name: string, args: string): ContentType => {\n  return ToolCallContent().parse({\n    modality: ToolCallModalityLiteral,\n    index: index,\n    id: id,\n    name: name,\n    arguments: args,\n  });\n};\n\nconst createTextMessage = (role: RoleEnumType, content: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      TextContent().parse({\n        modality: TextModalityLiteral,\n        value: content,\n      }),\n    ],\n  });\n};\n\nconst createUrlImageMessage = (role: RoleEnumType, url: string, detail: ImageContentDetailsLiteralType): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ImageContent().parse({\n        modality: ImageModalityLiteral,\n        detail: detail,\n        value: {\n          type: UrlImageContentTypeLiteral,\n          url: url,\n        },\n      }),\n    ],\n  });\n};\n\nconst createBase64ImageMessage = (role: RoleEnumType, base64: string, detail: ImageContentDetailsLiteralType): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ImageContent().parse({\n        modality: ImageModalityLiteral,\n        detail: detail,\n        value: {\n          type: Base64ImageContentTypeLiteral,\n          base64: base64,\n        },\n      }),\n    ],\n  });\n};\n\nconst createToolCallMessage = (role: RoleEnumType, index: number, id: string, name: string, args: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ToolCallContent().parse({\n        modality: ToolCallModalityLiteral,\n        index: index,\n        id: id,\n        name: name,\n        arguments: args,\n      }),\n    ],\n  });\n};\n\nconst createToolResponseMessage = (role: RoleEnumType, index: number, id: string, name: string, data: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ToolResponseContent().parse({\n        modality: ToolResponseModalityLiteral,\n        index: index,\n        id: id,\n        name: name,\n        data: data,\n      }),\n    ],\n  });\n};\n\nconst createPartialTextMessage = (role: RoleEnumType, content: string): PartialMessageType => {\n  return PartialMessage().parse({\n    role: role,\n    partialContent: PartialTextContent().parse({\n      modality: PartialTextModalityLiteral,\n      value: content,\n    }),\n  });\n};\n\nconst createPartialToolCallMessage = (role: RoleEnumType, index: number, id?: string, name?: string, args?: string): PartialMessageType => {\n  return PartialMessage().parse({\n    role: role,\n    partialContent: PartialToolCallContent().parse({\n      modality: PartialToolCallModalityLiteral,\n      index: index,\n      id: id,\n      name: name,\n      arguments: args,\n    }),\n  });\n};\n\nconst createReasoningContent = (thinking: string, signature: string): ContentType => {\n  return ReasoningContent().parse({\n    modality: ReasoningModalityLiteral,\n    value: {\n      type: ReasoningContentTypeLiteral,\n      thinking,\n      signature,\n    },\n  });\n};\n\nconst createReasoningMessage = (role: RoleEnumType, thinking: string, signature: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ReasoningContent().parse({\n        modality: ReasoningModalityLiteral,\n        value: {\n          type: ReasoningContentTypeLiteral,\n          thinking,\n          signature,\n        },\n      }),\n    ],\n  });\n};\n// Redacted Reasoning Content\nconst createRedactedReasoningContent = (data: string): ContentType => {\n  return ReasoningContent().parse({\n    modality: ReasoningModalityLiteral,\n    value: {\n      type: RedactedReasoningContentTypeLiteral,\n      data,\n    },\n  });\n};\n\nconst createRedactedReasoningMessage = (role: RoleEnumType, data: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ReasoningContent().parse({\n        modality: ReasoningModalityLiteral,\n        value: {\n          type: RedactedReasoningContentTypeLiteral,\n          data,\n        },\n      }),\n    ],\n  });\n};\n\nconst createPartialReasoningMessage = (role: RoleEnumType, thinking?: string, signature?: string): PartialMessageType => {\n  return PartialMessage().parse({\n    role: role,\n    partialContent: PartialReasoningContent().parse({\n      modality: PartialReasoningModalityLiteral,\n      value: {\n        type: ReasoningContentTypeLiteral,\n        thinking,\n        signature,\n      },\n      // metadata is optional; omit or provide if needed\n    }),\n  });\n};\n\n// Create a partial redacted reasoning message\nconst createPartialRedactedReasoningMessage = (role: RoleEnumType, data: string): PartialMessageType => {\n  return PartialMessage().parse({\n    role: role,\n    partialContent: PartialReasoningContent().parse({\n      modality: PartialReasoningModalityLiteral,\n      value: {\n        type: RedactedReasoningContentTypeLiteral,\n        data,\n      },\n      // metadata is optional; omit or provide if needed\n    }),\n  });\n};\n\nexport {\n  createBase64ImageMessage,\n  createPartialReasoningMessage,\n  createPartialRedactedReasoningMessage,\n  createPartialTextMessage,\n  createPartialToolCallMessage,\n  createReasoningContent,\n  createReasoningMessage,\n  createRedactedReasoningContent,\n  createRedactedReasoningMessage,\n  createTextContent,\n  createTextMessage,\n  createToolCallContent,\n  createToolCallMessage,\n  createToolResponseMessage,\n  createUrlImageMessage,\n};\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst ProviderErrorLiteral = \"ProviderError\" as const;\nexport class ProviderError extends GatewayBaseError {\n  readonly name = ProviderErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, ProviderErrorLiteral);\n    this.info = info;\n    this.cause = cause;\n  }\n\n  static isProviderError(error: unknown): error is ProviderError {\n    return error instanceof ProviderError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst ModelErrorLiteral = \"ModelError\" as const;\nexport class ModelError extends GatewayBaseError {\n  readonly name = ModelErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, ModelErrorLiteral);\n    this.info = info;\n    this.cause = cause;\n  }\n\n  static isModelError(error: unknown): error is ModelError {\n    return error instanceof ModelError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst ModelResponseErrorLiteral = \"ModelResponseError\" as const;\nexport class ModelResponseError extends GatewayBaseError {\n  readonly name = ModelResponseErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, ModelResponseErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n  }\n\n  static isModelResponseError(error: unknown): error is ModelResponseError {\n    return error instanceof ModelResponseError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidModelRequestErrorLiteral = \"InvalidModelRequestError\" as const;\nexport class InvalidModelRequestError extends GatewayBaseError {\n  readonly name = InvalidModelRequestErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidModelRequestErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidModelRequestError(error: unknown): error is InvalidModelRequestError {\n    return error instanceof InvalidModelRequestError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidConfigErrorLiteral = \"InvalidConfigError\" as const;\nexport class InvalidConfigError extends GatewayBaseError {\n  readonly name = InvalidConfigErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidConfigErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidConfigError(error: unknown): error is InvalidConfigError {\n    return error instanceof InvalidConfigError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidMessagesErrorLiteral = \"InvalidMessagesError\" as const;\nexport class InvalidMessagesError extends GatewayBaseError {\n  readonly name = InvalidMessagesErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidMessagesErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidMessagesError(error: unknown): error is InvalidMessagesError {\n    return error instanceof InvalidMessagesError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidToolsErrorLiteral = \"InvalidToolsError\" as const;\nexport class InvalidToolsError extends GatewayBaseError {\n  readonly name = InvalidToolsErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidToolsErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidToolsError(error: unknown): error is InvalidToolsError {\n    return error instanceof InvalidToolsError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidEmbeddingRequestsErrorLiteral = \"InvalidEmbeddingRequestsError\" as const;\nexport class InvalidEmbeddingRequestsError extends GatewayBaseError {\n  readonly name = InvalidEmbeddingRequestsErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidEmbeddingRequestsErrorLiteral);\n    this.info = info;\n    this.cause = cause;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidEmbeddingRequestsError(error: unknown): error is InvalidEmbeddingRequestsError {\n    return error instanceof InvalidEmbeddingRequestsError;\n  }\n}\n","import { z } from \"zod\";\n\nconst MultiStringConfigItemTypeLiteral = \"multi-string\" as const;\n\nconst MultiStringConfigItemDef = z.object({\n  type: z.literal(MultiStringConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  max: z.number().int().positive(),\n});\ntype MultiStringConfigItemType = z.infer<typeof MultiStringConfigItemDef>;\n\nconst MultiStringConfigItemSchema = (max: number) => z.array(z.string()).max(max).default([]).optional();\ntype MultiStringConfigItemSchemaType = z.infer<ReturnType<typeof MultiStringConfigItemSchema>>;\n\nconst MultiStringConfigItem = (data: Omit<MultiStringConfigItemType, \"type\">) => {\n  return {\n    def: MultiStringConfigItemDef.parse({\n      type: MultiStringConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: MultiStringConfigItemSchema(data.max),\n  };\n};\n\nexport {\n  MultiStringConfigItem,\n  MultiStringConfigItemDef,\n  MultiStringConfigItemSchema,\n  MultiStringConfigItemTypeLiteral,\n  type MultiStringConfigItemSchemaType,\n  type MultiStringConfigItemType,\n};\n","import { z } from \"zod\";\n\nconst ObjectSchemaConfigItemTypeLiteral = \"object-schema\" as const;\n\nconst ObjectSchemaConfigItemDef = z.object({\n  type: z.literal(ObjectSchemaConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  objectSchema: z.any(),\n});\ntype ObjectSchemaConfigItemType = z.infer<typeof ObjectSchemaConfigItemDef>;\n\nconst ObjectSchemaConfigItemSchema = <S extends z.ZodRawShape>(schema: z.ZodObject<S>) => schema.optional();\ntype ObjectSchemaConfigItemSchemaType<S extends z.ZodRawShape = z.ZodRawShape> = z.infer<\n  ReturnType<typeof ObjectSchemaConfigItemSchema<S>>\n>;\n\nconst ObjectSchemaConfigItem = (data: Omit<ObjectSchemaConfigItemType, \"type\">) => {\n  return {\n    def: ObjectSchemaConfigItemDef.parse({\n      type: ObjectSchemaConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: ObjectSchemaConfigItemSchema(data.objectSchema),\n  };\n};\n\nexport {\n  ObjectSchemaConfigItem,\n  ObjectSchemaConfigItemDef,\n  ObjectSchemaConfigItemSchema,\n  ObjectSchemaConfigItemTypeLiteral,\n  type ObjectSchemaConfigItemType,\n  type ObjectSchemaConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nconst RangeConfigItemTypeLiteral = \"range\" as const;\n\nconst RangeConfigItemDef = z.object({\n  type: z.literal(RangeConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  min: z.number().int(),\n  max: z.number().int(),\n  step: z.number().positive(),\n  default: z.number(),\n});\ntype RangeConfigItemDefType = z.infer<typeof RangeConfigItemDef>;\n\nconst RangeConfigItemSchema = (min: number, max: number, step: number, defaultValue: number) =>\n  z.number().min(min).max(max).step(step).default(defaultValue).optional();\ntype RangeConfigItemSchemaType = z.infer<ReturnType<typeof RangeConfigItemSchema>>;\n\nconst RangeConfigItem = (data: Omit<RangeConfigItemDefType, \"type\">) => {\n  return {\n    def: RangeConfigItemDef.parse({\n      type: RangeConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: RangeConfigItemSchema(data.min, data.max, data.step, data.default),\n  };\n};\n\nexport {\n  RangeConfigItem,\n  RangeConfigItemDef,\n  RangeConfigItemSchema,\n  RangeConfigItemTypeLiteral,\n  type RangeConfigItemDefType,\n  type RangeConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nconst SelectBooleanConfigItemTypeLiteral = \"select-boolean\" as const;\n\nconst SelectBooleanConfigItemDef = z.object({\n  type: z.literal(SelectBooleanConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  default: z.boolean().nullable(),\n});\ntype SelectBooleanConfigItemDefType = z.infer<typeof SelectBooleanConfigItemDef>;\n\nconst SelectBooleanConfigItemSchema = (defaultValue: boolean | null) => z.boolean().nullable().default(defaultValue).optional();\ntype SelectBooleanConfigItemSchemaType = z.infer<ReturnType<typeof SelectBooleanConfigItemSchema>>;\n\nconst SelectBooleanConfigItem = (data: Omit<SelectBooleanConfigItemDefType, \"type\">) => {\n  return {\n    def: SelectBooleanConfigItemDef.parse({\n      type: SelectBooleanConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: SelectBooleanConfigItemSchema(data.default),\n  };\n};\n\nexport {\n  SelectBooleanConfigItem,\n  SelectBooleanConfigItemDef,\n  SelectBooleanConfigItemSchema,\n  SelectBooleanConfigItemTypeLiteral,\n  type SelectBooleanConfigItemDefType,\n  type SelectBooleanConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nconst SelectStringConfigItemTypeLiteral = \"select-string\" as const;\n\nconst SelectStringConfigItemDef = z.object({\n  type: z.literal(SelectStringConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  default: z.string(),\n  choices: z.array(z.string()),\n});\ntype SelectStringConfigItemDefType = z.infer<typeof SelectStringConfigItemDef>;\n\nconst SelectStringConfigItemSchema = (defaultValue: string | null, choices: string[]) =>\n  z\n    .enum(choices as [string, ...string[]])\n    .nullable()\n    .default(defaultValue)\n    .optional();\ntype SelectStringConfigItemSchemaType = z.infer<ReturnType<typeof SelectStringConfigItemSchema>>;\n\nconst SelectStringConfigItem = (data: Omit<SelectStringConfigItemDefType, \"type\">) => {\n  return {\n    def: SelectStringConfigItemDef.parse({\n      type: SelectStringConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: SelectStringConfigItemSchema(data.default, data.choices),\n  };\n};\n\nexport {\n  SelectStringConfigItem,\n  SelectStringConfigItemDef,\n  SelectStringConfigItemSchema,\n  SelectStringConfigItemTypeLiteral,\n  type SelectStringConfigItemDefType,\n  type SelectStringConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nimport { MultiStringConfigItemDef, MultiStringConfigItemTypeLiteral } from \"./multi-string-config-item\";\nimport { ObjectSchemaConfigItemDef, ObjectSchemaConfigItemTypeLiteral } from \"./object-schema-config-item\";\nimport { RangeConfigItemDef, RangeConfigItemTypeLiteral } from \"./range-config-item\";\nimport { SelectBooleanConfigItemDef, SelectBooleanConfigItemTypeLiteral } from \"./select-boolean-config-item\";\nimport { SelectStringConfigItemDef, SelectStringConfigItemTypeLiteral } from \"./select-string-config-item\";\n\nconst ConfigItemLiterals = [\n  RangeConfigItemTypeLiteral,\n  MultiStringConfigItemTypeLiteral,\n  SelectStringConfigItemTypeLiteral,\n  ObjectSchemaConfigItemTypeLiteral,\n  SelectBooleanConfigItemTypeLiteral,\n] as const;\nconst ConfigItemEnum = z.enum(ConfigItemLiterals);\ntype ConfigItemEnumType = z.infer<typeof ConfigItemEnum>;\n\nconst ConfigItemDef = z.discriminatedUnion(\"type\", [\n  RangeConfigItemDef,\n  MultiStringConfigItemDef,\n  SelectStringConfigItemDef,\n  SelectBooleanConfigItemDef,\n  ObjectSchemaConfigItemDef,\n]);\ntype ConfigItemDefType = z.infer<typeof ConfigItemDef>;\n\nexport { ConfigItemDef, ConfigItemEnum, ConfigItemLiterals, type ConfigItemDefType, type ConfigItemEnumType };\n","import { z } from \"zod\";\n\nimport { ChatModelPriceType, ModalityEnum, RoleEnum } from \"@adaline/types\";\n\nimport { ConfigItemDef } from \"../../types/config\";\n\nconst ChatModelSchema = <\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  M extends z.ZodEnum<[string, ...string[]]> = typeof ModalityEnum,\n>(\n  Roles: R = RoleEnum as unknown as R,\n  Modalities: M = ModalityEnum as unknown as M\n) =>\n  z.object({\n    name: z.string().min(1),\n    description: z.string().min(1),\n    roles: z.record(Roles, z.string().min(1).optional()),\n    modalities: z.array(Modalities).nonempty(),\n    maxInputTokens: z.number().int().positive().min(1),\n    maxOutputTokens: z.number().int().positive().min(1),\n    maxReasoningTokens: z.number().int().positive().min(1).optional(),\n    config: z\n      .object({\n        def: z.record(z.string().min(1), ConfigItemDef),\n        schema: z.instanceof(z.ZodObject),\n      })\n      .refine(\n        (config) => {\n          const defKeys = Object.keys(config.def);\n          const schemaKeys = Object.keys(config.schema?.shape ?? {});\n          return defKeys.every((key) => schemaKeys.includes(key)) && schemaKeys.every((key) => defKeys.includes(key));\n        },\n        {\n          message: \"Keys in 'config.def' must exactly match keys in 'config.schema'\",\n        }\n      ),\n    price: z.custom<ChatModelPriceType>(),\n  });\ntype ChatModelSchemaType<\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  M extends z.ZodEnum<[string, ...string[]]> = typeof ModalityEnum,\n> = z.infer<ReturnType<typeof ChatModelSchema<R, M>>>;\n\nexport { ChatModelSchema, type ChatModelSchemaType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModalityEnum } from \"@adaline/types\";\n\nimport { ConfigItemDef } from \"../../types/config\";\n\n// TODO: add embedding model properties (dimensions, etc)\nconst EmbeddingModelSchema = <M extends z.ZodEnum<[string, ...string[]]> = typeof EmbeddingModalityEnum>(\n  Modalities: M = EmbeddingModalityEnum as unknown as M\n) =>\n  z.object({\n    name: z.string().min(1),\n    description: z.string().min(1),\n    modalities: z.array(Modalities).nonempty(),\n    maxInputTokens: z.number().int().positive().min(1),\n    maxOutputTokens: z.number().int().positive().min(1),\n    config: z\n      .object({\n        def: z.record(z.string().min(1), ConfigItemDef),\n        schema: z.instanceof(z.ZodObject),\n      })\n      .refine(\n        (config) => {\n          const defKeys = Object.keys(config.def);\n          const schemaKeys = Object.keys(config.schema?.shape ?? {});\n          return defKeys.every((key) => schemaKeys.includes(key)) && schemaKeys.every((key) => defKeys.includes(key));\n        },\n        {\n          message: \"Keys in 'config.def' must exactly match keys in 'config.schema'\",\n        }\n      ),\n  });\ntype EmbeddingModelSchemaType<M extends z.ZodEnum<[string, ...string[]]> = typeof EmbeddingModalityEnum> = z.infer<\n  ReturnType<typeof EmbeddingModelSchema<M>>\n>;\n\nexport { EmbeddingModelSchema, type EmbeddingModelSchemaType };\n","import { z } from \"zod\";\n\nconst Headers = z.record(z.string());\ntype HeadersType = z.infer<typeof Headers>;\n\nexport { Headers, type HeadersType };\n","import { z } from \"zod\";\n\nconst Params = z.record(\n  z.union([\n    z.boolean(),\n    z.string(),\n    z.number(),\n    z.object({}),\n    z.array(z.any()),\n    z.null(),\n    z.undefined(),\n  ])\n);\ntype ParamsType = z.infer<typeof Params>;\n\nexport { Params, type ParamsType };\n","import { z } from \"zod\";\n\nconst Url = z.string().url();\ntype UrlType = z.infer<typeof Url>;\n\nexport { Url, type UrlType };\n","const TEMPERATURE = {\n  type: \"range\",\n  title: \"Temperature\",\n  description:\n    \"Adjusts the model's creativity level. With a setting of 0, the model strictly picks the most probable next word. \\\n    For endeavors that benefit from a dash of inventiveness, consider dialing it up to 0.7 or higher, enabling the model to produce text \\\n    that's unexpectedly fresh.\",\n} as const;\n\nconst MAX_TOKENS = {\n  type: \"range\",\n  title: \"Max tokens\",\n  description:\n    \"Specify the total tokens for generation, where one token approximates four English characters. \\\n    Setting this to 0 defaults to the model's maximum capacity.\",\n} as const;\n\nconst MAX_REASONING_TOKENS = {\n  type: \"range\",\n  title: \"Max reasoning tokens\",\n  description:\n    \"Specify the total tokens for reasoning, where one token approximates four English characters.\",\n} as const;\n\nconst STOP = (max: number) =>\n  ({\n    type: \"multi\",\n    title: \"Stop sequence\",\n    description: `Enter up to ${max} sequences that will halt additional text output. \\\n      The generated text will exclude these sequences.`,\n  }) as const;\n\nconst TOP_A = {\n  type: \"range\",\n  title: \"Top A\",\n  description:\n    \"Considers only the top tokens that have 'sufficiently high' probabilities relative to the most likely token, \\\n    functioning like a dynamic Top-P. \\\n    A lower Top-A value narrows down the token choices based on the highest probability token, \\\n    while a higher Top-A value refines the filtering without necessarily impacting the creativity of the output.\",\n} as const;\n\nconst TOP_P = {\n  type: \"range\",\n  title: \"Top P\",\n  description:\n    \"Selects a subset of likely tokens for generation, restricting choices to the top-P fraction of possibilities, \\\n    such as the top 10% when P=0.1. \\\n    This approach can limit the variety of the output. By default, it's set to 1, indicating no restriction. \\\n    It's advised to adjust this parameter or temperature to modulate output diversity, but not to modify both simultaneously.\",\n} as const;\n\nconst TOP_K = {\n  type: \"range\",\n  title: \"Top K\",\n  description:\n    \"Select only from the highest K probabilities for each following word, effectively eliminating the less likely 'long tail' options.\",\n} as const;\n\nconst MIN_P = {\n  type: \"range\",\n  title: \"Min P\",\n  description:\n    \"Specifies the minimum probability a token must have to be considered, in relation to the probability of the most likely token. \\\n    (This value varies based on the confidence level of the top token.) \\\n    For example, if Min-P is set to 0.1, only tokens with at least 1/10th the probability of the highest-ranked token will be considered.\",\n} as const;\n\nconst FREQUENCY_PENALTY = {\n  type: \"range\",\n  title: \"Frequency penalty\",\n  description:\n    \"Minimize redundancy.\\\n    By assigning a penalty to frequently used tokens within the text, the likelihood of repeating identical phrases is reduced. \\\n    The default setting for this penalty is zero.\",\n} as const;\n\nconst PRESENCE_PENALTY = {\n  type: \"range\",\n  title: \"Presence penalty\",\n  description:\n    \"Enhance the introduction of novel subjects by reducing the preference for tokens that have already appeared in the text, \\\n    thus boosting the chances of exploring fresh topics. \\\n    The standard setting for this is zero.\",\n} as const;\n\nconst SEED = {\n  type: \"range\",\n  title: \"Seed\",\n  description:\n    \"When seed is fixed to a specific value, the model makes a best effort to provide the same response for repeated requests. \\\n    Deterministic output isn't guaranteed. \\\n    Also, changing the model or parameter settings, such as the temperature, \\\n    can cause variations in the response even when you use the same seed value. \\\n    By default, a random seed value is used.\",\n} as const;\n\nconst REPETITION_PENALTY = {\n  type: \"range\",\n  title: \"Repetition penalty\",\n  description:\n    \"Reduces the likelihood of repeating tokens from the input. \\\n    Increasing this value makes the model less prone to repetition, but setting it too high may lead to less coherent output, \\\n    often resulting in run-on sentences missing smaller words. \\\n    The token penalty is scaled according to the original token's probability.\",\n} as const;\n\nconst LOG_PROBS = {\n  type: \"boolean\",\n  title: \"Log probs\",\n  description:\n    \"Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.\",\n} as const;\n\nconst TOP_LOG_PROBS = {\n  type: \"range\",\n  title: \"Top log probs\",\n  description:\n    \"The number of most likely tokens to return at each token position, each with an associated log probability. \\\n    'logprobs' must be set to true if this parameter is used.\",\n} as const;\n\nconst ECHO = {\n  type: \"boolean\",\n  title: \"Echo\",\n  description: \"If true, the response will contain the prompt.\",\n} as const;\n\nconst RESPONSE_FORMAT = {\n  type: \"select\",\n  title: \"Response format\",\n  description:\n    \"Choose the response format of your model. For JSON, you must include the string 'JSON' in some form within your system / user prompt.\",\n} as const;\n\nconst RESPONSE_FORMAT_WITH_SCHEMA = {\n  type: \"select\",\n  title: \"Response format\",\n  description:\n    \"Choose the response format of your model. 'json_object' colloquially known as JSON mode, instructs the model to respond with a valid \\\n  JSON (must include the term 'json' in prompt). 'json_schema' colloquially known as structured outputs, allows you to specify a strict \\\n  response schema that the model will adhere to.\",\n} as const;\n\nconst RESPONSE_SCHEMA = {\n  type: \"object\",\n  title: \"Response schema\",\n  description: \"When response format is set to 'json_schema', the model will return a JSON object of the specified schema.\",\n} as const;\n\nconst CHAT_CONFIG = {\n  TEMPERATURE,\n  MAX_TOKENS,\n  STOP,\n  TOP_A,\n  TOP_P,\n  TOP_K,\n  MIN_P,\n  FREQUENCY_PENALTY,\n  PRESENCE_PENALTY,\n  REPETITION_PENALTY,\n  SEED,\n  LOG_PROBS,\n  TOP_LOG_PROBS,\n  ECHO,\n  RESPONSE_FORMAT,\n  RESPONSE_FORMAT_WITH_SCHEMA,\n  RESPONSE_SCHEMA,\n  MAX_REASONING_TOKENS,\n};\n\nexport { CHAT_CONFIG };\n","const DIMENSIONS = {\n  type: \"range\",\n  title: \"Dimensions\",\n  description: \"Select the number of dimensions for the word embedding.\",\n} as const;\n\nconst ENCODING_FORMAT = {\n  type: \"select\",\n  title: \"Encoding format\",\n  description: \"Select the encoding format for the word embedding.\",\n} as const;\n\nconst EMBEDDING_CONFIG = {\n  DIMENSIONS,\n  ENCODING_FORMAT,\n};\n\nexport { EMBEDDING_CONFIG };\n","const removeUndefinedEntries = <T = unknown>(record: Record<string, T | undefined>): Record<string, T> => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  return Object.fromEntries(Object.entries(record).filter(([_, value]) => value != null)) as Record<string, T>;\n};\n\nexport { removeUndefinedEntries };\n","const urlWithoutTrailingSlash = (url: string): string => {\n  return url?.replace(/\\/$/, \"\");\n};\n\nexport { urlWithoutTrailingSlash };\n","import { z } from \"zod\";\n\nimport { maxTokens, safetySettings, stop, temperature, toolChoice, topP } from \"./common.config.chat-model.google\";\n\nconst ChatModelBaseConfigSchema = (\n  maxTemperature: number,\n  defaultTemperature: number,\n  maxOutputTokens: number,\n  maxSequences: number,\n  defaultTopP: number\n) =>\n  z.object({\n    temperature: temperature(maxTemperature, defaultTemperature).schema,\n    maxTokens: maxTokens(maxOutputTokens).schema,\n    stop: stop(maxSequences).schema,\n    topP: topP(defaultTopP).schema,\n    toolChoice: toolChoice.schema,\n    safetySettings: safetySettings.schema,\n  });\n\nconst ChatModelBaseConfigDef = (\n  maxTemperature: number,\n  defaultTemperature: number,\n  maxOutputTokens: number,\n  maxSequences: number,\n  defaultTopP: number\n) =>\n  ({\n    temperature: temperature(maxTemperature, defaultTemperature).def,\n    maxTokens: maxTokens(maxOutputTokens).def,\n    stop: stop(maxSequences).def,\n    topP: topP(defaultTopP).def,\n    toolChoice: toolChoice.def,\n    safetySettings: safetySettings.def,\n  }) as const;\n\nexport { ChatModelBaseConfigDef, ChatModelBaseConfigSchema };\n","import { z } from \"zod\";\n\nimport {\n  CHAT_CONFIG,\n  MultiStringConfigItem,\n  ObjectSchemaConfigItem,\n  RangeConfigItem,\n  SelectBooleanConfigItem,\n  SelectStringConfigItem,\n} from \"@adaline/provider\";\n\nconst temperature = (max: number, _default: number) =>\n  RangeConfigItem({\n    param: \"temperature\",\n    title: CHAT_CONFIG.TEMPERATURE.title,\n    description: CHAT_CONFIG.TEMPERATURE.description,\n    min: 0.0,\n    max: max,\n    step: 0.01,\n    default: _default,\n  });\n\nconst maxTokens = (maxOutputTokens: number) =>\n  RangeConfigItem({\n    param: \"maxOutputTokens\",\n    title: CHAT_CONFIG.MAX_TOKENS.title,\n    description: CHAT_CONFIG.MAX_TOKENS.description,\n    min: 0,\n    max: maxOutputTokens,\n    step: 1,\n    default: 0,\n  });\n\nconst stop = (maxSequences: number) =>\n  MultiStringConfigItem({\n    param: \"stopSequences\",\n    title: CHAT_CONFIG.STOP(maxSequences).title,\n    description: CHAT_CONFIG.STOP(maxSequences).description,\n    max: maxSequences,\n  });\n\nconst topP = (_default: number) =>\n  RangeConfigItem({\n    param: \"topP\",\n    title: CHAT_CONFIG.TOP_P.title,\n    description: CHAT_CONFIG.TOP_P.description,\n    min: 0,\n    max: 1,\n    step: 0.01,\n    default: _default,\n  });\n\nconst topK = (_default: number) =>\n  RangeConfigItem({\n    param: \"topK\",\n    title: CHAT_CONFIG.TOP_K.title,\n    description: CHAT_CONFIG.TOP_K.description,\n    min: 1,\n    max: 40,\n    step: 1,\n    default: _default,\n  });\n\nconst frequencyPenalty = RangeConfigItem({\n  param: \"frequencyPenalty\",\n  title: CHAT_CONFIG.FREQUENCY_PENALTY.title,\n  description: CHAT_CONFIG.FREQUENCY_PENALTY.description,\n  min: -2,\n  max: 2,\n  step: 0.01,\n  default: 0,\n});\n\nconst presencePenalty = RangeConfigItem({\n  param: \"presencePenalty\",\n  title: CHAT_CONFIG.PRESENCE_PENALTY.title,\n  description: CHAT_CONFIG.PRESENCE_PENALTY.description,\n  min: -2,\n  max: 2,\n  step: 0.01,\n  default: 0,\n});\n\nconst seed = RangeConfigItem({\n  param: \"seed\",\n  title: CHAT_CONFIG.SEED.title,\n  description: CHAT_CONFIG.SEED.description,\n  min: 0,\n  max: 1000000,\n  step: 1,\n  default: 0,\n});\n\nconst toolChoice = SelectStringConfigItem({\n  param: \"toolChoice\",\n  title: \"Tool choice\",\n  description:\n    \"Controls which (if any) tool is called by the model. 'none' means the model will not call a function. 'auto' means the model can pick between generating a message or calling a tool.\",\n  default: \"auto\",\n  choices: [\"auto\", \"any\", \"none\"],\n});\n\nconst safetySettings = ObjectSchemaConfigItem({\n  param: \"safetySettings\",\n  title: \"Safety settings\",\n  description: \"The safety rating contains the category of harm and the harm probability level in that category for a piece of content.\",\n  objectSchema: z.array(\n    z.object({\n      threshold: z.enum([\n        \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\",\n        \"BLOCK_LOW_AND_ABOVE\",\n        \"BLOCK_MEDIUM_AND_ABOVE\",\n        \"BLOCK_ONLY_HIGH\",\n        \"BLOCK_NONE\",\n        \"OFF\",\n      ]),\n      category: z.enum([\n        \"HARM_CATEGORY_UNSPECIFIED\",\n        \"HARM_CATEGORY_HARASSMENT\",\n        \"HARM_CATEGORY_HATE_SPEECH\",\n        \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n        \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n        \"HARM_CATEGORY_CIVIC_INTEGRITY\",\n      ]),\n    })\n  ),\n});\n\nconst reasoningEnabled = SelectBooleanConfigItem({\n  param: \"reasoningEnabled\",\n  title: \"Reasoning Enabled\",\n  description:\n    \"Controls whether the model is allowed to think for a longer period of time before generating a response. This can be useful for complex tasks that require more time to think.\",\n  default: false,\n});\n\nexport { frequencyPenalty, maxTokens, presencePenalty, reasoningEnabled, safetySettings, seed, stop, temperature, toolChoice, topK, topP };\n","import { z } from \"zod\";\n\nimport {\n  frequencyPenalty,\n  maxTokens,\n  presencePenalty,\n  safetySettings,\n  seed,\n  stop,\n  temperature,\n  toolChoice,\n  topK,\n  topP,\n} from \"./common.config.chat-model.google\";\n\nconst ChatModelC1ConfigSchema = (\n  maxTemperature: number,\n  defaultTemperature: number,\n  maxOutputTokens: number,\n  maxSequences: number,\n  defaultTopP: number,\n  defaultTopK: number\n) =>\n  z.object({\n    temperature: temperature(maxTemperature, defaultTemperature).schema,\n    maxTokens: maxTokens(maxOutputTokens).schema,\n    stop: stop(maxSequences).schema,\n    topP: topP(defaultTopP).schema,\n    topK: topK(defaultTopK).schema,\n    frequencyPenalty: frequencyPenalty.schema,\n    presencePenalty: presencePenalty.schema,\n    seed: seed.schema.transform((value) => (value === 0 ? undefined : value)),\n    toolChoice: toolChoice.schema,\n    safetySettings: safetySettings.schema,\n  });\n\nconst ChatModelC1ConfigDef = (\n  maxTemperature: number,\n  defaultTemperature: number,\n  maxOutputTokens: number,\n  maxSequences: number,\n  defaultTopP: number,\n  defaultTopK: number\n) =>\n  ({\n    temperature: temperature(maxTemperature, defaultTemperature).def,\n    maxTokens: maxTokens(maxOutputTokens).def,\n    stop: stop(maxSequences).def,\n    topP: topP(defaultTopP).def,\n    topK: topK(defaultTopK).def,\n    frequencyPenalty: frequencyPenalty.def,\n    presencePenalty: presencePenalty.def,\n    seed: seed.def,\n    toolChoice: toolChoice.def,\n    safetySettings: safetySettings.def,\n  }) as const;\n\nexport { ChatModelC1ConfigDef, ChatModelC1ConfigSchema };\n","import { z } from \"zod\";\n\nimport {\n  frequencyPenalty,\n  maxTokens,\n  presencePenalty,\n  reasoningEnabled,\n  safetySettings,\n  seed,\n  stop,\n  temperature,\n  toolChoice,\n  topK,\n  topP,\n} from \"./common.config.chat-model.google\";\n\nconst ChatModelReasoningConfigSchema = (\n  maxTemperature: number,\n  defaultTemperature: number,\n  maxOutputTokens: number,\n  maxSequences: number,\n  defaultTopP: number,\n  defaultTopK: number\n) =>\n  z.object({\n    temperature: temperature(maxTemperature, defaultTemperature).schema,\n    maxTokens: maxTokens(maxOutputTokens).schema,\n    stop: stop(maxSequences).schema,\n    topP: topP(defaultTopP).schema,\n    topK: topK(defaultTopK).schema,\n    frequencyPenalty: frequencyPenalty.schema,\n    presencePenalty: presencePenalty.schema,\n    seed: seed.schema.transform((value) => (value === 0 ? undefined : value)),\n    toolChoice: toolChoice.schema,\n    safetySettings: safetySettings.schema,\n    reasoningEnabled: reasoningEnabled.schema,\n  });\n\nconst ChatModelReasoningConfigDef = (\n  maxTemperature: number,\n  defaultTemperature: number,\n  maxOutputTokens: number,\n  maxSequences: number,\n  defaultTopP: number,\n  defaultTopK: number\n) =>\n  ({\n    temperature: temperature(maxTemperature, defaultTemperature).def,\n    maxTokens: maxTokens(maxOutputTokens).def,\n    stop: stop(maxSequences).def,\n    topP: topP(defaultTopP).def,\n    topK: topK(defaultTopK).def,\n    frequencyPenalty: frequencyPenalty.def,\n    presencePenalty: presencePenalty.def,\n    seed: seed.def,\n    toolChoice: toolChoice.def,\n    safetySettings: safetySettings.def,\n    reasoningEnabled: reasoningEnabled.def,\n  }) as const;\n\nexport { ChatModelReasoningConfigDef, ChatModelReasoningConfigSchema };\n","import { EMBEDDING_CONFIG, RangeConfigItem } from \"@adaline/provider\";\n\nconst dimensions = (maxDimensions: number) =>\n  RangeConfigItem({\n    param: \"outputDimensionality\",\n    title: EMBEDDING_CONFIG.DIMENSIONS.title,\n    description: EMBEDDING_CONFIG.DIMENSIONS.description,\n    min: 1,\n    max: maxDimensions,\n    step: 1,\n    default: maxDimensions,\n  });\n\nexport { dimensions };\n","import { z } from \"zod\";\n\nimport { dimensions } from \"./common.config.embedding-model.google\";\n\nconst EmbeddingModelBaseConfigSchema = (maxDimensions: number) =>\n  z.object({\n    dimensions: dimensions(maxDimensions).schema,\n  });\n\nconst EmbeddingModelBaseConfigDef = (maxDimensions: number) =>\n  ({\n    dimensions: dimensions(maxDimensions).def,\n  }) as const;\n\nexport { EmbeddingModelBaseConfigDef, EmbeddingModelBaseConfigSchema };\n","import {\n  ChatModelBaseConfigDef,\n  ChatModelBaseConfigSchema,\n  ChatModelC1ConfigDef,\n  ChatModelC1ConfigSchema,\n  ChatModelReasoningConfigDef,\n  ChatModelReasoningConfigSchema,\n} from \"./chat-model\";\nimport { EmbeddingModelBaseConfigDef, EmbeddingModelBaseConfigSchema } from \"./embedding-model\";\n\nconst GoogleChatModelConfigs = {\n  base: (maxTemperature: number, defaultTemperature: number, maxOutputTokens: number, maxSequences: number, defaultTopP: number) => ({\n    def: ChatModelBaseConfigDef(maxTemperature, defaultTemperature, maxOutputTokens, maxSequences, defaultTopP),\n    schema: ChatModelBaseConfigSchema(maxTemperature, defaultTemperature, maxOutputTokens, maxSequences, defaultTopP),\n  }),\n  c1: (\n    maxTemperature: number,\n    defaultTemperature: number,\n    maxOutputTokens: number,\n    maxSequences: number,\n    defaultTopP: number,\n    defaultTopK: number\n  ) => ({\n    def: ChatModelC1ConfigDef(maxTemperature, defaultTemperature, maxOutputTokens, maxSequences, defaultTopP, defaultTopK),\n    schema: ChatModelC1ConfigSchema(maxTemperature, defaultTemperature, maxOutputTokens, maxSequences, defaultTopP, defaultTopK),\n  }),\n  reasoning: (\n    maxTemperature: number,\n    defaultTemperature: number,\n    maxOutputTokens: number,\n    maxSequences: number,\n    defaultTopP: number,\n    defaultTopK: number\n  ) => ({\n    def: ChatModelReasoningConfigDef(maxTemperature, defaultTemperature, maxOutputTokens, maxSequences, defaultTopP, defaultTopK),\n    schema: ChatModelReasoningConfigSchema(maxTemperature, defaultTemperature, maxOutputTokens, maxSequences, defaultTopP, defaultTopK),\n  }),\n} as const;\n\nconst GoogleEmbeddingModelConfigs = {\n  base: (maxDimensions: number) => ({\n    def: EmbeddingModelBaseConfigDef(maxDimensions),\n    schema: EmbeddingModelBaseConfigSchema(maxDimensions),\n  }),\n} as const;\n\nexport { GoogleChatModelConfigs, GoogleEmbeddingModelConfigs };\n","import { z } from \"zod\";\n\nimport { ChatModelSchemaType, ChatModelV1, EmbeddingModelSchemaType, EmbeddingModelV1, ProviderError, ProviderV1 } from \"@adaline/provider\";\n\nimport * as Models from \"../models\";\n\nconst ProviderLiteral = \"google\";\nclass Google<C extends Models.BaseChatModelOptionsType, E extends Models.BaseEmbeddingModelOptionsType> implements ProviderV1<C, E> {\n  readonly version = \"v1\" as const;\n  readonly name = ProviderLiteral;\n  static readonly baseUrl: string = \"https://generativelanguage.googleapis.com/v1beta\";\n\n  private readonly chatModelFactories: Record<\n    string,\n    {\n      model: { new (options: any): ChatModelV1 };\n      modelOptions: z.ZodType<any>;\n      modelSchema: ChatModelSchemaType;\n    }\n  > = {\n    [Models.GeminiProLiteral]: {\n      model: Models.GeminiPro,\n      modelOptions: Models.GeminiProOptions,\n      modelSchema: Models.GeminiProSchema,\n    },\n    [Models.GeminiProVisionLiteral]: {\n      model: Models.GeminiProVision,\n      modelOptions: Models.GeminiProVisionOptions,\n      modelSchema: Models.GeminiProVisionSchema,\n    },\n    [Models.Gemini1_5Flash001Literal]: {\n      model: Models.Gemini1_5Flash001,\n      modelOptions: Models.Gemini1_5Flash001Options,\n      modelSchema: Models.Gemini1_5Flash001Schema,\n    },\n    [Models.Gemini1_5Flash002Literal]: {\n      model: Models.Gemini1_5Flash002,\n      modelOptions: Models.Gemini1_5Flash002Options,\n      modelSchema: Models.Gemini1_5Flash002Schema,\n    },\n    [Models.Gemini1_5FlashLatestLiteral]: {\n      model: Models.Gemini1_5FlashLatest,\n      modelOptions: Models.Gemini1_5FlashLatestOptions,\n      modelSchema: Models.Gemini1_5FlashLatestSchema,\n    },\n    [Models.Gemini1_5FlashLiteral]: {\n      model: Models.Gemini1_5Flash,\n      modelOptions: Models.Gemini1_5FlashOptions,\n      modelSchema: Models.Gemini1_5FlashSchema,\n    },\n    [Models.Gemini1_5Pro001Literal]: {\n      model: Models.Gemini1_5Pro001,\n      modelOptions: Models.Gemini1_5Pro001Options,\n      modelSchema: Models.Gemini1_5Pro001Schema,\n    },\n    [Models.Gemini1_5Pro002Literal]: {\n      model: Models.Gemini1_5Pro002,\n      modelOptions: Models.Gemini1_5Pro002Options,\n      modelSchema: Models.Gemini1_5Pro002Schema,\n    },\n    [Models.Gemini1_5ProLatestLiteral]: {\n      model: Models.Gemini1_5ProLatest,\n      modelOptions: Models.Gemini1_5ProLatestOptions,\n      modelSchema: Models.Gemini1_5ProLatestSchema,\n    },\n    [Models.Gemini1_5ProLiteral]: {\n      model: Models.Gemini1_5Pro,\n      modelOptions: Models.Gemini1_5ProOptions,\n      modelSchema: Models.Gemini1_5ProSchema,\n    },\n    [Models.Gemini1_0ProLiteral]: {\n      model: Models.Gemini1_0Pro,\n      modelOptions: Models.Gemini1_0ProOptions,\n      modelSchema: Models.Gemini1_0ProSchema,\n    },\n    [Models.Gemini1_0ProVisionLiteral]: {\n      model: Models.Gemini1_0ProVision,\n      modelOptions: Models.Gemini1_0ProVisionOptions,\n      modelSchema: Models.Gemini1_0ProVisionSchema,\n    },\n    [Models.Gemini1_0ProLatestLiteral]: {\n      model: Models.Gemini1_0ProLatest,\n      modelOptions: Models.Gemini1_0ProLatestOptions,\n      modelSchema: Models.Gemini1_0ProLatestSchema,\n    },\n    [Models.Gemini1_0Pro_001Literal]: {\n      model: Models.Gemini1_0Pro_001,\n      modelOptions: Models.Gemini1_0Pro_001Options,\n      modelSchema: Models.Gemini1_0Pro_001Schema,\n    },\n    [Models.Gemini2_0FlashExpLiteral]: {\n      model: Models.Gemini2_0FlashExp,\n      modelOptions: Models.Gemini2_0FlashExpOptions,\n      modelSchema: Models.Gemini2_0FlashExpSchema,\n    },\n\n    [Models.Gemini2_5FlashPreview0417Literal]: {\n      model: Models.Gemini2_5FlashPreview0417,\n      modelOptions: Models.Gemini2_5FlashPreview0417Options,\n      modelSchema: Models.Gemini2_5FlashPreview0417Schema,\n    },\n    [Models.Gemini2_5ProPreview0325Literal]: {\n      model: Models.Gemini2_5ProPreview0325,\n      modelOptions: Models.Gemini2_5ProPreview0325Options,\n      modelSchema: Models.Gemini2_5ProPreview0325Schema,\n    },\n  };\n\n  private readonly embeddingModelFactories: Record<\n    string,\n    {\n      model: { new (options: any): EmbeddingModelV1 };\n      modelOptions: z.ZodType<any>;\n      modelSchema: EmbeddingModelSchemaType;\n    }\n  > = {\n    [Models.Text_Embedding_001Literal]: {\n      model: Models.Text_Embedding_001,\n      modelOptions: Models.Text_Embedding_001Options,\n      modelSchema: Models.Text_Embedding_001Schema,\n    },\n    [Models.Text_Embedding_004Literal]: {\n      model: Models.Text_Embedding_004,\n      modelOptions: Models.Text_Embedding_004Options,\n      modelSchema: Models.Text_Embedding_004Schema,\n    },\n  };\n\n  chatModelLiterals(): string[] {\n    return Object.keys(this.chatModelFactories);\n  }\n\n  chatModelSchemas(): Record<string, ChatModelSchemaType> {\n    return Object.keys(this.chatModelFactories).reduce(\n      (acc, key) => {\n        acc[key] = this.chatModelFactories[key].modelSchema;\n        return acc;\n      },\n      {} as Record<string, ChatModelSchemaType>\n    );\n  }\n\n  chatModel(options: C): ChatModelV1 {\n    const modelName = options.modelName;\n    if (!(modelName in this.chatModelFactories)) {\n      throw new ProviderError({\n        info: `Google chat model: ${modelName} not found`,\n        cause: new Error(`Google chat model: ${modelName} not found, available chat models: \n          [${this.chatModelLiterals().join(\", \")}]`),\n      });\n    }\n\n    const model = this.chatModelFactories[modelName].model;\n    const parsedOptions = this.chatModelFactories[modelName].modelOptions.parse(options);\n    return new model(parsedOptions);\n  }\n\n  embeddingModelLiterals(): string[] {\n    return Object.keys(this.embeddingModelFactories);\n  }\n\n  embeddingModelSchemas(): Record<string, EmbeddingModelSchemaType> {\n    return Object.keys(this.embeddingModelFactories).reduce(\n      (acc, key) => {\n        acc[key] = this.embeddingModelFactories[key].modelSchema;\n        return acc;\n      },\n      {} as Record<string, EmbeddingModelSchemaType>\n    );\n  }\n\n  embeddingModel(options: E): EmbeddingModelV1 {\n    const modelName = options.modelName;\n    if (!(modelName in this.embeddingModelFactories)) {\n      throw new ProviderError({\n        info: `Google embedding model: ${modelName} not found`,\n        cause: new Error(`Google embedding model: ${modelName} not found, available embedding models: \n          [${this.embeddingModelLiterals().join(\", \")}]`),\n      });\n    }\n\n    const model = this.embeddingModelFactories[modelName].model;\n    const parsedOptions = this.embeddingModelFactories[modelName].modelOptions.parse(options);\n    return new model(parsedOptions);\n  }\n}\n\nexport { Google, ProviderLiteral };\n","{\n  \"base-gemini-1-chat-model\": {\n    \"modelName\": \"base-gemini-1-chat-model\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0,\n            \"outputPricePerMillion\": 0\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.0-pro-001\": {\n    \"modelName\": \"gemini-1.0-pro-001\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.5,\n            \"outputPricePerMillion\": 1.5\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.0-pro-latest\": {\n    \"modelName\": \"gemini-1.0-pro-latest\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.5,\n            \"outputPricePerMillion\": 1.5\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.0-pro-vision\": {\n    \"modelName\": \"gemini-1.0-pro-vision\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.5,\n            \"outputPricePerMillion\": 1.5\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.0-pro\": {\n    \"modelName\": \"gemini-1.0-pro\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.5,\n            \"outputPricePerMillion\": 1.5\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.5-flash-001\": {\n    \"modelName\": \"gemini-1.5-flash-001\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": 128000,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.075,\n            \"outputPricePerMillion\": 0.3\n          }\n        }\n      },\n      {\n        \"minTokens\": 128001,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.15,\n            \"outputPricePerMillion\": 0.6\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.5-flash-002\": {\n    \"modelName\": \"gemini-1.5-flash-002\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": 128000,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.0375,\n            \"outputPricePerMillion\": 0.15\n          }\n        }\n      },\n      {\n        \"minTokens\": 128001,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.075,\n            \"outputPricePerMillion\": 0.3\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.5-flash-latest\": {\n    \"modelName\": \"gemini-1.5-flash-latest\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": 128000,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.075,\n            \"outputPricePerMillion\": 0.3\n          }\n        }\n      },\n      {\n        \"minTokens\": 128001,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.15,\n            \"outputPricePerMillion\": 0.6\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.5-flash\": {\n    \"modelName\": \"gemini-1.5-flash\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": 128000,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.075,\n            \"outputPricePerMillion\": 0.3\n          }\n        }\n      },\n      {\n        \"minTokens\": 128001,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.15,\n            \"outputPricePerMillion\": 0.6\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.5-pro-001\": {\n    \"modelName\": \"gemini-1.5-pro-001\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": 128000,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 1.25,\n            \"outputPricePerMillion\": 5\n          }\n        }\n      },\n      {\n        \"minTokens\": 128001,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 2.5,\n            \"outputPricePerMillion\": 10\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.5-pro-002\": {\n    \"modelName\": \"gemini-1.5-pro-002\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": 128000,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 1.25,\n            \"outputPricePerMillion\": 5\n          }\n        }\n      },\n      {\n        \"minTokens\": 128001,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 2.5,\n            \"outputPricePerMillion\": 10\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.5-pro-latest\": {\n    \"modelName\": \"gemini-1.5-pro-latest\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": 128000,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 1.25,\n            \"outputPricePerMillion\": 5\n          }\n        }\n      },\n      {\n        \"minTokens\": 128001,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 2.5,\n            \"outputPricePerMillion\": 10\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.5-pro\": {\n    \"modelName\": \"gemini-1.5-pro\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": 128000,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 1.25,\n            \"outputPricePerMillion\": 5\n          }\n        }\n      },\n      {\n        \"minTokens\": 128001,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 2.5,\n            \"outputPricePerMillion\": 10\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-2.0-flash-exp\": {\n    \"modelName\": \"gemini-2.0-flash-exp\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.1,\n            \"outputPricePerMillion\": 0.4\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-2.5-flash-preview-04-17\": {\n    \"modelName\": \"gemini-2.5-flash-preview-04-17\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.15,\n            \"outputPricePerMillion\": 0.6\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-2.5-pro-preview-03-25\": {\n    \"modelName\": \"gemini-2.5-pro-preview-03-25\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": 200000,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 1.25,\n            \"outputPricePerMillion\": 10\n          }\n        }\n      },\n      {\n        \"minTokens\": 200001,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 2.5,\n            \"outputPricePerMillion\": 15\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-pro-vision\": {\n    \"modelName\": \"gemini-pro-vision\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.5,\n            \"outputPricePerMillion\": 1.5\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-pro\": {\n    \"modelName\": \"gemini-pro\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.5,\n            \"outputPricePerMillion\": 1.5\n          }\n        }\n      }\n    ]\n  }\n}\n","import { z } from \"zod\";\n\nimport { AssistantRoleLiteral, SystemRoleLiteral, ToolRoleLiteral, UserRoleLiteral } from \"@adaline/types\";\n\nconst GoogleChatModelRoles = z.enum([SystemRoleLiteral, UserRoleLiteral, AssistantRoleLiteral, ToolRoleLiteral]);\n\nconst GoogleChatAssistantRoleLiteral = \"model\";\nconst GoogleChatToolRoleLiteral = \"function\";\n\nconst GoogleChatModelRolesMap = {\n  system: UserRoleLiteral,\n  user: UserRoleLiteral,\n  assistant: GoogleChatAssistantRoleLiteral,\n  tool: GoogleChatToolRoleLiteral,\n} as const;\n\nexport { GoogleChatAssistantRoleLiteral, GoogleChatToolRoleLiteral, GoogleChatModelRoles, GoogleChatModelRolesMap };\n","import { z } from \"zod\";\n\nimport { ChatModelSchemaType } from \"@adaline/provider\";\nimport { ImageModalityLiteral, TextModalityLiteral, ToolCallModalityLiteral, ToolResponseModalityLiteral } from \"@adaline/types\";\n\nconst GoogleChatModelModalities: ChatModelSchemaType[\"modalities\"] = [\n  TextModalityLiteral,\n  ImageModalityLiteral,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n];\n\nconst GoogleChatModelModalitiesEnum = z.enum([\n  TextModalityLiteral,\n  ImageModalityLiteral,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n]);\n\nconst GoogleChatModelTextModalities: ChatModelSchemaType[\"modalities\"] = [TextModalityLiteral];\n\nconst GoogleChatModelTextModalitiesEnum = z.enum([TextModalityLiteral]);\n\nconst GoogleChatModelTextVisionModalities: ChatModelSchemaType[\"modalities\"] = [TextModalityLiteral, ImageModalityLiteral];\n\nconst GoogleChatModelTextVisionModalitiesEnum = z.enum([TextModalityLiteral, ImageModalityLiteral]);\n\nconst GoogleChatModelTextToolModalities: ChatModelSchemaType[\"modalities\"] = [\n  TextModalityLiteral,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n];\n\nconst GoogleChatModelTextToolModalitiesEnum = z.enum([TextModalityLiteral, ToolCallModalityLiteral, ToolResponseModalityLiteral]);\n\nexport {\n  GoogleChatModelModalitiesEnum,\n  GoogleChatModelModalities,\n  GoogleChatModelTextModalitiesEnum,\n  GoogleChatModelTextModalities,\n  GoogleChatModelTextToolModalitiesEnum,\n  GoogleChatModelTextToolModalities,\n  GoogleChatModelTextVisionModalitiesEnum,\n  GoogleChatModelTextVisionModalities,\n};\n","import { z } from \"zod\";\n\nconst GoogleCompleteChatTextResponse = z.object({\n  text: z.string(),\n});\n\nconst GoogleCompleteChatToolResponse = z.object({\n  functionCall: z.object({\n    name: z.string(),\n    args: z.record(z.any()),\n  }),\n});\n\nconst GoogleCompleteChatResponse = z.object({\n  candidates: z.array(\n    z.object({\n      content: z\n        .object({\n          role: z.string(),\n          parts: z.array(z.union([GoogleCompleteChatTextResponse, GoogleCompleteChatToolResponse])),\n        })\n        .optional(),\n      finishReason: z.string(),\n      index: z.number().optional(),\n      safetyRatings: z.optional(\n        z.array(\n          z.object({\n            category: z.string(),\n            probability: z.string(),\n            blocked: z.boolean().optional(),\n          })\n        )\n      ),\n    })\n  ),\n  promptFeedback: z.optional(\n    z.object({\n      safetyRatings: z.optional(\n        z.array(\n          z.object({\n            category: z.string(),\n            probability: z.string(),\n          })\n        )\n      ),\n    })\n  ),\n  usageMetadata: z\n    .object({\n      promptTokenCount: z.number(),\n      cachedContentTokenCount: z.number().optional(),\n      candidatesTokenCount: z.number().optional(),\n      totalTokenCount: z.number(),\n    })\n    .optional(),\n});\ntype GoogleCompleteChatResponseType = z.infer<typeof GoogleCompleteChatResponse>;\n\nconst GoogleStreamChatTextResponse = z.object({\n  text: z.string(),\n});\n\nconst GoogleStreamChatToolResponse = z.object({\n  functionCall: z.object({\n    name: z.string(),\n    args: z.record(z.any()),\n  }),\n});\n\nconst GoogleStreamChatResponse = z.object({\n  candidates: z.array(\n    z.object({\n      content: z\n        .object({\n          role: z.string(),\n          parts: z.array(z.union([GoogleStreamChatTextResponse, GoogleStreamChatToolResponse])),\n        })\n        .optional(),\n      finishReason: z.string().optional(),\n      index: z.number().optional(),\n      safetyRatings: z.optional(\n        z.array(\n          z.object({\n            category: z.string(),\n            probability: z.string(),\n            blocked: z.boolean().optional(),\n          })\n        )\n      ),\n    })\n  ),\n  promptFeedback: z.optional(\n    z.object({\n      safetyRatings: z.optional(\n        z.array(\n          z.object({\n            category: z.string(),\n            probability: z.string(),\n          })\n        )\n      ),\n    })\n  ),\n  usageMetadata: z\n    .object({\n      promptTokenCount: z.number().optional(),\n      cachedContentTokenCount: z.number().optional(),\n      candidatesTokenCount: z.number().optional(),\n      totalTokenCount: z.number().optional(),\n    })\n    .optional(),\n});\ntype GoogleStreamChatResponseType = z.infer<typeof GoogleStreamChatResponse>;\n\nexport {\n  GoogleCompleteChatResponse,\n  GoogleCompleteChatTextResponse,\n  GoogleCompleteChatToolResponse,\n  GoogleStreamChatResponse,\n  GoogleStreamChatTextResponse,\n  GoogleStreamChatToolResponse,\n  type GoogleCompleteChatResponseType,\n  type GoogleStreamChatResponseType,\n};\n","import { z } from \"zod\";\n\nconst GoogleChatContentPartText = z.object({\n  text: z.string().min(1),\n});\ntype GoogleChatContentPartTextType = z.infer<typeof GoogleChatContentPartText>;\n\nconst GoogleChatContentPartInlineData = z.object({\n  inline_data: z.object({\n    mime_type: z.string().min(1),\n    data: z.string().base64(),\n  }),\n});\ntype GoogleChatContentPartInlineDataType = z.infer<typeof GoogleChatContentPartInlineData>;\n\nconst GoogleChatContentPartFunctionCall = z.object({\n  function_call: z.object({\n    name: z.string().min(1),\n    args: z.record(z.string().min(1)),\n  }),\n});\ntype GoogleChatContentPartFunctionCallType = z.infer<typeof GoogleChatContentPartFunctionCall>;\n\nconst GoogleChatContentPartFunctionResponse = z.object({\n  function_response: z.object({\n    name: z.string().min(1),\n    response: z.record(z.string().min(1)),\n  }),\n});\ntype GoogleChatContentPartFunctionResponseType = z.infer<typeof GoogleChatContentPartFunctionResponse>;\n\nconst GoogleChatContent = z.object({\n  role: z.enum([\"user\", \"model\", \"function\"]),\n  parts: z.array(\n    z.union([\n      GoogleChatContentPartText,\n      GoogleChatContentPartInlineData,\n      GoogleChatContentPartFunctionCall,\n      GoogleChatContentPartFunctionResponse,\n    ])\n  ),\n});\ntype GoogleChatContentType = z.infer<typeof GoogleChatContent>;\n\nconst GoogleChatSystemInstruction = z.object({\n  parts: z.array(GoogleChatContentPartText),\n});\ntype GoogleChatSystemInstructionType = z.infer<typeof GoogleChatSystemInstruction>;\n\nconst GoogleChatTool = z.object({\n  name: z.string().min(1),\n  description: z.string().min(1),\n  parameters: z.any(),\n});\ntype GoogleChatToolType = z.infer<typeof GoogleChatTool>;\n\nconst GoogleChatToolConfig = z.object({\n  function_calling_config: z.object({\n    mode: z.enum([\"ANY\", \"AUTO\", \"NONE\"]),\n    allowed_function_names: z.array(z.string()).optional(),\n  }),\n});\ntype GoogleChatToolConfigType = z.infer<typeof GoogleChatToolConfig>;\n\nconst GoogleChatGenerationConfig = z.object({\n  stopSequences: z.array(z.string()).optional(),\n  maxOutputTokens: z.number().optional(),\n  temperature: z.number().optional(),\n  topP: z.number().optional(),\n  topK: z.number().optional(),\n  presencePenalty: z.number().optional(),\n  frequencyPenalty: z.number().optional(),\n  seed: z.number().optional(),\n});\ntype GoogleChatGenerationConfigType = z.infer<typeof GoogleChatGenerationConfig>;\n\nconst GoogleChatSafetySettings = z.object({\n  category: z.enum([\n    \"HARM_CATEGORY_HARASSMENT\",\n    \"HARM_CATEGORY_HATE_SPEECH\",\n    \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n    \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n    \"HARM_CATEGORY_CIVIC_INTEGRITY\",\n  ]),\n  threshold: z.enum([\n    \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\",\n    \"BLOCK_LOW_AND_ABOVE\",\n    \"BLOCK_MEDIUM_AND_ABOVE\",\n    \"BLOCK_ONLY_HIGH\",\n    \"BLOCK_NONE\",\n    \"OFF\",\n  ]),\n});\ntype GoogleChatSafetySettingsType = z.infer<typeof GoogleChatSafetySettings>;\n\nconst GoogleChatRequest = z.object({\n  model: z.string().min(1).optional(),\n  contents: z.array(GoogleChatContent),\n  systemInstruction: GoogleChatSystemInstruction.optional(),\n  system_instruction: GoogleChatSystemInstruction.optional(),\n  generationConfig: GoogleChatGenerationConfig.optional(),\n  generation_config: GoogleChatGenerationConfig.optional(),\n  safetySettings: z.array(GoogleChatSafetySettings).optional(),\n  safety_settings: z.array(GoogleChatSafetySettings).optional(),\n  tools: z\n    .object({\n      function_declarations: z.array(GoogleChatTool),\n    })\n    .optional(),\n  toolConfig: GoogleChatToolConfig.optional(),\n  tool_config: GoogleChatToolConfig.optional(),\n});\ntype GoogleChatRequestType = z.infer<typeof GoogleChatRequest>;\n\nexport {\n  GoogleChatContent,\n  GoogleChatContentPartFunctionCall,\n  GoogleChatContentPartFunctionResponse,\n  GoogleChatContentPartInlineData,\n  GoogleChatContentPartText,\n  GoogleChatGenerationConfig,\n  GoogleChatRequest,\n  GoogleChatSystemInstruction,\n  GoogleChatTool,\n  GoogleChatToolConfig,\n  GoogleChatSafetySettings,\n  type GoogleChatContentPartTextType,\n  type GoogleChatContentPartFunctionCallType,\n  type GoogleChatContentPartFunctionResponseType,\n  type GoogleChatContentPartInlineDataType,\n  type GoogleChatToolType,\n  type GoogleChatToolConfigType,\n  type GoogleChatGenerationConfigType,\n  type GoogleChatRequestType,\n  type GoogleChatContentType,\n  type GoogleChatSystemInstructionType,\n  type GoogleChatSafetySettingsType,\n};\n","import { z } from \"zod\";\n\nimport {\n  ChatModelSchemaType,\n  ChatModelV1,\n  HeadersType,\n  InvalidConfigError,\n  InvalidMessagesError,\n  InvalidModelRequestError,\n  InvalidToolsError,\n  ModelResponseError,\n  ParamsType,\n  removeUndefinedEntries,\n  SelectStringConfigItemDefType,\n  UrlType,\n  urlWithoutTrailingSlash,\n} from \"@adaline/provider\";\nimport {\n  AssistantRoleLiteral,\n  Base64ImageContentTypeLiteral,\n  Base64ImageContentValueType,\n  ChatModelPriceType,\n  ChatResponseType,\n  ChatUsageType,\n  Config,\n  ConfigType,\n  ContentType,\n  createPartialTextMessage,\n  createPartialToolCallMessage,\n  createTextContent,\n  createToolCallContent,\n  ImageContentType,\n  ImageModalityLiteral,\n  Message,\n  MessageType,\n  PartialChatResponseType,\n  SystemRoleLiteral,\n  TextModalityLiteral,\n  Tool,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n  ToolRoleLiteral,\n  ToolType,\n  UserRoleLiteral,\n} from \"@adaline/types\";\n\nimport { Google } from \"../../provider/provider.google\";\nimport pricingData from \"../pricing.json\";\nimport {\n  GoogleChatContentPartFunctionCallType,\n  GoogleChatContentPartFunctionResponseType,\n  GoogleChatContentPartInlineDataType,\n  GoogleChatContentPartTextType,\n  GoogleChatContentType,\n  GoogleChatRequest,\n  GoogleChatRequestType,\n  GoogleChatSystemInstructionType,\n  GoogleChatToolType,\n  GoogleCompleteChatResponse,\n  GoogleCompleteChatResponseType,\n  GoogleStreamChatResponse,\n  GoogleStreamChatResponseType,\n} from \"./types\";\n\nconst BaseChatModelOptions = z.object({\n  modelName: z.string(),\n  apiKey: z.string(),\n  baseUrl: z.string().url().optional(),\n  completeChatUrl: z.string().url().optional(),\n  streamChatUrl: z.string().url().optional(),\n});\ntype BaseChatModelOptionsType = z.infer<typeof BaseChatModelOptions>;\n\nclass BaseChatModel implements ChatModelV1<ChatModelSchemaType> {\n  readonly version = \"v1\" as const;\n  modelSchema: ChatModelSchemaType;\n  readonly modelName: string;\n\n  private readonly apiKey: string;\n  private readonly baseUrl: string;\n  private readonly streamChatUrl: string;\n  private readonly completeChatUrl: string;\n\n  constructor(modelSchema: ChatModelSchemaType, options: BaseChatModelOptionsType) {\n    const parsedOptions = BaseChatModelOptions.parse(options);\n    this.modelSchema = modelSchema;\n    this.modelName = parsedOptions.modelName;\n    this.apiKey = parsedOptions.apiKey;\n    this.baseUrl = urlWithoutTrailingSlash(parsedOptions.baseUrl ?? Google.baseUrl);\n    this.completeChatUrl = urlWithoutTrailingSlash(\n      parsedOptions.completeChatUrl || `${this.baseUrl}/models/${this.modelName}:generateContent?key=${this.apiKey}`\n    );\n    this.streamChatUrl = urlWithoutTrailingSlash(\n      parsedOptions.streamChatUrl || `${this.baseUrl}/models/${this.modelName}:streamGenerateContent?key=${this.apiKey}`\n    );\n  }\n\n  getDefaultBaseUrl(): UrlType {\n    return this.baseUrl;\n  }\n\n  getDefaultHeaders(): HeadersType {\n    return {\n      \"Content-Type\": \"application/json\",\n    };\n  }\n\n  getDefaultParams(): ParamsType {\n    return {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getRetryDelay(responseHeaders: HeadersType): { shouldRetry: boolean; delayMs: number } {\n    return { shouldRetry: false, delayMs: 0 };\n  }\n\n  // TODO: unused method, not tested; should add support for non-text modalities, tools\n  getTokenCount(messages: MessageType[]): number {\n    return messages.reduce((acc, message) => {\n      return acc + message.content.map((content) => (content.modality === \"text\" ? content.value : \"\")).join(\" \").length;\n    }, 0);\n  }\n\n  transformModelRequest(request: GoogleChatRequestType): {\n    modelName: string | undefined;\n    config: ConfigType;\n    messages: MessageType[];\n    tools: ToolType[] | undefined;\n  } {\n    const safeRequest = GoogleChatRequest.safeParse(request);\n    if (!safeRequest.success) {\n      throw new InvalidModelRequestError({ info: \"Invalid model request\", cause: safeRequest.error });\n    }\n\n    const parsedRequest = safeRequest.data;\n\n    const modelName = parsedRequest.model;\n\n    if (parsedRequest.system_instruction && parsedRequest.systemInstruction) {\n      throw new InvalidModelRequestError({\n        info: `Invalid model request for model : '${this.modelName}'`,\n        cause: new Error(\"'system_instruction' and 'systemInstruction' are not allowed at the same time\"),\n      });\n    }\n\n    if (parsedRequest.generation_config && parsedRequest.generationConfig) {\n      throw new InvalidModelRequestError({\n        info: `Invalid model request for model : '${this.modelName}'`,\n        cause: new Error(\"'generation_config' and 'generationConfig' are not allowed at the same time\"),\n      });\n    }\n\n    if (parsedRequest.tool_config && parsedRequest.toolConfig) {\n      throw new InvalidModelRequestError({\n        info: `Invalid model request for model : '${this.modelName}'`,\n        cause: new Error(\"'tool_config' and 'toolConfig' are not allowed at the same time\"),\n      });\n    }\n\n    const systemInstruction = parsedRequest.system_instruction || parsedRequest.systemInstruction;\n    const generationConfig = parsedRequest.generation_config || parsedRequest.generationConfig;\n    const safetySettings = parsedRequest.safety_settings || parsedRequest.safetySettings;\n    const toolConfig = parsedRequest.tool_config || parsedRequest.toolConfig;\n\n    if (toolConfig && (!parsedRequest.tools || parsedRequest.tools.function_declarations.length === 0)) {\n      throw new InvalidModelRequestError({\n        info: `Invalid model request for model : '${this.modelName}'`,\n        cause: new Error(\"'tools' are required when 'tool_choice' is specified\"),\n      });\n    }\n\n    const _config: ConfigType = {};\n\n    if (toolConfig) {\n      if (toolConfig.function_calling_config.mode === \"ANY\") {\n        if (\n          toolConfig.function_calling_config.allowed_function_names &&\n          toolConfig.function_calling_config.allowed_function_names.length === 1\n        ) {\n          _config.toolChoice = toolConfig.function_calling_config.allowed_function_names[0];\n        } else {\n          _config.toolChoice = toolConfig.function_calling_config.mode.toLowerCase();\n        }\n      } else {\n        _config.toolChoice = toolConfig.function_calling_config.mode.toLowerCase();\n      }\n    }\n\n    _config.seed = generationConfig?.seed;\n    _config.maxTokens = generationConfig?.maxOutputTokens;\n    _config.temperature = generationConfig?.temperature;\n    _config.topP = generationConfig?.topP;\n    _config.presencePenalty = generationConfig?.presencePenalty;\n    _config.frequencyPenalty = generationConfig?.frequencyPenalty;\n    _config.stop = generationConfig?.stopSequences;\n    _config.safetySettings = safetySettings;\n    const config = Config().parse(removeUndefinedEntries(_config));\n\n    const messages: MessageType[] = [];\n    if (systemInstruction) {\n      systemInstruction.parts.forEach((part) => {\n        messages.push({ role: SystemRoleLiteral, content: [{ modality: TextModalityLiteral, value: part.text }] });\n      });\n    }\n\n    parsedRequest.contents.forEach((message) => {\n      const role = message.role;\n      switch (role) {\n        case \"user\":\n          {\n            const content = message.parts as (GoogleChatContentPartTextType | GoogleChatContentPartInlineDataType)[];\n            const _content = content.map((c) => {\n              if (\"text\" in c) {\n                return { modality: TextModalityLiteral, value: c.text };\n              } else {\n                return {\n                  modality: ImageModalityLiteral,\n                  detail: \"auto\" as ImageContentType[\"detail\"],\n                  value: {\n                    type: Base64ImageContentTypeLiteral,\n                    base64: c.inline_data.data,\n                    mediaType: c.inline_data.mime_type.split(\"/\")[1] as Base64ImageContentValueType[\"mediaType\"],\n                  },\n                };\n              }\n            });\n            messages.push({ role: role, content: _content });\n          }\n          break;\n\n        case \"model\":\n          {\n            const content = message.parts as (GoogleChatContentPartTextType | GoogleChatContentPartFunctionCallType)[];\n            const _content = content.map((c, index) => {\n              if (\"text\" in c) {\n                return { modality: TextModalityLiteral, value: c.text };\n              } else {\n                return {\n                  modality: ToolCallModalityLiteral,\n                  id: index.toString(),\n                  index: index,\n                  name: c.function_call.name,\n                  arguments: JSON.stringify(c.function_call.args),\n                };\n              }\n            });\n            messages.push({ role: AssistantRoleLiteral, content: _content });\n          }\n          break;\n\n        case \"function\":\n          {\n            const content = message.parts as GoogleChatContentPartFunctionResponseType[];\n            const _content = content.map((c, index) => {\n              return {\n                modality: ToolResponseModalityLiteral,\n                id: index.toString(),\n                index: index,\n                name: c.function_response.name,\n                data: JSON.stringify(c.function_response.response),\n              };\n            });\n            messages.push({ role: ToolRoleLiteral, content: _content });\n          }\n          break;\n\n        default: {\n          throw new InvalidMessagesError({\n            info: `Invalid message 'role' for model : ${this.modelName}`,\n            cause: new Error(`role : '${message.role}' is not supported for model : ${this.modelName}`),\n          });\n        }\n      }\n    });\n\n    const tools: ToolType[] = [];\n    if (parsedRequest.tools) {\n      parsedRequest.tools.function_declarations.forEach((tool: GoogleChatToolType) => {\n        tools.push({\n          type: \"function\",\n          definition: {\n            schema: {\n              name: tool.name,\n              description: tool.description,\n              parameters: tool.parameters,\n            },\n          },\n        });\n      });\n    }\n\n    return {\n      modelName,\n      config,\n      messages,\n      tools: tools.length > 0 ? tools : undefined,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  transformConfig(config: ConfigType, messages?: MessageType[], tools?: ToolType[]): ParamsType {\n    const _toolChoice = config.toolChoice;\n    delete config.toolChoice; // can have a specific tool name that is not in the model schema, validated at transformation\n\n    const _parsedConfig = this.modelSchema.config.schema.safeParse(config);\n    if (!_parsedConfig.success) {\n      throw new InvalidConfigError({\n        info: `Invalid config for model : '${this.modelName}'`,\n        cause: _parsedConfig.error,\n      });\n    }\n\n    const parsedConfig = _parsedConfig.data as ConfigType;\n\n    Object.keys(parsedConfig).forEach((key) => {\n      if (!(key in this.modelSchema.config.def)) {\n        throw new InvalidConfigError({\n          info: `Invalid config for model : '${this.modelName}'`,\n          cause: new Error(`Invalid config key : '${key}', \n            available keys : [${Object.keys(this.modelSchema.config.def).join(\", \")}]`),\n        });\n      }\n    });\n\n    const transformedConfig = Object.keys(parsedConfig).reduce((acc, key) => {\n      const def = this.modelSchema.config.def[key];\n      const paramKey = def.param;\n      const paramValue = (parsedConfig as ConfigType)[key];\n\n      if (key === \"reasoningEnabled\") {\n        // Handle reasoningEnabled specially\n        acc.thinkingConfig = {\n          includeThoughts: paramValue,\n        };\n      } else if (key === \"maxReasoningTokens\") {\n        acc.thinkingConfig = acc.thinkingConfig && typeof acc.thinkingConfig === \"object\"\n          ? { ...acc.thinkingConfig, thinkingBudget: paramValue }\n          : { thinkingBudget: paramValue };\n      } else if (paramKey === \"maxOutputTokens\" && def.type === \"range\" && paramValue === 0) {\n        acc[paramKey] = def.max;\n      } else {\n        acc[paramKey] = paramValue;\n      }\n\n      return acc;\n    }, {} as ParamsType);\n\n    const safetySettings = transformedConfig.safetySettings;\n    delete transformedConfig.safetySettings;\n\n    let toolConfig;\n    if (_toolChoice !== undefined) {\n      const toolChoice = _toolChoice as string;\n      if (!tools || (tools && tools.length === 0)) {\n        throw new InvalidConfigError({\n          info: `Invalid config for model : '${this.modelName}'`,\n          cause: new Error(\"'tools' are required when 'toolChoice' is specified\"),\n        });\n      } else if (tools && tools.length > 0) {\n        const configToolChoice = this.modelSchema.config.def.toolChoice as SelectStringConfigItemDefType;\n        if (!configToolChoice.choices.includes(toolChoice)) {\n          // toolChoice not in model schema choices\n          if (tools.map((tool) => tool.definition.schema.name).includes(toolChoice)) {\n            // toolChoice is a specific tool name\n            toolConfig = {\n              function_calling_config: {\n                mode: \"ANY\",\n                allowed_function_names: [toolChoice],\n              },\n            };\n          } else {\n            throw new InvalidConfigError({\n              info: `Invalid config for model : '${this.modelName}'`,\n              cause: new Error(`toolChoice : '${toolChoice}' is not part of provided 'tools' names or \n                one of [${configToolChoice.choices.join(\", \")}]`),\n            });\n          }\n        } else {\n          // toolChoice is in model schema choices\n          if (toolChoice === \"any\") {\n            toolConfig = {\n              function_calling_config: {\n                mode: \"ANY\",\n                allowed_function_names: tools.map((tool) => tool.definition.schema.name),\n              },\n            };\n          } else {\n            toolConfig = {\n              function_calling_config: {\n                mode: toolChoice.toUpperCase(), // Google uses uppercase for toolChoice\n              },\n            };\n          }\n        }\n      }\n    }\n\n    // if (\"response_format\" in transformedConfig && transformedConfig.response_format !== undefined) {\n    //   const responseFormat = transformedConfig.response_format as string;\n    //   if (responseFormat === \"json_schema\") {\n    //     if (!(\"response_schema\" in transformedConfig)) {\n    //       throw new InvalidConfigError({\n    //         info: `Invalid config for model : '${this.modelName}'`,\n    //         cause: new Error(\"'responseSchema' is required in config when 'responseFormat' is 'json_schema'\")\n    //       });\n    //     } else {\n    //       transformedConfig.response_format = {\n    //         type: \"json_schema\",\n    //         json_schema: transformedConfig.response_schema,\n    //       };\n    //       delete transformedConfig.response_schema;\n    //     }\n    //   } else {\n    //     transformedConfig.response_format = { type: responseFormat };\n    //   }\n    // }\n\n    return {\n      generation_config: transformedConfig,\n      ...(toolConfig ? { tool_config: toolConfig } : {}),\n      ...(safetySettings ? { safety_settings: safetySettings } : {}),\n    };\n  }\n\n  transformMessages(messages: MessageType[]): ParamsType {\n    if (!messages || (messages && messages.length === 0)) {\n      return { messages: [] };\n    }\n    const stripBase64Prefix = (data: string): string => {\n      const prefixMatch = data.match(/^data:image\\/[a-zA-Z]+;base64,/);\n      if (prefixMatch) {\n        return data.substring(prefixMatch[0].length);\n      }\n      return data;\n    };\n    const parsedMessages = messages.map((message) => {\n      const parsedMessage = Message().safeParse(message);\n      if (!parsedMessage.success) {\n        throw new InvalidMessagesError({ info: \"Invalid messages\", cause: parsedMessage.error });\n      }\n      return parsedMessage.data;\n    });\n\n    parsedMessages.forEach((message) => {\n      message.content.forEach((content) => {\n        if (!this.modelSchema.modalities.includes(content.modality)) {\n          throw new InvalidMessagesError({\n            info: `Invalid message content for model : '${this.modelName}'`,\n            cause: new Error(`model : '${this.modelName}' does not support modality : '${content.modality}', \n              available modalities : [${this.modelSchema.modalities.join(\", \")}]`),\n          });\n        }\n      });\n    });\n\n    parsedMessages.forEach((message) => {\n      if (!Object.keys(this.modelSchema.roles).includes(message.role)) {\n        throw new InvalidMessagesError({\n          info: `Invalid message content for model : '${this.modelName}'`,\n          cause: new Error(`model : '${this.modelName}' does not support role : '${message.role}', \n            available roles : [${Object.keys(this.modelSchema.roles).join(\", \")}]`),\n        });\n      }\n    });\n\n    const systemInstruction: GoogleChatSystemInstructionType = { parts: [] };\n    const nonSystemMessages: GoogleChatContentType[] = [];\n\n    parsedMessages.forEach((message) => {\n      switch (message.role) {\n        case SystemRoleLiteral:\n          {\n            message.content.forEach((content) => {\n              if (content.modality === TextModalityLiteral) {\n                systemInstruction.parts.push({ text: content.value });\n              } else {\n                throw new InvalidMessagesError({\n                  info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                  cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n                });\n              }\n            });\n          }\n          break;\n\n        case AssistantRoleLiteral:\n          {\n            const assistantContent: GoogleChatContentType[\"parts\"] = [];\n            message.content.forEach((content) => {\n              if (content.modality === TextModalityLiteral) {\n                assistantContent.push({ text: content.value });\n              } else if (content.modality === ToolCallModalityLiteral) {\n                assistantContent.push({\n                  function_call: {\n                    name: content.name,\n                    args: JSON.parse(content.arguments),\n                  },\n                });\n              } else {\n                throw new InvalidMessagesError({\n                  info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                  cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n                });\n              }\n            });\n            nonSystemMessages.push({\n              role: this.modelSchema.roles[message.role] as GoogleChatContentType[\"role\"],\n              parts: assistantContent,\n            });\n          }\n          break;\n\n        case UserRoleLiteral:\n          {\n            const userContent: GoogleChatContentType[\"parts\"] = [];\n            message.content.forEach((content) => {\n              if (content.modality === TextModalityLiteral) {\n                userContent.push({ text: content.value });\n              } else if (content.modality === ImageModalityLiteral) {\n                if (content.value.type === \"base64\") {\n                  let base64Data = content.value.base64;\n                  // Check and strip the data URL prefix if it exists.\n                  base64Data = stripBase64Prefix(base64Data);\n                  userContent.push({\n                    inline_data: {\n                      mime_type: `image/${content.value.mediaType}`,\n                      data: base64Data,\n                    },\n                  });\n                } else if (content.value.type === \"url\") {\n                  // TODO: add logic to fetch image from url, remove this error\n                  throw new InvalidMessagesError({\n                    info: `Invalid message 'modality' for model : ${this.modelName}`,\n                    cause: new Error(`model: '${this.modelName}' does not support image content type: '${content.value.type}'`),\n                  });\n                }\n              } else {\n                throw new InvalidMessagesError({\n                  info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                  cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n                });\n              }\n            });\n            nonSystemMessages.push({\n              role: this.modelSchema.roles[message.role] as GoogleChatContentType[\"role\"],\n              parts: userContent,\n            });\n          }\n          break;\n\n        case ToolRoleLiteral:\n          {\n            const toolResponseContent: GoogleChatContentPartFunctionResponseType[] = [];\n            message.content.forEach((content) => {\n              if (content.modality === ToolResponseModalityLiteral) {\n                toolResponseContent.push({\n                  function_response: {\n                    name: content.name,\n                    response: JSON.parse(content.data),\n                  },\n                });\n              } else {\n                throw new InvalidMessagesError({\n                  info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                  cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n                });\n              }\n            });\n            nonSystemMessages.push({\n              role: this.modelSchema.roles[message.role] as GoogleChatContentType[\"role\"],\n              parts: toolResponseContent,\n            });\n          }\n          break;\n\n        default: {\n          throw new InvalidMessagesError({\n            info: `Invalid message 'role' for model : ${this.modelName}`,\n            cause: new Error(`role : '${message.role}' is not supported, \n              available roles : [${Object.keys(this.modelSchema.roles).join(\", \")}]`),\n          });\n        }\n      }\n    });\n\n    if (nonSystemMessages[0].role !== this.modelSchema.roles[UserRoleLiteral]) {\n      throw new InvalidMessagesError({\n        info: `Invalid message 'role' for model : ${this.modelName}`,\n        cause: new Error(`model : '${this.modelName}' requires first message to be from user`),\n      });\n    }\n\n    const getNextExpectedRoles = (role: string): string[] => {\n      if (role === this.modelSchema.roles[UserRoleLiteral] || role === this.modelSchema.roles[ToolRoleLiteral]) {\n        return [this.modelSchema.roles[AssistantRoleLiteral] as string];\n      }\n      return [this.modelSchema.roles[UserRoleLiteral] as string, this.modelSchema.roles[ToolRoleLiteral] as string];\n    };\n\n    for (let i = 1; i < nonSystemMessages.length; i++) {\n      if (!getNextExpectedRoles(nonSystemMessages[i - 1].role).includes(nonSystemMessages[i].role)) {\n        throw new InvalidMessagesError({\n          info: `Invalid message format for model : ${this.modelName}`,\n          cause: new Error(\n            `model : '${this.modelName}' cannot have message with role : '${nonSystemMessages[i].role}' after message with role : '${nonSystemMessages[i - 1].role}'`\n          ),\n        });\n      }\n    }\n\n    if (\n      nonSystemMessages[nonSystemMessages.length - 1].role !== this.modelSchema.roles[UserRoleLiteral] &&\n      nonSystemMessages[nonSystemMessages.length - 1].role !== this.modelSchema.roles[ToolRoleLiteral]\n    ) {\n      throw new InvalidMessagesError({\n        info: `Invalid message format for model : ${this.modelName}`,\n        cause: new Error(`model : '${this.modelName}' requires last message to be from user`),\n      });\n    }\n\n    return {\n      contents: nonSystemMessages,\n      ...(systemInstruction.parts.length > 0 ? { system_instruction: systemInstruction } : {}),\n    };\n  }\n\n  transformTools(tools: ToolType[]): ParamsType {\n    if (!this.modelSchema.modalities.includes(ToolCallModalityLiteral)) {\n      throw new InvalidToolsError({\n        info: `Invalid tool 'modality' for model : ${this.modelName}`,\n        cause: new Error(`model : '${this.modelName}' does not support tool modality : '${ToolCallModalityLiteral}'`),\n      });\n    }\n\n    if (!tools || (tools && tools.length === 0)) {\n      return { tools: [] as ToolType[] };\n    }\n\n    const parsedTools = tools.map((tool) => {\n      const parsedTool = Tool().safeParse(tool);\n      if (!parsedTool.success) {\n        throw new InvalidToolsError({ info: \"Invalid tools\", cause: parsedTool.error });\n      }\n      return parsedTool.data;\n    });\n\n    const transformedTools = parsedTools.map((tool) => ({\n      name: tool.definition.schema.name,\n      description: tool.definition.schema.description,\n      parameters: tool.definition.schema.parameters,\n    }));\n\n    return {\n      tools: [\n        {\n          function_declarations: transformedTools,\n        },\n      ],\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getCompleteChatUrl(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.completeChatUrl);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getCompleteChatHeaders(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<HeadersType> {\n    return new Promise((resolve) => {\n      resolve(this.getDefaultHeaders());\n    });\n  }\n\n  async getCompleteChatData(config: ConfigType, messages: MessageType[], tools?: ToolType[]): Promise<ParamsType> {\n    const transformedConfig = this.transformConfig(config, messages, tools);\n    const transformedMessages = this.transformMessages(messages);\n    if (transformedMessages.messages && (transformedMessages.messages as MessageType[]).length === 0) {\n      throw new InvalidMessagesError({\n        info: \"Messages are required\",\n        cause: new Error(\"Messages are required\"),\n      });\n    }\n\n    const transformedTools = tools ? this.transformTools(tools) : {};\n\n    return new Promise((resolve) => {\n      resolve({\n        ...this.getDefaultParams(),\n        ...transformedConfig,\n        ...transformedMessages,\n        ...transformedTools,\n      });\n    });\n  }\n\n  transformCompleteChatResponse(response: any): ChatResponseType {\n    const safe = GoogleCompleteChatResponse.safeParse(response);\n    if (safe.success) {\n      if (safe.data.candidates.length === 0) {\n        throw new ModelResponseError({\n          info: \"Invalid response from model\",\n          cause: new Error(`No choices in response : ${JSON.stringify(safe.data)}`),\n        });\n      }\n\n      const parsedResponse: GoogleCompleteChatResponseType = safe.data;\n      const messages: MessageType[] = [];\n      let usage: ChatUsageType | undefined;\n      const _content = parsedResponse.candidates[0].content;\n      if (_content) {\n        const content = _content.parts.map((contentItem: any, index: any) => {\n          if (\"text\" in contentItem && contentItem.text !== undefined) {\n            return createTextContent(contentItem.text);\n          } else if (\"functionCall\" in contentItem && contentItem.functionCall !== undefined) {\n            return createToolCallContent(\n              index,\n              `${contentItem.functionCall.name}_${index}`,\n              contentItem.functionCall.name,\n              JSON.stringify(contentItem.functionCall.args)\n            );\n          }\n        }) as ContentType[];\n\n        messages.push({\n          role: AssistantRoleLiteral,\n          content: content,\n        });\n\n        if (parsedResponse.usageMetadata) {\n          usage = {\n            promptTokens: parsedResponse.usageMetadata.promptTokenCount,\n            totalTokens: parsedResponse.usageMetadata.totalTokenCount,\n            completionTokens: parsedResponse.usageMetadata.candidatesTokenCount || 0,\n          };\n        }\n\n        return {\n          messages: messages,\n          usage: usage,\n          logProbs: undefined,\n        };\n      }\n\n      const safetyRatings = parsedResponse.candidates[0].safetyRatings;\n      if (safetyRatings && safetyRatings.length > 0) {\n        safetyRatings.forEach((rating) => {\n          if (rating.blocked) {\n            throw new ModelResponseError({\n              info: `Blocked content for category: ${rating.category} with probability: ${rating.probability}`,\n              cause: new Error(`Blocked content for category: ${rating.category} with probability: ${rating.probability}`),\n            });\n          }\n        });\n      }\n\n      const finishReason = parsedResponse.candidates[0].finishReason;\n      if (finishReason === \"SAFETY\") {\n        throw new ModelResponseError({\n          info: \"Blocked content, model response finished with safety reason\",\n          cause: new Error(\"Blocked content, model response finished with safety reason\"),\n        });\n      }\n    }\n\n    throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getStreamChatUrl(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.streamChatUrl);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getStreamChatHeaders(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<HeadersType> {\n    return new Promise((resolve) => {\n      resolve(this.getDefaultHeaders());\n    });\n  }\n\n  async getStreamChatData(config: ConfigType, messages: MessageType[], tools?: ToolType[]): Promise<ParamsType> {\n    const transformedConfig = this.transformConfig(config, messages, tools);\n    const transformedMessages = this.transformMessages(messages);\n    if (transformedMessages.messages && (transformedMessages.messages as MessageType[]).length === 0) {\n      throw new InvalidMessagesError({\n        info: \"Messages are required\",\n        cause: new Error(\"Messages are required\"),\n      });\n    }\n\n    const transformedTools = tools ? this.transformTools(tools) : {};\n\n    return new Promise((resolve) => {\n      resolve({\n        ...this.getDefaultParams(),\n        ...transformedConfig,\n        ...transformedMessages,\n        ...transformedTools,\n      });\n    });\n  }\n\n  async *transformStreamChatResponseChunk(\n    chunk: string,\n    buffer: string\n  ): AsyncGenerator<{ partialResponse: PartialChatResponseType; buffer: string }> {\n    // merge last buffer message and split into lines\n    const lines = (buffer + chunk).split(\",\\r\").filter((line) => line.trim() !== \"\");\n    for (const line of lines) {\n      let completeLine = line;\n      // remove all '\\n' from string JSON\n      completeLine = completeLine.replace(/\\n/g, \"\");\n      if (completeLine.startsWith(\"[\") || completeLine.startsWith(\",{\")) {\n        // start of stream, remove '['\n        completeLine = completeLine.slice(1);\n      } else if (completeLine.endsWith(\"]\")) {\n        if (completeLine === \"]\") {\n          // strict end of stream\n          return;\n        } else {\n          // remaining message and then end of stream, remove ']'\n          completeLine = completeLine.slice(0, -1);\n        }\n      }\n\n      let structuredLine: any;\n      try {\n        structuredLine = JSON.parse(completeLine);\n      } catch (error) {\n        // malformed JSON error, must be the end of loop\n        if (error instanceof SyntaxError) {\n          buffer = completeLine;\n          continue;\n        } else {\n          // non JSON parse error, re-raise\n          throw error;\n        }\n      }\n\n      // reset buffer\n      buffer = \"\";\n      const safe = GoogleStreamChatResponse.safeParse(structuredLine);\n      if (safe.success) {\n        const partialResponse: PartialChatResponseType = { partialMessages: [] };\n        const parsedResponse: GoogleStreamChatResponseType = safe.data;\n        if (parsedResponse.candidates.length > 0) {\n          const message = parsedResponse.candidates[0].content;\n          if (message && \"parts\" in message && message.parts.length > 0) {\n            message.parts.forEach((messagePart, index) => {\n              if (\"text\" in messagePart && messagePart.text !== undefined) {\n                partialResponse.partialMessages.push(createPartialTextMessage(AssistantRoleLiteral, messagePart.text));\n              }\n\n              if (\"functionCall\" in messagePart && messagePart.functionCall !== undefined) {\n                const toolCall = messagePart.functionCall;\n                partialResponse.partialMessages.push(\n                  createPartialToolCallMessage(\n                    AssistantRoleLiteral,\n                    index,\n                    `${toolCall.name}_${index}`,\n                    toolCall.name,\n                    JSON.stringify(toolCall.args)\n                  )\n                );\n              }\n            });\n          }\n        }\n\n        if (parsedResponse.usageMetadata) {\n          partialResponse.usage = {\n            promptTokens: parsedResponse.usageMetadata.promptTokenCount,\n            completionTokens: parsedResponse.usageMetadata.candidatesTokenCount,\n            totalTokens: parsedResponse.usageMetadata.totalTokenCount,\n          };\n        }\n\n        yield { partialResponse: partialResponse, buffer: buffer };\n      } else {\n        throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n      }\n    }\n\n    yield { partialResponse: { partialMessages: [] }, buffer: buffer };\n  }\n  async *transformProxyStreamChatResponseChunk(\n    chunk: string,\n    buffer: string,\n    data?: any,\n    headers?: Record<string, string>,\n    query?: Record<string, string>\n  ): AsyncGenerator<{ partialResponse: PartialChatResponseType; buffer: string }> {\n    // If query has alt not equal to 'sse', delegate to streamTransform logic\n    if (query?.alt !== \"sse\") {\n      yield* this.transformStreamChatResponseChunk(chunk, buffer);\n      return;\n    }\n\n    // --- proxyStreamTransform logic starts here ---\n    const newData = buffer + chunk;\n    let lines: string[] = [];\n    let newBuffer = \"\";\n\n    // Split newData into complete lines and new buffer\n    let currentIndex = 0;\n    while (currentIndex < newData.length) {\n      const newlineIndex = newData.indexOf(\"\\n\", currentIndex);\n      if (newlineIndex === -1) {\n        newBuffer = newData.substring(currentIndex);\n        break;\n      } else {\n        const line = newData.substring(currentIndex, newlineIndex).trim();\n        if (line) {\n          lines.push(line);\n        }\n        currentIndex = newlineIndex + 1;\n      }\n    }\n\n    // Process each complete line\n    for (const line of lines) {\n      if (line === \"data: [DONE]\") {\n        return; // End of stream\n      }\n\n      if (line.startsWith(\"data: \")) {\n        const jsonStr = line.substring(\"data: \".length);\n        try {\n          const structuredLine = JSON.parse(jsonStr);\n          const safe = GoogleStreamChatResponse.safeParse(structuredLine);\n          if (safe.success) {\n            const partialResponse: PartialChatResponseType = { partialMessages: [] };\n            const parsedResponse: GoogleStreamChatResponseType = safe.data;\n            if (parsedResponse.candidates.length > 0) {\n              const message = parsedResponse.candidates[0].content;\n              if (message && \"parts\" in message && message.parts.length > 0) {\n                message.parts.forEach((messagePart, index) => {\n                  if (\"text\" in messagePart && messagePart.text !== undefined) {\n                    partialResponse.partialMessages.push(createPartialTextMessage(AssistantRoleLiteral, messagePart.text));\n                  }\n\n                  if (\"functionCall\" in messagePart && messagePart.functionCall !== undefined) {\n                    const toolCall = messagePart.functionCall;\n                    partialResponse.partialMessages.push(\n                      createPartialToolCallMessage(\n                        AssistantRoleLiteral,\n                        index,\n                        `${toolCall.name}_${index}`,\n                        toolCall.name,\n                        JSON.stringify(toolCall.args)\n                      )\n                    );\n                  }\n                });\n              }\n            }\n\n            if (\n              parsedResponse.usageMetadata &&\n              parsedResponse.usageMetadata.totalTokenCount &&\n              parsedResponse.usageMetadata.promptTokenCount &&\n              parsedResponse.usageMetadata.candidatesTokenCount\n            ) {\n              partialResponse.usage = {\n                promptTokens: parsedResponse.usageMetadata.promptTokenCount,\n                completionTokens: parsedResponse.usageMetadata.candidatesTokenCount,\n                totalTokens: parsedResponse.usageMetadata.totalTokenCount,\n              };\n            }\n\n            yield { partialResponse: partialResponse, buffer: buffer };\n          } else {\n            throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n          }\n        } catch (error) {\n          throw new ModelResponseError({\n            info: `Malformed JSON received in stream: ${jsonStr}`,\n            cause: error,\n          });\n        }\n      }\n    }\n\n    // Yield the updated buffer after processing all lines\n    yield { partialResponse: { partialMessages: [] }, buffer: newBuffer };\n  }\n\n  async getProxyCompleteChatUrl(data?: any, headers?: Record<string, string>, query?: Record<string, string>): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.completeChatUrl);\n    });\n  }\n\n  async getProxyStreamChatUrl(data?: any, headers?: Record<string, string>, query?: Record<string, string>): Promise<UrlType> {\n    return new Promise((resolve) => {\n      if (!query || Object.keys(query).length === 0) {\n        resolve(this.streamChatUrl);\n        return;\n      }\n\n      const url = new URL(this.streamChatUrl);\n      Object.entries(query).forEach(([key, value]) => {\n        if (value != null) {\n          url.searchParams.set(key, value);\n        }\n      });\n\n      resolve(url.toString() as UrlType);\n    });\n  }\n  async getProxyCompleteChatHeaders(data?: any, headers?: Record<string, string>, query?: Record<string, string>): Promise<HeadersType> {\n    if (!headers) {\n      return {};\n    }\n    const sanitizedHeaders: Record<string, string> = { ...headers };\n\n    delete sanitizedHeaders.host;\n    delete sanitizedHeaders[\"content-length\"];\n    return sanitizedHeaders;\n  }\n  async getProxyStreamChatHeaders(data?: any, headers?: Record<string, string>, query?: Record<string, string>): Promise<HeadersType> {\n    // Directly delegate to getProxyCompleteChatHeaders for now\n    return await this.getProxyCompleteChatHeaders(data, headers, query);\n  }\n  getModelPricing(): ChatModelPriceType {\n    // Check if the modelName exists in pricingData before accessing it\n    if (!(this.modelName in pricingData)) {\n      throw new ModelResponseError({\n        info: `Invalid model pricing for model : '${this.modelName}'`,\n        cause: new Error(`No pricing configuration found for model \"${this.modelName}\"`),\n      });\n    }\n\n    const entry = pricingData[this.modelName as keyof typeof pricingData];\n    return entry as ChatModelPriceType;\n  }\n}\n\nexport { BaseChatModel, BaseChatModelOptions, type BaseChatModelOptionsType };\n","import { ParamsType } from \"@adaline/provider\";\nimport { MessageType, UserRoleLiteral } from \"@adaline/types\";\n\nimport { BaseChatModel } from \"./base-chat-model.google\";\nimport { GoogleChatContentType, GoogleChatSystemInstructionType } from \"./types\";\n\nclass BaseChatModelGemini1 extends BaseChatModel {\n  transformMessages(messages: MessageType[]): ParamsType {\n    const transformedMessages = super.transformMessages(messages) as {\n      contents: GoogleChatContentType[];\n      systemInstruction?: GoogleChatSystemInstructionType;\n    };\n\n    if (transformedMessages.systemInstruction) {\n      const systemUserMessage = {\n        role: this.modelSchema.roles[UserRoleLiteral] as GoogleChatContentType[\"role\"],\n        parts: transformedMessages.systemInstruction.parts,\n      };\n      transformedMessages.contents.unshift(systemUserMessage);\n      delete transformedMessages.systemInstruction;\n    }\n\n    return transformedMessages;\n  }\n}\n\nexport { BaseChatModelGemini1 };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { BaseChatModelGemini1 } from \"./base-gemini-1-chat-model.google\";\nimport {\n  GoogleChatModelRoles,\n  GoogleChatModelRolesMap,\n  GoogleChatModelTextToolModalities,\n  GoogleChatModelTextToolModalitiesEnum,\n} from \"./types\";\n\nconst Gemini1_0Pro_001Literal = \"gemini-1.0-pro-001\";\nconst Gemini1_0Pro_001Description =\n  \"Google's predecessor to Gemini 1.5 Pro, a model for scaling across a wide range of tasks \\\n  Optimized for natural language tasks, multi-turn text and code chat, and code generation\";\n\nconst Gemini1_0Pro_001Schema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelTextToolModalitiesEnum).parse({\n  name: Gemini1_0Pro_001Literal,\n  description: Gemini1_0Pro_001Description,\n  maxInputTokens: 30720,\n  maxOutputTokens: 2048,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelTextToolModalities,\n  config: {\n    def: GoogleChatModelConfigs.base(1.0, 0.9, 2048, 4, 1.0).def,\n    schema: GoogleChatModelConfigs.base(1.0, 0.9, 2048, 4, 1.0).schema,\n  },\n  price: pricingData[Gemini1_0Pro_001Literal],\n});\n\nconst Gemini1_0Pro_001Options = BaseChatModelOptions;\ntype Gemini1_0Pro_001OptionsType = z.infer<typeof Gemini1_0Pro_001Options>;\n\nclass Gemini1_0Pro_001 extends BaseChatModelGemini1 {\n  constructor(options: Gemini1_0Pro_001OptionsType) {\n    super(Gemini1_0Pro_001Schema, options);\n  }\n}\n\nexport { Gemini1_0Pro_001, Gemini1_0Pro_001Literal, Gemini1_0Pro_001Options, Gemini1_0Pro_001Schema, type Gemini1_0Pro_001OptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { BaseChatModelGemini1 } from \"./base-gemini-1-chat-model.google\";\nimport {\n  GoogleChatModelRoles,\n  GoogleChatModelRolesMap,\n  GoogleChatModelTextToolModalities,\n  GoogleChatModelTextToolModalitiesEnum,\n} from \"./types\";\n\nconst Gemini1_0ProLatestLiteral = \"gemini-1.0-pro-latest\";\nconst Gemini1_0ProLatestDescription =\n  \"Google's latest multimodal model with great performance for high-frequency tasks. \\\n  Optimized for natural language tasks, multi-turn text and code chat, and code generation\";\n\nconst Gemini1_0ProLatestSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelTextToolModalitiesEnum).parse({\n  name: Gemini1_0ProLatestLiteral,\n  description: Gemini1_0ProLatestDescription,\n  maxInputTokens: 30720,\n  maxOutputTokens: 2048,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelTextToolModalities,\n  config: {\n    def: GoogleChatModelConfigs.base(1.0, 0.9, 2048, 4, 1.0).def,\n    schema: GoogleChatModelConfigs.base(1.0, 0.9, 2048, 4, 1.0).schema,\n  },\n  price: pricingData[Gemini1_0ProLatestLiteral],\n});\n\nconst Gemini1_0ProLatestOptions = BaseChatModelOptions;\ntype Gemini1_0ProLatestOptionsType = z.infer<typeof Gemini1_0ProLatestOptions>;\n\nclass Gemini1_0ProLatest extends BaseChatModelGemini1 {\n  constructor(options: Gemini1_0ProLatestOptionsType) {\n    super(Gemini1_0ProLatestSchema, options);\n  }\n}\n\nexport {\n  Gemini1_0ProLatest,\n  Gemini1_0ProLatestLiteral,\n  Gemini1_0ProLatestOptions,\n  Gemini1_0ProLatestSchema,\n  type Gemini1_0ProLatestOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { BaseChatModelGemini1 } from \"./base-gemini-1-chat-model.google\";\nimport {\n  GoogleChatModelRoles,\n  GoogleChatModelRolesMap,\n  GoogleChatModelTextVisionModalities,\n  GoogleChatModelTextVisionModalitiesEnum,\n} from \"./types\";\n\nconst Gemini1_0ProVisionLiteral = \"gemini-1.0-pro-vision\";\nconst Gemini1_0ProVisionDescription =\n  \"Google's predecessor to Gemini 1.5 Pro, an image understanding model to handle a broad range of applications\";\n\nconst Gemini1_0ProVisionSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelTextVisionModalitiesEnum).parse({\n  name: Gemini1_0ProVisionLiteral,\n  description: Gemini1_0ProVisionDescription,\n  maxInputTokens: 12288,\n  maxOutputTokens: 4096,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelTextVisionModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(1.0, 0.4, 4096, 4, 1.0, 32).def,\n    schema: GoogleChatModelConfigs.c1(1.0, 0.4, 4096, 4, 1.0, 32).schema,\n  },\n  price: pricingData[Gemini1_0ProVisionLiteral],\n});\n\nconst Gemini1_0ProVisionOptions = BaseChatModelOptions;\ntype Gemini1_0ProVisionOptionsType = z.infer<typeof Gemini1_0ProVisionOptions>;\n\nclass Gemini1_0ProVision extends BaseChatModelGemini1 {\n  constructor(options: Gemini1_0ProVisionOptionsType) {\n    super(Gemini1_0ProVisionSchema, options);\n  }\n}\n\nexport {\n  Gemini1_0ProVision,\n  Gemini1_0ProVisionLiteral,\n  Gemini1_0ProVisionOptions,\n  Gemini1_0ProVisionSchema,\n  type Gemini1_0ProVisionOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { BaseChatModelGemini1 } from \"./base-gemini-1-chat-model.google\";\nimport {\n  GoogleChatModelRoles,\n  GoogleChatModelRolesMap,\n  GoogleChatModelTextToolModalities,\n  GoogleChatModelTextToolModalitiesEnum,\n} from \"./types\";\n\nconst Gemini1_0ProLiteral = \"gemini-1.0-pro\";\nconst Gemini1_0ProDescription =\n  \"Google's predecessor to Gemini 1.5 Pro, a model for scaling across a wide range of tasks \\\n  Optimized for natural language tasks, multi-turn text and code chat, and code generation\";\n\nconst Gemini1_0ProSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelTextToolModalitiesEnum).parse({\n  name: Gemini1_0ProLiteral,\n  description: Gemini1_0ProDescription,\n  maxInputTokens: 30720,\n  maxOutputTokens: 2048,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelTextToolModalities,\n  config: {\n    def: GoogleChatModelConfigs.base(1.0, 0.9, 2048, 4, 1.0).def,\n    schema: GoogleChatModelConfigs.base(1.0, 0.9, 2048, 4, 1.0).schema,\n  },\n  price: pricingData[Gemini1_0ProLiteral],\n});\n\nconst Gemini1_0ProOptions = BaseChatModelOptions;\ntype Gemini1_0ProOptionsType = z.infer<typeof Gemini1_0ProOptions>;\n\nclass Gemini1_0Pro extends BaseChatModelGemini1 {\n  constructor(options: Gemini1_0ProOptionsType) {\n    super(Gemini1_0ProSchema, options);\n  }\n}\n\nexport { Gemini1_0Pro, Gemini1_0ProLiteral, Gemini1_0ProOptions, Gemini1_0ProSchema, type Gemini1_0ProOptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini1_5Flash001Literal = \"gemini-1.5-flash-001\";\nconst Gemini1_5Flash001Description =\n  \"Google's fastest, most cost-efficient multimodal model with great performance for high-frequency tasks. \\\n  Optimized for fast and versatile performance across a diverse variety of tasks\";\n\nconst Gemini1_5Flash001Schema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini1_5Flash001Literal,\n  description: Gemini1_5Flash001Description,\n  maxInputTokens: 1000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).schema,\n  },\n  price: pricingData[Gemini1_5Flash001Literal],\n});\n\nconst Gemini1_5Flash001Options = BaseChatModelOptions;\ntype Gemini1_5Flash001OptionsType = z.infer<typeof Gemini1_5Flash001Options>;\n\nclass Gemini1_5Flash001 extends BaseChatModel {\n  constructor(options: Gemini1_5Flash001OptionsType) {\n    super(Gemini1_5Flash001Schema, options);\n  }\n}\n\nexport {\n  Gemini1_5Flash001,\n  Gemini1_5Flash001Literal,\n  Gemini1_5Flash001Options,\n  Gemini1_5Flash001Schema,\n  type Gemini1_5Flash001OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini1_5Flash002Literal = \"gemini-1.5-flash-002\";\nconst Gemini1_5Flash002Description =\n  \"Google's fastest, most cost-efficient multimodal model with great performance for high-frequency tasks. \\\n  Optimized for fast and versatile performance across a diverse variety of tasks\";\n\nconst Gemini1_5Flash002Schema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini1_5Flash002Literal,\n  description: Gemini1_5Flash002Description,\n  maxInputTokens: 1000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 40).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 40).schema,\n  },\n  price: pricingData[Gemini1_5Flash002Literal],\n});\n\nconst Gemini1_5Flash002Options = BaseChatModelOptions;\ntype Gemini1_5Flash002OptionsType = z.infer<typeof Gemini1_5Flash002Options>;\n\nclass Gemini1_5Flash002 extends BaseChatModel {\n  constructor(options: Gemini1_5Flash002OptionsType) {\n    super(Gemini1_5Flash002Schema, options);\n  }\n}\n\nexport {\n  Gemini1_5Flash002,\n  Gemini1_5Flash002Literal,\n  Gemini1_5Flash002Options,\n  Gemini1_5Flash002Schema,\n  type Gemini1_5Flash002OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini1_5FlashLatestLiteral = \"gemini-1.5-flash-latest\";\nconst Gemini1_5FlashLatestDescription =\n  \"Google's latest multimodal model with great performance for high-frequency tasks. \\\n  Optimized for fast and versatile performance across a diverse variety of tasks\";\n\nconst Gemini1_5FlashLatestSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini1_5FlashLatestLiteral,\n  description: Gemini1_5FlashLatestDescription,\n  maxInputTokens: 1000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).schema,\n  },\n  price: pricingData[Gemini1_5FlashLatestLiteral],\n});\n\nconst Gemini1_5FlashLatestOptions = BaseChatModelOptions;\ntype Gemini1_5FlashLatestOptionsType = z.infer<typeof Gemini1_5FlashLatestOptions>;\n\nclass Gemini1_5FlashLatest extends BaseChatModel {\n  constructor(options: Gemini1_5FlashLatestOptionsType) {\n    super(Gemini1_5FlashLatestSchema, options);\n  }\n}\n\nexport {\n  Gemini1_5FlashLatest,\n  Gemini1_5FlashLatestLiteral,\n  Gemini1_5FlashLatestOptions,\n  Gemini1_5FlashLatestSchema,\n  type Gemini1_5FlashLatestOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini1_5FlashLiteral = \"gemini-1.5-flash\";\nconst Gemini1_5FlashDescription =\n  \"Google's fastest, most cost-efficient multimodal model with great performance for high-frequency tasks. \\\n  Optimized for fast and versatile performance across a diverse variety of tasks\";\n\nconst Gemini1_5FlashSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini1_5FlashLiteral,\n  description: Gemini1_5FlashDescription,\n  maxInputTokens: 1000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).schema,\n  },\n  price: pricingData[Gemini1_5FlashLiteral],\n});\n\nconst Gemini1_5FlashOptions = BaseChatModelOptions;\ntype Gemini1_5FlashOptionsType = z.infer<typeof Gemini1_5FlashOptions>;\n\nclass Gemini1_5Flash extends BaseChatModel {\n  constructor(options: Gemini1_5FlashOptionsType) {\n    super(Gemini1_5FlashSchema, options);\n  }\n}\n\nexport { Gemini1_5Flash, Gemini1_5FlashLiteral, Gemini1_5FlashOptions, Gemini1_5FlashSchema, type Gemini1_5FlashOptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini1_5Pro001Literal = \"gemini-1.5-pro-001\";\nconst Gemini1_5Pro001Description =\n  \"Google's best performing multimodal model with features for a wide variety of reasoning tasks. \\\n  Optimized for complex reasoning tasks requiring more intelligence\";\n\nconst Gemini1_5Pro001Schema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini1_5Pro001Literal,\n  description: Gemini1_5Pro001Description,\n  maxInputTokens: 2000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).schema,\n  },\n  price: pricingData[Gemini1_5Pro001Literal],\n});\n\nconst Gemini1_5Pro001Options = BaseChatModelOptions;\ntype Gemini1_5Pro001OptionsType = z.infer<typeof Gemini1_5Pro001Options>;\n\nclass Gemini1_5Pro001 extends BaseChatModel {\n  constructor(options: Gemini1_5Pro001OptionsType) {\n    super(Gemini1_5Pro001Schema, options);\n  }\n}\n\nexport { Gemini1_5Pro001, Gemini1_5Pro001Literal, Gemini1_5Pro001Options, Gemini1_5Pro001Schema, type Gemini1_5Pro001OptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini1_5Pro002Literal = \"gemini-1.5-pro-002\";\nconst Gemini1_5Pro002Description =\n  \"Google's best performing multimodal model with features for a wide variety of reasoning tasks. \\\n  Optimized for complex reasoning tasks requiring more intelligence\";\n\nconst Gemini1_5Pro002Schema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini1_5Pro002Literal,\n  description: Gemini1_5Pro002Description,\n  maxInputTokens: 2000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 40).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 40).schema,\n  },\n  price: pricingData[Gemini1_5Pro002Literal],\n});\n\nconst Gemini1_5Pro002Options = BaseChatModelOptions;\ntype Gemini1_5Pro002OptionsType = z.infer<typeof Gemini1_5Pro002Options>;\n\nclass Gemini1_5Pro002 extends BaseChatModel {\n  constructor(options: Gemini1_5Pro002OptionsType) {\n    super(Gemini1_5Pro002Schema, options);\n  }\n}\n\nexport { Gemini1_5Pro002, Gemini1_5Pro002Literal, Gemini1_5Pro002Options, Gemini1_5Pro002Schema, type Gemini1_5Pro002OptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini1_5ProLatestLiteral = \"gemini-1.5-pro-latest\";\nconst Gemini1_5ProLatestDescription =\n  \"Google's best performing multimodal model with features for a wide variety of reasoning tasks. \\\n  Optimized for complex reasoning tasks requiring more intelligence\";\n\nconst Gemini1_5ProLatestSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini1_5ProLatestLiteral,\n  description: Gemini1_5ProLatestDescription,\n  maxInputTokens: 2000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).schema,\n  },\n  price: pricingData[Gemini1_5ProLatestLiteral],\n});\n\nconst Gemini1_5ProLatestOptions = BaseChatModelOptions;\ntype Gemini1_5ProLatestOptionsType = z.infer<typeof Gemini1_5ProLatestOptions>;\n\nclass Gemini1_5ProLatest extends BaseChatModel {\n  constructor(options: Gemini1_5ProLatestOptionsType) {\n    super(Gemini1_5ProLatestSchema, options);\n  }\n}\n\nexport {\n  Gemini1_5ProLatest,\n  Gemini1_5ProLatestLiteral,\n  Gemini1_5ProLatestOptions,\n  Gemini1_5ProLatestSchema,\n  type Gemini1_5ProLatestOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini1_5ProLiteral = \"gemini-1.5-pro\";\nconst Gemini1_5ProDescription =\n  \"Google's best performing multimodal model with features for a wide variety of reasoning tasks. \\\n  Optimized for complex reasoning tasks requiring more intelligence\";\n\nconst Gemini1_5ProSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini1_5ProLiteral,\n  description: Gemini1_5ProDescription,\n  maxInputTokens: 2000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).schema,\n  },\n  price: pricingData[Gemini1_5ProLiteral],\n});\n\nconst Gemini1_5ProOptions = BaseChatModelOptions;\ntype Gemini1_5ProOptionsType = z.infer<typeof Gemini1_5ProOptions>;\n\nclass Gemini1_5Pro extends BaseChatModel {\n  constructor(options: Gemini1_5ProOptionsType) {\n    super(Gemini1_5ProSchema, options);\n  }\n}\n\nexport { Gemini1_5Pro, Gemini1_5ProLiteral, Gemini1_5ProOptions, Gemini1_5ProSchema, type Gemini1_5ProOptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini2_0FlashExpLiteral = \"gemini-2.0-flash-exp\";\nconst Gemini2_0FlashExpDescription =\n  \"Google's experimental multimodal model with enhanced capabilities. \\\n  Designed for cutting-edge performance across complex and high-frequency tasks.\";\n\nconst Gemini2_0FlashExpSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini2_0FlashExpLiteral,\n  description: Gemini2_0FlashExpDescription,\n  maxInputTokens: 1000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).schema,\n  },\n  price: pricingData[Gemini2_0FlashExpLiteral],\n});\n\nconst Gemini2_0FlashExpOptions = BaseChatModelOptions;\ntype Gemini2_0FlashExpOptionsType = z.infer<typeof Gemini2_0FlashExpOptions>;\n\nclass Gemini2_0FlashExp extends BaseChatModel {\n  constructor(options: Gemini2_0FlashExpOptionsType) {\n    super(Gemini2_0FlashExpSchema, options);\n  }\n}\n\nexport {\n  Gemini2_0FlashExp,\n  Gemini2_0FlashExpLiteral,\n  Gemini2_0FlashExpOptions,\n  Gemini2_0FlashExpSchema,\n  type Gemini2_0FlashExpOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini2_5FlashPreview0417Literal = \"gemini-2.5-flash-preview-04-17\";\nconst Gemini2_5FlashPreview0417Description =\n  \"Google's best model in Gemini 2.5 family in terms of price-performance, offering well-rounded capabilities.\";\n\nconst Gemini2_5FlashPreview0417Schema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini2_5FlashPreview0417Literal,\n  description: Gemini2_5FlashPreview0417Description,\n  maxInputTokens: 1048576,\n  maxOutputTokens: 65536,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.reasoning(2.0, 1.0, 65536, 4, 0.95, 64).def,\n    schema: GoogleChatModelConfigs.reasoning(2.0, 1.0, 65536, 4, 0.95, 64).schema,\n  },\n  price: pricingData[Gemini2_5FlashPreview0417Literal],\n});\n\nconst Gemini2_5FlashPreview0417Options = BaseChatModelOptions;\ntype Gemini2_5FlashPreview0417OptionsType = z.infer<typeof Gemini2_5FlashPreview0417Options>;\n\nclass Gemini2_5FlashPreview0417 extends BaseChatModel {\n  constructor(options: Gemini2_5FlashPreview0417OptionsType) {\n    super(Gemini2_5FlashPreview0417Schema, options);\n  }\n}\n\nexport {\n  Gemini2_5FlashPreview0417,\n  Gemini2_5FlashPreview0417Literal,\n  Gemini2_5FlashPreview0417Options,\n  Gemini2_5FlashPreview0417Schema,\n  type Gemini2_5FlashPreview0417OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini2_5ProPreview0325Literal = \"gemini-2.5-pro-preview-03-25\";\nconst Gemini2_5ProPreview0325Description =\n  \"Google's preview model in Gemini 2.5 family for enhanced thinking, reasoning, multimodal understanding, and advanced coding.\";\n\nconst Gemini2_5ProPreview0325Schema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini2_5ProPreview0325Literal,\n  description: Gemini2_5ProPreview0325Description,\n  maxInputTokens: 1048576,\n  maxOutputTokens: 65536,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.reasoning(2.0, 1.0, 65536, 4, 0.95, 64).def,\n    schema: GoogleChatModelConfigs.reasoning(2.0, 1.0, 65536, 4, 0.95, 64).schema,\n  },\n  price: pricingData[Gemini2_5ProPreview0325Literal],\n});\n\nconst Gemini2_5ProPreview0325Options = BaseChatModelOptions;\ntype Gemini2_5ProPreview0325OptionsType = z.infer<typeof Gemini2_5ProPreview0325Options>;\n\nclass Gemini2_5ProPreview0325 extends BaseChatModel {\n  constructor(options: Gemini2_5ProPreview0325OptionsType) {\n    super(Gemini2_5ProPreview0325Schema, options);\n  }\n}\n\nexport {\n  Gemini2_5ProPreview0325,\n  Gemini2_5ProPreview0325Literal,\n  Gemini2_5ProPreview0325Options,\n  Gemini2_5ProPreview0325Schema,\n  type Gemini2_5ProPreview0325OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { BaseChatModelGemini1 } from \"./base-gemini-1-chat-model.google\";\nimport {\n  GoogleChatModelRoles,\n  GoogleChatModelRolesMap,\n  GoogleChatModelTextVisionModalities,\n  GoogleChatModelTextVisionModalitiesEnum,\n} from \"./types\";\n\nconst GeminiProVisionLiteral = \"gemini-pro-vision\";\nconst GeminiProVisionDescription = \"An image understanding model to handle a broad range of applications\";\n\nconst GeminiProVisionSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelTextVisionModalitiesEnum).parse({\n  name: GeminiProVisionLiteral,\n  description: GeminiProVisionDescription,\n  maxInputTokens: 12288,\n  maxOutputTokens: 4096,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelTextVisionModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(1.0, 0.4, 4096, 4, 1.0, 32).def,\n    schema: GoogleChatModelConfigs.c1(1.0, 0.4, 4096, 4, 1.0, 32).schema,\n  },\n  price: pricingData[GeminiProVisionLiteral],\n});\n\nconst GeminiProVisionOptions = BaseChatModelOptions;\ntype GeminiProVisionOptionsType = z.infer<typeof GeminiProVisionOptions>;\n\nclass GeminiProVision extends BaseChatModelGemini1 {\n  constructor(options: GeminiProVisionOptionsType) {\n    super(GeminiProVisionSchema, options);\n  }\n}\n\nexport { GeminiProVision, GeminiProVisionLiteral, GeminiProVisionOptions, GeminiProVisionSchema, type GeminiProVisionOptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { BaseChatModelGemini1 } from \"./base-gemini-1-chat-model.google\";\nimport {\n  GoogleChatModelRoles,\n  GoogleChatModelRolesMap,\n  GoogleChatModelTextToolModalities,\n  GoogleChatModelTextToolModalitiesEnum,\n} from \"./types\";\n\nconst GeminiProLiteral = \"gemini-pro\";\nconst GeminiProDescription =\n  \"A model for scaling across a wide range of tasks \\\n  Optimized for natural language tasks, multi-turn text and code chat, and code generation\";\n\nconst GeminiProSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelTextToolModalitiesEnum).parse({\n  name: GeminiProLiteral,\n  description: GeminiProDescription,\n  maxInputTokens: 30720,\n  maxOutputTokens: 2048,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelTextToolModalities,\n  config: {\n    def: GoogleChatModelConfigs.base(1.0, 0.9, 2048, 4, 1.0).def,\n    schema: GoogleChatModelConfigs.base(1.0, 0.9, 2048, 4, 1.0).schema,\n  },\n  price: pricingData[GeminiProLiteral],\n});\n\nconst GeminiProOptions = BaseChatModelOptions;\ntype GeminiProOptionsType = z.infer<typeof GeminiProOptions>;\n\nclass GeminiPro extends BaseChatModelGemini1 {\n  constructor(options: GeminiProOptionsType) {\n    super(GeminiProSchema, options);\n  }\n}\n\nexport { GeminiPro, GeminiProLiteral, GeminiProOptions, GeminiProSchema, type GeminiProOptionsType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchemaType } from \"@adaline/provider\";\nimport { EmbeddingTextModalityLiteral } from \"@adaline/types\";\n\nconst GoogleEmbeddingModelModalities: EmbeddingModelSchemaType[\"modalities\"] = [EmbeddingTextModalityLiteral];\n\nconst GoogleEmbeddingModelModalitiesEnum = z.enum([EmbeddingTextModalityLiteral]);\n\nexport { GoogleEmbeddingModelModalitiesEnum, GoogleEmbeddingModelModalities };\n","import { z } from \"zod\";\n\nconst GoogleGetEmbeddingsResponse = z.object({\n  embeddings: z.array(\n    z.object({\n      values: z.array(z.number()),\n    })\n  ),\n});\ntype GoogleGetEmbeddingsResponseType = z.infer<typeof GoogleGetEmbeddingsResponse>;\n\nexport { GoogleGetEmbeddingsResponse, type GoogleGetEmbeddingsResponseType };\n","import { z } from \"zod\";\n\nconst GoogleEmbeddingRequestInput = z.object({\n  model: z.string().min(1),\n  content: z.object({\n    parts: z\n      .array(\n        z.object({\n          text: z.string().min(1),\n        })\n      )\n      .min(1),\n  }),\n});\ntype GoogleEmbeddingRequestInputType = z.infer<typeof GoogleEmbeddingRequestInput>;\n\nconst GoogleEmbeddingRequest = z.object({\n  model: z.string().min(1).optional(),\n  requests: z.array(GoogleEmbeddingRequestInput).min(1),\n  outputDimensionality: z.number().int().min(1).optional(),\n});\ntype GoogleEmbeddingRequestType = z.infer<typeof GoogleEmbeddingRequest>;\n\nexport { GoogleEmbeddingRequest, GoogleEmbeddingRequestInput, type GoogleEmbeddingRequestType, type GoogleEmbeddingRequestInputType };\n","import { z } from \"zod\";\n\nimport {\n  EmbeddingModelSchemaType,\n  EmbeddingModelV1,\n  HeadersType,\n  InvalidConfigError,\n  InvalidEmbeddingRequestsError,\n  InvalidModelRequestError,\n  ModelResponseError,\n  ParamsType,\n  removeUndefinedEntries,\n  UrlType,\n  urlWithoutTrailingSlash,\n} from \"@adaline/provider\";\nimport {\n  Config,\n  ConfigType,\n  EmbeddingRequests,\n  EmbeddingRequestsType,\n  EmbeddingResponseType,\n  EmbeddingTextModalityLiteral,\n  FloatEmbeddingLiteral,\n  FloatEmbeddingType,\n} from \"@adaline/types\";\n\nimport { Google } from \"../../provider/provider.google\";\nimport { GoogleEmbeddingRequest, GoogleEmbeddingRequestInputType, GoogleGetEmbeddingsResponse } from \"./types\";\n\nconst BaseEmbeddingModelOptions = z.object({\n  modelName: z.string(),\n  apiKey: z.string(),\n  baseUrl: z.string().url().optional(),\n  getEmbeddingsUrl: z.string().url().optional(),\n});\ntype BaseEmbeddingModelOptionsType = z.infer<typeof BaseEmbeddingModelOptions>;\n\nclass BaseEmbeddingModel implements EmbeddingModelV1<EmbeddingModelSchemaType> {\n  readonly version = \"v1\" as const;\n  modelSchema: EmbeddingModelSchemaType;\n  readonly modelName: string;\n\n  private readonly apiKey: string;\n  private readonly baseUrl: string;\n  private readonly getEmbeddingsUrl: string;\n\n  constructor(modelSchema: EmbeddingModelSchemaType, options: BaseEmbeddingModelOptionsType) {\n    const parsedOptions = BaseEmbeddingModelOptions.parse(options);\n    this.modelSchema = modelSchema;\n    this.modelName = parsedOptions.modelName;\n    this.apiKey = parsedOptions.apiKey;\n    this.baseUrl = urlWithoutTrailingSlash(parsedOptions.baseUrl || Google.baseUrl);\n    this.getEmbeddingsUrl = urlWithoutTrailingSlash(\n      parsedOptions.getEmbeddingsUrl || `${this.baseUrl}/models/${this.modelName}:batchEmbedContents?key=${this.apiKey}`\n    );\n  }\n\n  getDefaultBaseUrl(): UrlType {\n    return this.baseUrl;\n  }\n\n  getDefaultHeaders(): HeadersType {\n    return {\n      \"Content-Type\": \"application/json\",\n    };\n  }\n\n  getDefaultParams(): ParamsType {\n    return {\n      model: this.modelName,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getRetryDelay(responseHeaders: HeadersType): { shouldRetry: boolean; delayMs: number } {\n    return { shouldRetry: false, delayMs: 0 };\n  }\n\n  // TODO: unused method, not tested\n  getTokenCount(requests: EmbeddingRequestsType): number {\n    return requests.requests.reduce((acc, request) => acc + request.length, 0);\n  }\n\n  transformModelRequest(request: any): {\n    modelName: string | undefined;\n    config: ConfigType;\n    embeddingRequests: EmbeddingRequestsType;\n  } {\n    const safeRequest = GoogleEmbeddingRequest.safeParse(request);\n    if (!safeRequest.success) {\n      throw new InvalidModelRequestError({ info: \"Invalid model request\", cause: safeRequest.error });\n    }\n\n    const parsedRequest = safeRequest.data;\n\n    const modelName = parsedRequest.model;\n\n    const _config = {\n      outputDimensionality: parsedRequest.outputDimensionality,\n    };\n    const config = Config().parse(removeUndefinedEntries(_config));\n\n    const embeddingRequests: EmbeddingRequestsType = {\n      modality: EmbeddingTextModalityLiteral,\n      requests: parsedRequest.requests.reduce((acc, request) => {\n        acc.push(...request.content.parts.map((p) => p.text));\n        return acc;\n      }, [] as string[]),\n    };\n\n    return {\n      modelName,\n      config,\n      embeddingRequests,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  transformConfig(config: ConfigType, requests?: EmbeddingRequestsType): ParamsType {\n    const _parsedConfig = this.modelSchema.config.schema.safeParse(config);\n    if (!_parsedConfig.success) {\n      throw new InvalidConfigError({\n        info: `Invalid config for model : '${this.modelName}'`,\n        cause: _parsedConfig.error,\n      });\n    }\n\n    const parsedConfig = _parsedConfig.data as ConfigType;\n    Object.keys(parsedConfig as ConfigType).forEach((key) => {\n      if (!this.modelSchema.config.def[key]) {\n        throw new InvalidConfigError({\n          info: `Invalid config for model : '${this.modelName}'`,\n          cause: new Error(`Invalid config key : '${key}', \n            available keys : [${Object.keys(this.modelSchema.config.def).join(\", \")}]`),\n        });\n      }\n    });\n\n    const transformedConfig = Object.keys(parsedConfig).reduce((acc, key) => {\n      const def = this.modelSchema.config.def[key];\n      const paramKey = def.param;\n      const paramValue = parsedConfig[key];\n      acc[paramKey] = paramValue;\n      return acc;\n    }, {} as ParamsType);\n\n    return transformedConfig;\n  }\n\n  transformEmbeddingRequests(requests: EmbeddingRequestsType): ParamsType {\n    const _parsedRequests = EmbeddingRequests().safeParse(requests);\n    if (!_parsedRequests.success) {\n      throw new InvalidEmbeddingRequestsError({ info: \"Invalid embedding requests\", cause: _parsedRequests.error });\n    }\n\n    if (requests.modality !== EmbeddingTextModalityLiteral) {\n      throw new InvalidEmbeddingRequestsError({\n        info: `Invalid embedding requests for model : '${this.modelName}'`,\n        cause: new Error(`Only '${EmbeddingTextModalityLiteral}' modality is supported for model : '${this.modelName}'`),\n      });\n    }\n\n    const _requests: GoogleEmbeddingRequestInputType[] = _parsedRequests.data.requests.map((request) => {\n      return {\n        model: `models/${this.modelName}`,\n        content: { parts: [{ text: request as string }] },\n      };\n    });\n\n    return {\n      requests: _requests,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getGetEmbeddingsUrl(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.getEmbeddingsUrl);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getGetEmbeddingsHeaders(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<HeadersType> {\n    return new Promise((resolve) => {\n      resolve(this.getDefaultHeaders());\n    });\n  }\n\n  async getGetEmbeddingsData(config: ConfigType, requests: EmbeddingRequestsType): Promise<ParamsType> {\n    return new Promise((resolve) => {\n      const _config = this.transformConfig(config);\n      const _requests = this.transformEmbeddingRequests(requests);\n\n      if (requests.requests.length === 0) {\n        throw new InvalidEmbeddingRequestsError({\n          info: `Invalid embedding requests for model : '${this.modelName}'`,\n          cause: new Error(\"requests cannot be empty\"),\n        });\n      }\n\n      if (_config.outputDimensionality) {\n        (_requests as any).requests.forEach((request: any) => {\n          request.outputDimensionality = _config.outputDimensionality;\n        });\n        delete _config.outputDimensionality;\n      }\n\n      resolve({\n        ...this.getDefaultParams(),\n        ..._config,\n        ..._requests,\n      });\n    });\n  }\n\n  transformGetEmbeddingsResponse(response: any): EmbeddingResponseType {\n    const safe = GoogleGetEmbeddingsResponse.safeParse(response);\n    if (safe.success) {\n      const parsedResponse = safe.data;\n      const embeddings = parsedResponse.embeddings.map((embedding, index) => {\n        return {\n          index,\n          embedding: embedding.values,\n        } as FloatEmbeddingType;\n      });\n\n      return {\n        encodingFormat: FloatEmbeddingLiteral,\n        embeddings: embeddings,\n      } as EmbeddingResponseType;\n    }\n\n    throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n  }\n}\n\nexport { BaseEmbeddingModel, BaseEmbeddingModelOptions, type BaseEmbeddingModelOptionsType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { GoogleEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.google\";\nimport { GoogleEmbeddingModelModalities, GoogleEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst Text_Embedding_001Literal = \"text-embedding-001\";\nconst Text_Embedding_001_Description = \"text-embedding-001\";\n\nconst Text_Embedding_001Schema = EmbeddingModelSchema(GoogleEmbeddingModelModalitiesEnum).parse({\n  name: Text_Embedding_001Literal,\n  description: Text_Embedding_001_Description,\n  modalities: GoogleEmbeddingModelModalities,\n  maxInputTokens: 2048,\n  maxOutputTokens: 768,\n  config: {\n    def: GoogleEmbeddingModelConfigs.base(768).def,\n    schema: GoogleEmbeddingModelConfigs.base(768).schema,\n  },\n});\n\nconst Text_Embedding_001Options = BaseEmbeddingModelOptions;\ntype Text_Embedding_001OptionsType = z.infer<typeof Text_Embedding_001Options>;\n\nclass Text_Embedding_001 extends BaseEmbeddingModel {\n  constructor(options: Text_Embedding_001OptionsType) {\n    super(Text_Embedding_001Schema, options);\n  }\n}\n\nexport {\n  Text_Embedding_001,\n  Text_Embedding_001Options,\n  Text_Embedding_001Schema,\n  Text_Embedding_001Literal,\n  type Text_Embedding_001OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { GoogleEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.google\";\nimport { GoogleEmbeddingModelModalities, GoogleEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst Text_Embedding_004Literal = \"text-embedding-004\";\nconst Text_Embedding_004_Description = \"text-embedding-004\";\n\nconst Text_Embedding_004Schema = EmbeddingModelSchema(GoogleEmbeddingModelModalitiesEnum).parse({\n  name: Text_Embedding_004Literal,\n  description: Text_Embedding_004_Description,\n  modalities: GoogleEmbeddingModelModalities,\n  maxInputTokens: 2048,\n  maxOutputTokens: 768,\n  config: {\n    def: GoogleEmbeddingModelConfigs.base(768).def,\n    schema: GoogleEmbeddingModelConfigs.base(768).schema,\n  },\n});\n\nconst Text_Embedding_004Options = BaseEmbeddingModelOptions;\ntype Text_Embedding_004OptionsType = z.infer<typeof Text_Embedding_004Options>;\n\nclass Text_Embedding_004 extends BaseEmbeddingModel {\n  constructor(options: Text_Embedding_004OptionsType) {\n    super(Text_Embedding_004Schema, options);\n  }\n}\n\nexport {\n  Text_Embedding_004,\n  Text_Embedding_004Options,\n  Text_Embedding_004Schema,\n  Text_Embedding_004Literal,\n  type Text_Embedding_004OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchemaType, ChatModelV1, EmbeddingModelSchemaType, EmbeddingModelV1, ProviderError, ProviderV1 } from \"@adaline/provider\";\n\nimport * as Models from \"../models\";\n\nconst ProviderLiteral = \"vertex\";\nclass Vertex<C extends Models.BaseChatModelOptionsType, E extends Models.BaseEmbeddingModelOptionsType> implements ProviderV1<C, E> {\n  readonly version = \"v1\" as const;\n  readonly name = ProviderLiteral;\n\n  static readonly baseUrl = (location: string, projectId: string, publisher: string = \"google\") =>\n    `https://${location}-aiplatform.googleapis.com/v1/projects/${projectId}/locations/${location}/publishers/${publisher}`;\n\n  private readonly chatModelFactories: Record<\n    string,\n    {\n      model: { new (options: any): ChatModelV1 };\n      modelOptions: z.ZodType<any>;\n      modelSchema: ChatModelSchemaType;\n    }\n  > = {\n    [Models.Gemini1_5Flash001Literal]: {\n      model: Models.Gemini1_5Flash001,\n      modelOptions: Models.Gemini1_5Flash001Options,\n      modelSchema: Models.Gemini1_5Flash001Schema,\n    },\n    [Models.Gemini1_5Flash002Literal]: {\n      model: Models.Gemini1_5Flash002,\n      modelOptions: Models.Gemini1_5Flash002Options,\n      modelSchema: Models.Gemini1_5Flash002Schema,\n    },\n    [Models.Gemini1_5FlashLiteral]: {\n      model: Models.Gemini1_5Flash,\n      modelOptions: Models.Gemini1_5FlashOptions,\n      modelSchema: Models.Gemini1_5FlashSchema,\n    },\n    [Models.Gemini1_5Pro001Literal]: {\n      model: Models.Gemini1_5Pro001,\n      modelOptions: Models.Gemini1_5Pro001Options,\n      modelSchema: Models.Gemini1_5Pro001Schema,\n    },\n    [Models.Gemini1_5Pro002Literal]: {\n      model: Models.Gemini1_5Pro002,\n      modelOptions: Models.Gemini1_5Pro002Options,\n      modelSchema: Models.Gemini1_5Pro002Schema,\n    },\n    [Models.Gemini1_5ProLiteral]: {\n      model: Models.Gemini1_5Pro,\n      modelOptions: Models.Gemini1_5ProOptions,\n      modelSchema: Models.Gemini1_5ProSchema,\n    },\n    [Models.Gemini1_0ProLiteral]: {\n      model: Models.Gemini1_0Pro,\n      modelOptions: Models.Gemini1_0ProOptions,\n      modelSchema: Models.Gemini1_0ProSchema,\n    },\n    [Models.Gemini1_0ProVisionLiteral]: {\n      model: Models.Gemini1_0ProVision,\n      modelOptions: Models.Gemini1_0ProVisionOptions,\n      modelSchema: Models.Gemini1_0ProVisionSchema,\n    },\n    [Models.Gemini1_0Pro001Literal]: {\n      model: Models.Gemini1_0Pro001,\n      modelOptions: Models.Gemini1_0Pro001Options,\n      modelSchema: Models.Gemini1_0Pro001Schema,\n    },\n    [Models.Gemini2_0FlashExpLiteral]: {\n      model: Models.Gemini2_0FlashExp,\n      modelOptions: Models.Gemini2_0FlashExpOptions,\n      modelSchema: Models.Gemini2_0FlashExpSchema,\n    },\n  };\n\n  private readonly embeddingModelFactories: Record<\n    string,\n    {\n      model: { new (options: any): EmbeddingModelV1 };\n      modelOptions: z.ZodType<any>;\n      modelSchema: EmbeddingModelSchemaType;\n    }\n  > = {\n    [Models.Text_Embedding_004Literal]: {\n      model: Models.Text_Embedding_004,\n      modelOptions: Models.Text_Embedding_004Options,\n      modelSchema: Models.Text_Embedding_004Schema,\n    },\n    [Models.Text_Multilingual_Embedding_002Literal]: {\n      model: Models.Text_Multilingual_Embedding_002,\n      modelOptions: Models.Text_Multilingual_Embedding_002Options,\n      modelSchema: Models.Text_Multilingual_Embedding_002Schema,\n    },\n    [Models.Text_Embedding_Gecko_003Literal]: {\n      model: Models.Text_Embedding_Gecko_003,\n      modelOptions: Models.Text_Embedding_Gecko_003Options,\n      modelSchema: Models.Text_Embedding_Gecko_003Schema,\n    },\n    [Models.Text_Embedding_Gecko_Multilingual_001Literal]: {\n      model: Models.Text_Embedding_Gecko_Multilingual_001,\n      modelOptions: Models.Text_Embedding_Gecko_Multilingual_001Options,\n      modelSchema: Models.Text_Embedding_Gecko_Multilingual_001Schema,\n    },\n  };\n\n  chatModelLiterals(): string[] {\n    return Object.keys(this.chatModelFactories);\n  }\n\n  chatModelSchemas(): Record<string, ChatModelSchemaType> {\n    return Object.keys(this.chatModelFactories).reduce(\n      (acc, key) => {\n        acc[key] = this.chatModelFactories[key].modelSchema;\n        return acc;\n      },\n      {} as Record<string, ChatModelSchemaType>\n    );\n  }\n\n  chatModel(options: C): ChatModelV1 {\n    const modelName = options.modelName;\n    if (!(modelName in this.chatModelFactories)) {\n      throw new ProviderError({\n        info: `Vertex chat model: ${modelName} not found`,\n        cause: new Error(`Vertex chat model: ${modelName} not found, available chat models: \n          ${this.chatModelLiterals().join(\", \")}`),\n      });\n    }\n\n    const model = this.chatModelFactories[modelName].model;\n    const parsedOptions = this.chatModelFactories[modelName].modelOptions.parse(options);\n    return new model(parsedOptions);\n  }\n\n  embeddingModelLiterals(): string[] {\n    return Object.keys(this.embeddingModelFactories);\n  }\n\n  embeddingModelSchemas(): Record<string, EmbeddingModelSchemaType> {\n    return Object.keys(this.embeddingModelFactories).reduce(\n      (acc, key) => {\n        acc[key] = this.embeddingModelFactories[key].modelSchema;\n        return acc;\n      },\n      {} as Record<string, EmbeddingModelSchemaType>\n    );\n  }\n\n  embeddingModel(options: E): EmbeddingModelV1 {\n    const modelName = options.modelName;\n    if (!(modelName in this.embeddingModelFactories)) {\n      throw new ProviderError({\n        info: `Vertex embedding model: ${modelName} not found`,\n        cause: new Error(`Vertex embedding model: ${modelName} not found, available embedding models: \n          ${this.embeddingModelLiterals().join(\", \")}`),\n      });\n    }\n\n    const model = this.embeddingModelFactories[modelName].model;\n    const parsedOptions = this.embeddingModelFactories[modelName].modelOptions.parse(options);\n    return new model(parsedOptions);\n  }\n}\n\nexport { Vertex };\n","{\n  \"gemini-1.0-pro-001\": {\n    \"modelName\": \"gemini-1.0-pro-001\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.5,\n            \"outputPricePerMillion\": 1.5\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.0-pro-vision\": {\n    \"modelName\": \"gemini-1.0-pro-vision\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.5,\n            \"outputPricePerMillion\": 1.5\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.0-pro\": {\n    \"modelName\": \"gemini-1.0-pro\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.5,\n            \"outputPricePerMillion\": 1.5\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.5-flash-001\": {\n    \"modelName\": \"gemini-1.5-flash-001\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": 128000,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.075,\n            \"outputPricePerMillion\": 0.3\n          }\n        }\n      },\n      {\n        \"minTokens\": 128001,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.15,\n            \"outputPricePerMillion\": 0.6\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.5-flash-002\": {\n    \"modelName\": \"gemini-1.5-flash-002\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": 128000,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.0375,\n            \"outputPricePerMillion\": 0.15\n          }\n        }\n      },\n      {\n        \"minTokens\": 128001,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.075,\n            \"outputPricePerMillion\": 0.3\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.5-flash\": {\n    \"modelName\": \"gemini-1.5-flash\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": 128000,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.075,\n            \"outputPricePerMillion\": 0.3\n          }\n        }\n      },\n      {\n        \"minTokens\": 128001,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.15,\n            \"outputPricePerMillion\": 0.6\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.5-pro-001\": {\n    \"modelName\": \"gemini-1.5-pro-001\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": 128000,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 1.25,\n            \"outputPricePerMillion\": 5\n          }\n        }\n      },\n      {\n        \"minTokens\": 128001,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 2.5,\n            \"outputPricePerMillion\": 10\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.5-pro-002\": {\n    \"modelName\": \"gemini-1.5-pro-002\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": 128000,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 1.25,\n            \"outputPricePerMillion\": 5\n          }\n        }\n      },\n      {\n        \"minTokens\": 128001,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 2.5,\n            \"outputPricePerMillion\": 10\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-1.5-pro\": {\n    \"modelName\": \"gemini-1.5-pro\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": 128000,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 1.25,\n            \"outputPricePerMillion\": 5\n          }\n        }\n      },\n      {\n        \"minTokens\": 128001,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 2.5,\n            \"outputPricePerMillion\": 10\n          }\n        }\n      }\n    ]\n  },\n  \"gemini-2.0-flash-exp\": {\n    \"modelName\": \"gemini-2.0-flash-exp\",\n    \"currency\": \"USD\",\n    \"tokenRanges\": [\n      {\n        \"minTokens\": 0,\n        \"maxTokens\": null,\n        \"prices\": {\n          \"base\": {\n            \"inputPricePerMillion\": 0.15,\n            \"outputPricePerMillion\": 0.6\n          }\n        }\n      }\n    ]\n  }\n}\n","import { z } from \"zod\";\n\nimport { Gemini1_0Pro_001Schema as Google_Gemini1_0Pro_001Schema } from \"@adaline/google\";\n\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions, BaseChatModelVertex } from \"./base-chat-model.vertex\";\n\nconst Gemini1_0Pro001Literal = \"gemini-1.0-pro-001\" as const;\n\n// Override the schema\nconst Gemini1_0Pro001Schema = {\n  ...Google_Gemini1_0Pro_001Schema,\n  price: pricingData[Gemini1_0Pro001Literal],\n} as const;\n\nconst Gemini1_0Pro001Options = BaseChatModelOptions;\ntype Gemini1_0Pro001OptionsType = z.infer<typeof Gemini1_0Pro001Options>;\n\nclass Gemini1_0Pro001 extends BaseChatModelVertex {\n  constructor(options: Gemini1_0Pro001OptionsType) {\n    super(Gemini1_0Pro001Schema, options);\n  }\n}\n\nexport { Gemini1_0Pro001, Gemini1_0Pro001Literal, Gemini1_0Pro001Options, Gemini1_0Pro001Schema, type Gemini1_0Pro001OptionsType };\n","import { z } from \"zod\";\n\nimport { Gemini1_0ProVisionSchema as Google_Gemini1_0ProVisionSchema } from \"@adaline/google\";\n\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions, BaseChatModelVertex } from \"./base-chat-model.vertex\";\n\nconst Gemini1_0ProVisionLiteral = \"gemini-1.0-pro-vision\" as const;\nconst Gemini1_0ProVisionSchema = {\n  ...Google_Gemini1_0ProVisionSchema,\n  price: pricingData[Gemini1_0ProVisionLiteral],\n};\nconst Gemini1_0ProVisionOptions = BaseChatModelOptions;\ntype Gemini1_0ProVisionOptionsType = z.infer<typeof Gemini1_0ProVisionOptions>;\n\nclass Gemini1_0ProVision extends BaseChatModelVertex {\n  constructor(options: Gemini1_0ProVisionOptionsType) {\n    super(Gemini1_0ProVisionSchema, options);\n  }\n}\n\nexport {\n  Gemini1_0ProVision,\n  Gemini1_0ProVisionLiteral,\n  Gemini1_0ProVisionOptions,\n  Gemini1_0ProVisionSchema,\n  type Gemini1_0ProVisionOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { Gemini1_0ProSchema as Google_Gemini1_0ProSchema } from \"@adaline/google\";\n\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions, BaseChatModelVertex } from \"./base-chat-model.vertex\";\n\nconst Gemini1_0ProLiteral = \"gemini-1.0-pro\" as const;\n\n// Override the schema\nconst Gemini1_0ProSchema = {\n  ...Google_Gemini1_0ProSchema,\n  price: pricingData[Gemini1_0ProLiteral],\n} as const;\n\nconst Gemini1_0ProOptions = BaseChatModelOptions;\ntype Gemini1_0ProOptionsType = z.infer<typeof Gemini1_0ProOptions>;\n\nclass Gemini1_0Pro extends BaseChatModelVertex {\n  constructor(options: Gemini1_0ProOptionsType) {\n    super(Gemini1_0ProSchema, options);\n  }\n}\n\nexport { Gemini1_0Pro, Gemini1_0ProLiteral, Gemini1_0ProOptions, Gemini1_0ProSchema, type Gemini1_0ProOptionsType };\n","import { z } from \"zod\";\n\nimport { Gemini1_5Flash001Schema as Google_Gemini1_5Flash001Schema } from \"@adaline/google\";\n\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions, BaseChatModelVertex } from \"./base-chat-model.vertex\";\n\nconst Gemini1_5Flash001Literal = \"gemini-1.5-flash-001\" as const;\nconst Gemini1_5Flash001Schema = {\n  ...Google_Gemini1_5Flash001Schema,\n  price: pricingData[Gemini1_5Flash001Literal],\n} as const;\nconst Gemini1_5Flash001Options = BaseChatModelOptions;\ntype Gemini1_5Flash001OptionsType = z.infer<typeof Gemini1_5Flash001Options>;\n\nclass Gemini1_5Flash001 extends BaseChatModelVertex {\n  constructor(options: Gemini1_5Flash001OptionsType) {\n    super(Gemini1_5Flash001Schema, options);\n  }\n}\n\nexport {\n  Gemini1_5Flash001,\n  Gemini1_5Flash001Literal,\n  Gemini1_5Flash001Options,\n  Gemini1_5Flash001Schema,\n  type Gemini1_5Flash001OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { Gemini1_5Flash002Schema as Google_Gemini1_5Flash002Schema } from \"@adaline/google\";\n\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions, BaseChatModelVertex } from \"./base-chat-model.vertex\";\n\nconst Gemini1_5Flash002Literal = \"gemini-1.5-flash-002\" as const;\nconst Gemini1_5Flash002Schema = {\n  ...Google_Gemini1_5Flash002Schema,\n  price: pricingData[Gemini1_5Flash002Literal],\n};\nconst Gemini1_5Flash002Options = BaseChatModelOptions;\ntype Gemini1_5Flash002OptionsType = z.infer<typeof Gemini1_5Flash002Options>;\n\nclass Gemini1_5Flash002 extends BaseChatModelVertex {\n  constructor(options: Gemini1_5Flash002OptionsType) {\n    super(Gemini1_5Flash002Schema, options);\n  }\n}\n\nexport {\n  Gemini1_5Flash002,\n  Gemini1_5Flash002Literal,\n  Gemini1_5Flash002Options,\n  Gemini1_5Flash002Schema,\n  type Gemini1_5Flash002OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { Gemini1_5FlashSchema as Google_Gemini1_5FlashSchema } from \"@adaline/google\";\nimport { ChatModelSchemaType } from \"@adaline/provider\";\n\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions, BaseChatModelVertex } from \"./base-chat-model.vertex\";\n\nconst Gemini1_5FlashLiteral = \"gemini-1.5-flash\" as const;\n\n// Override the schema\nconst Gemini1_5FlashSchema: ChatModelSchemaType = {\n  ...Google_Gemini1_5FlashSchema,\n  price: pricingData[Gemini1_5FlashLiteral],\n};\n\nconst Gemini1_5FlashOptions = BaseChatModelOptions;\ntype Gemini1_5FlashOptionsType = z.infer<typeof Gemini1_5FlashOptions>;\n\nclass Gemini1_5Flash extends BaseChatModelVertex {\n  constructor(options: Gemini1_5FlashOptionsType) {\n    super(Gemini1_5FlashSchema, options);\n  }\n}\n\nexport { Gemini1_5Flash, Gemini1_5FlashLiteral, Gemini1_5FlashOptions, Gemini1_5FlashSchema, type Gemini1_5FlashOptionsType };\n","import { z } from \"zod\";\n\nimport { Gemini1_5Pro001Schema as Google_Gemini1_5Pro001Schema } from \"@adaline/google\";\n\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions, BaseChatModelVertex } from \"./base-chat-model.vertex\";\n\nconst Gemini1_5Pro001Literal = \"gemini-1.5-pro-001\" as const;\nconst Gemini1_5Pro001Schema = {\n  ...Google_Gemini1_5Pro001Schema,\n  price: pricingData[Gemini1_5Pro001Literal],\n} as const;\nconst Gemini1_5Pro001Options = BaseChatModelOptions;\ntype Gemini1_5Pro001OptionsType = z.infer<typeof Gemini1_5Pro001Options>;\n\nclass Gemini1_5Pro001 extends BaseChatModelVertex {\n  constructor(options: Gemini1_5Pro001OptionsType) {\n    super(Gemini1_5Pro001Schema, options);\n  }\n}\n\nexport { Gemini1_5Pro001, Gemini1_5Pro001Literal, Gemini1_5Pro001Options, Gemini1_5Pro001Schema, type Gemini1_5Pro001OptionsType };\n","import { z } from \"zod\";\n\nimport { Gemini1_5Pro002Schema as Google_Gemini1_5Pro002Schema } from \"@adaline/google\";\n\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions, BaseChatModelVertex } from \"./base-chat-model.vertex\";\n\nconst Gemini1_5Pro002Literal = \"gemini-1.5-pro-002\" as const;\n\nconst Gemini1_5Pro002Schema = {\n  ...Google_Gemini1_5Pro002Schema,\n  price: pricingData[Gemini1_5Pro002Literal],\n} as const;\nconst Gemini1_5Pro002Options = BaseChatModelOptions;\ntype Gemini1_5Pro002OptionsType = z.infer<typeof Gemini1_5Pro002Options>;\n\nclass Gemini1_5Pro002 extends BaseChatModelVertex {\n  constructor(options: Gemini1_5Pro002OptionsType) {\n    super(Gemini1_5Pro002Schema, options);\n  }\n}\n\nexport { Gemini1_5Pro002, Gemini1_5Pro002Literal, Gemini1_5Pro002Options, Gemini1_5Pro002Schema, type Gemini1_5Pro002OptionsType };\n","import { z } from \"zod\";\n\nimport { Gemini1_5ProSchema as Google_Gemini1_5ProSchema } from \"@adaline/google\";\n\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions, BaseChatModelVertex } from \"./base-chat-model.vertex\";\n\nconst Gemini1_5ProLiteral = \"gemini-1.5-pro\" as const;\nconst Gemini1_5ProSchema = {\n  ...Google_Gemini1_5ProSchema,\n  price: pricingData[Gemini1_5ProLiteral],\n} as const;\n\nconst Gemini1_5ProOptions = BaseChatModelOptions;\ntype Gemini1_5ProOptionsType = z.infer<typeof Gemini1_5ProOptions>;\n\nclass Gemini1_5Pro extends BaseChatModelVertex {\n  constructor(options: Gemini1_5ProOptionsType) {\n    super(Gemini1_5ProSchema, options);\n  }\n}\n\nexport { Gemini1_5Pro, Gemini1_5ProLiteral, Gemini1_5ProOptions, Gemini1_5ProSchema, type Gemini1_5ProOptionsType };\n","import { z } from \"zod\";\n\nimport { Gemini2_0FlashExpSchema as Google_Gemini2_0FlashExpSchema } from \"@adaline/google\";\n\nimport pricingData from \"../pricing.json\";\nimport { BaseChatModelOptions, BaseChatModelVertex } from \"./base-chat-model.vertex\";\n\nconst Gemini2_0FlashExpLiteral = \"gemini-2.0-flash-exp\" as const;\n\nconst Gemini2_0FlashExpSchema = {\n  ...Google_Gemini2_0FlashExpSchema,\n  price: pricingData[Gemini2_0FlashExpLiteral],\n} as const;\nconst Gemini2_0FlashExpOptions = BaseChatModelOptions;\ntype Gemini2_0FlashExpOptionsType = z.infer<typeof Gemini2_0FlashExpOptions>;\n\nclass Gemini2_0FlashExp extends BaseChatModelVertex {\n  constructor(options: Gemini2_0FlashExpOptionsType) {\n    super(Gemini2_0FlashExpSchema, options);\n  }\n}\n\nexport {\n  Gemini2_0FlashExp,\n  Gemini2_0FlashExpLiteral,\n  Gemini2_0FlashExpOptions,\n  Gemini2_0FlashExpSchema,\n  type Gemini2_0FlashExpOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchemaType } from \"@adaline/provider\";\nimport { EmbeddingTextModalityLiteral } from \"@adaline/types\";\n\nconst VertexEmbeddingModelModalities: EmbeddingModelSchemaType[\"modalities\"] = [EmbeddingTextModalityLiteral];\n\nconst VertexEmbeddingModelModalitiesEnum = z.enum([EmbeddingTextModalityLiteral]);\n\nexport { VertexEmbeddingModelModalitiesEnum, VertexEmbeddingModelModalities };\n","import { z } from \"zod\";\n\nconst VertexGetEmbeddingsResponse = z.object({\n  predictions: z.array(\n    z.object({\n      embeddings: z.object({\n        values: z.array(z.number()),\n        statistics: z.object({\n          token_count: z.number(),\n          truncated: z.boolean(),\n        }),\n      }),\n    })\n  ),\n});\n\ntype VertexGetEmbeddingsResponseType = z.infer<typeof VertexGetEmbeddingsResponse>;\n\nexport { VertexGetEmbeddingsResponse, type VertexGetEmbeddingsResponseType };\n","import { z } from \"zod\";\n\nconst VertexEmbeddingRequest = z.object({\n  model: z.string().min(1).optional(),\n  instances: z\n    .array(\n      z.object({\n        content: z.string().min(1),\n      })\n    )\n    .min(1),\n  parameters: z\n    .object({\n      auto_truncate: z.boolean().optional(),\n      output_dimensionality: z.number().int().min(1).optional(),\n      autoTruncate: z.boolean().optional(),\n      outputDimensionality: z.number().int().min(1).optional(),\n    })\n    .optional(),\n});\n\ntype VertexEmbeddingRequestType = z.infer<typeof VertexEmbeddingRequest>;\n\nexport { VertexEmbeddingRequest, type VertexEmbeddingRequestType };\n","import { z } from \"zod\";\n\nimport {\n  EmbeddingModelSchemaType,\n  EmbeddingModelV1,\n  HeadersType,\n  InvalidConfigError,\n  InvalidEmbeddingRequestsError,\n  InvalidModelRequestError,\n  ModelError,\n  ModelResponseError,\n  ParamsType,\n  removeUndefinedEntries,\n  UrlType,\n} from \"@adaline/provider\";\nimport {\n  Config,\n  ConfigType,\n  EmbeddingRequests,\n  EmbeddingRequestsType,\n  EmbeddingResponseType,\n  EmbeddingTextModalityLiteral,\n  FloatEmbeddingLiteral,\n  FloatEmbeddingType,\n} from \"@adaline/types\";\n\nimport { Vertex } from \"../../provider/provider.vertex\";\nimport { VertexEmbeddingRequest, VertexGetEmbeddingsResponse } from \"./types\";\n\nconst BaseEmbeddingModelOptions = z.object({\n  accessToken: z.string(),\n  modelName: z.string(),\n  baseUrl: z.string().url().optional(),\n  location: z.string().optional(),\n  projectId: z.string().optional(),\n  publisher: z.string().optional(),\n});\ntype BaseEmbeddingModelOptionsType = z.infer<typeof BaseEmbeddingModelOptions>;\n\nclass BaseEmbeddingModel implements EmbeddingModelV1<EmbeddingModelSchemaType> {\n  readonly version = \"v1\" as const;\n  modelSchema: EmbeddingModelSchemaType;\n  modelName: string;\n\n  private readonly accessToken: string;\n  private readonly baseUrl: string;\n  private readonly getEmbeddingsUrl: string;\n  private readonly location: string | undefined;\n  private readonly projectId: string | undefined;\n  private readonly publisher: string | undefined;\n\n  constructor(modelSchema: EmbeddingModelSchemaType, options: BaseEmbeddingModelOptionsType) {\n    const parsedOptions = BaseEmbeddingModelOptions.parse(options);\n    this.modelSchema = modelSchema;\n    this.modelName = parsedOptions.modelName;\n    this.accessToken = parsedOptions.accessToken;\n\n    let baseUrl: string | undefined;\n    if (parsedOptions.baseUrl) {\n      baseUrl = parsedOptions.baseUrl;\n    } else if (parsedOptions.location && parsedOptions.projectId) {\n      baseUrl = Vertex.baseUrl(parsedOptions.location, parsedOptions.projectId, parsedOptions.publisher);\n    } else {\n      throw new ModelError({\n        info: \"Either 'baseUrl' must be provided or 'location' and 'projectId' must be provided\",\n        cause: new Error(\"Either 'baseUrl' must be provided or 'location' and 'projectId' must be provided\"),\n      });\n    }\n\n    this.baseUrl = baseUrl;\n    this.getEmbeddingsUrl = `${this.baseUrl}/models/${parsedOptions.modelName}:predict`;\n    this.location = parsedOptions.location;\n    this.projectId = parsedOptions.projectId;\n  }\n\n  getDefaultBaseUrl(): UrlType {\n    return this.baseUrl;\n  }\n\n  getDefaultHeaders(): HeadersType {\n    return {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${this.accessToken}`,\n    };\n  }\n\n  getDefaultParams(): ParamsType {\n    return {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getRetryDelay(responseHeaders: HeadersType): { shouldRetry: boolean; delayMs: number } {\n    return { shouldRetry: false, delayMs: 0 };\n  }\n\n  getTokenCount(requests: EmbeddingRequestsType): number {\n    return requests.requests.reduce((acc, request) => acc + request.length, 0);\n  }\n\n  transformModelRequest(request: any): {\n    modelName: string | undefined;\n    config: ConfigType;\n    embeddingRequests: EmbeddingRequestsType;\n  } {\n    const safeRequest = VertexEmbeddingRequest.safeParse(request);\n    if (!safeRequest.success) {\n      throw new InvalidModelRequestError({ info: \"Invalid model request\", cause: safeRequest.error });\n    }\n\n    const parsedRequest = safeRequest.data;\n\n    const modelName = parsedRequest.model;\n\n    const _config = {\n      autoTruncate: parsedRequest.parameters?.auto_truncate || parsedRequest.parameters?.autoTruncate,\n      dimensions: parsedRequest.parameters?.output_dimensionality || parsedRequest.parameters?.outputDimensionality,\n    };\n    const config = Config().parse(removeUndefinedEntries(_config));\n\n    const embeddingRequests: EmbeddingRequestsType = {\n      modality: EmbeddingTextModalityLiteral,\n      requests: parsedRequest.instances.map((instance) => instance.content),\n    };\n\n    return {\n      modelName,\n      config,\n      embeddingRequests,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  transformConfig(config: ConfigType, requests?: EmbeddingRequestsType): ParamsType {\n    const _parsedConfig = this.modelSchema.config.schema.safeParse(config);\n    if (!_parsedConfig.success) {\n      throw new InvalidConfigError({\n        info: `Invalid config for model : '${this.modelName}'`,\n        cause: _parsedConfig.error,\n      });\n    }\n\n    const parsedConfig = _parsedConfig.data as ConfigType;\n    Object.keys(parsedConfig as ConfigType).forEach((key) => {\n      if (!this.modelSchema.config.def[key]) {\n        throw new InvalidConfigError({\n          info: `Invalid config for model : '${this.modelName}'`,\n          cause: new Error(`Invalid config key : '${key}', \n            available keys : [${Object.keys(this.modelSchema.config.def).join(\", \")}]`),\n        });\n      }\n    });\n\n    const transformedConfig = Object.keys(parsedConfig).reduce((acc, key) => {\n      const def = this.modelSchema.config.def[key];\n      const paramKey = def.param;\n      const paramValue = parsedConfig[key];\n      acc[paramKey] = paramValue;\n      return acc;\n    }, {} as ParamsType);\n\n    return {\n      parameters: transformedConfig,\n    };\n  }\n\n  transformEmbeddingRequests(requests: EmbeddingRequestsType): ParamsType {\n    const _parsedRequests = EmbeddingRequests().safeParse(requests);\n    if (!_parsedRequests.success) {\n      throw new InvalidEmbeddingRequestsError({ info: \"Invalid embedding requests\", cause: _parsedRequests.error });\n    }\n\n    if (requests.modality !== EmbeddingTextModalityLiteral) {\n      throw new InvalidEmbeddingRequestsError({\n        info: `Invalid embedding requests for model : '${this.modelName}'`,\n        cause: new Error(`Only '${EmbeddingTextModalityLiteral}' modality is supported for model : '${this.modelName}'`),\n      });\n    }\n\n    const instances = _parsedRequests.data.requests.map((request) => {\n      return {\n        content: request as string,\n      };\n    });\n\n    return {\n      instances,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getGetEmbeddingsUrl(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.getEmbeddingsUrl);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getGetEmbeddingsHeaders(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<HeadersType> {\n    return new Promise((resolve) => {\n      resolve(this.getDefaultHeaders());\n    });\n  }\n\n  async getGetEmbeddingsData(config: ConfigType, requests: EmbeddingRequestsType): Promise<ParamsType> {\n    return new Promise((resolve) => {\n      if (requests.requests.length === 0) {\n        throw new InvalidEmbeddingRequestsError({\n          info: `Invalid embedding requests for model : '${this.modelName}'`,\n          cause: new Error(\"requests cannot be empty\"),\n        });\n      }\n\n      resolve({\n        ...this.getDefaultParams(),\n        ...this.transformConfig(config),\n        ...this.transformEmbeddingRequests(requests),\n      });\n    });\n  }\n\n  transformGetEmbeddingsResponse(response: any): EmbeddingResponseType {\n    const safe = VertexGetEmbeddingsResponse.safeParse(response);\n    if (safe.success) {\n      const parsedResponse = safe.data;\n      const embeddings = parsedResponse.predictions.map((prediction, index) => {\n        return {\n          index,\n          embedding: prediction.embeddings.values,\n        } as FloatEmbeddingType;\n      });\n\n      return {\n        encodingFormat: FloatEmbeddingLiteral,\n        embeddings: embeddings,\n      } as EmbeddingResponseType;\n    }\n\n    throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n  }\n}\n\nexport { BaseEmbeddingModel, BaseEmbeddingModelOptions, type BaseEmbeddingModelOptionsType };\n","import { EMBEDDING_CONFIG, RangeConfigItem, SelectBooleanConfigItem } from \"@adaline/provider\";\n\nconst dimensions = (maxDimensions: number) =>\n  RangeConfigItem({\n    param: \"output_dimensionality\",\n    title: EMBEDDING_CONFIG.DIMENSIONS.title,\n    description: EMBEDDING_CONFIG.DIMENSIONS.description,\n    min: 1,\n    max: maxDimensions,\n    step: 1,\n    default: maxDimensions,\n  });\n\nconst autoTruncate = SelectBooleanConfigItem({\n  param: \"auto_truncate\",\n  title: \"Auto truncate\",\n  description:\n    \"When set to true, input text will be truncated. \\\n    When set to false, an error is returned if the input text is longer than the maximum length supported by the model.\",\n  default: true,\n});\n\nexport { dimensions, autoTruncate };\n","import { z } from \"zod\";\n\nimport { autoTruncate, dimensions } from \"./common.config.embedding-model.vertex\";\n\nconst EmbeddingModelBaseConfigSchema = (maxDimensions: number) =>\n  z.object({\n    dimensions: dimensions(maxDimensions).schema,\n    autoTruncate: autoTruncate.schema,\n  });\n\nconst EmbeddingModelBaseConfigDef = (maxDimensions: number) =>\n  ({\n    dimensions: dimensions(maxDimensions).def,\n    autoTruncate: autoTruncate.def,\n  }) as const;\n\nexport { EmbeddingModelBaseConfigDef, EmbeddingModelBaseConfigSchema };\n","import { EmbeddingModelBaseConfigDef, EmbeddingModelBaseConfigSchema } from \"./embedding-model\";\n\nconst VertexEmbeddingModelConfigs = {\n  base: (maxDimensions: number) => ({\n    def: EmbeddingModelBaseConfigDef(maxDimensions),\n    schema: EmbeddingModelBaseConfigSchema(maxDimensions),\n  }),\n} as const;\n\nexport { VertexEmbeddingModelConfigs };\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { VertexEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.vertex\";\nimport { VertexEmbeddingModelModalities, VertexEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst Text_Embedding_004Literal = \"text-embedding-004\";\nconst Text_Embedding_004_Description = \"text-embedding-004\";\n\nconst Text_Embedding_004Schema = EmbeddingModelSchema(VertexEmbeddingModelModalitiesEnum).parse({\n  name: Text_Embedding_004Literal,\n  description: Text_Embedding_004_Description,\n  modalities: VertexEmbeddingModelModalities,\n  maxInputTokens: 2048,\n  maxOutputTokens: 768,\n  config: {\n    def: VertexEmbeddingModelConfigs.base(768).def,\n    schema: VertexEmbeddingModelConfigs.base(768).schema,\n  },\n});\n\nconst Text_Embedding_004Options = BaseEmbeddingModelOptions;\ntype Text_Embedding_004OptionsType = z.infer<typeof Text_Embedding_004Options>;\n\nclass Text_Embedding_004 extends BaseEmbeddingModel {\n  constructor(options: Text_Embedding_004OptionsType) {\n    super(Text_Embedding_004Schema, options);\n  }\n}\n\nexport {\n  Text_Embedding_004,\n  Text_Embedding_004Options,\n  Text_Embedding_004Schema,\n  Text_Embedding_004Literal,\n  type Text_Embedding_004OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { VertexEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.vertex\";\nimport { VertexEmbeddingModelModalities, VertexEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst Text_Multilingual_Embedding_002Literal = \"text-multilingual-embedding-002\";\nconst Text_Multilingual_Embedding_002_Description = \"text-multilingual-embedding-002\";\n\nconst Text_Multilingual_Embedding_002Schema = EmbeddingModelSchema(VertexEmbeddingModelModalitiesEnum).parse({\n  name: Text_Multilingual_Embedding_002Literal,\n  description: Text_Multilingual_Embedding_002_Description,\n  modalities: VertexEmbeddingModelModalities,\n  maxInputTokens: 2048,\n  maxOutputTokens: 768,\n  config: {\n    def: VertexEmbeddingModelConfigs.base(768).def,\n    schema: VertexEmbeddingModelConfigs.base(768).schema,\n  },\n});\n\nconst Text_Multilingual_Embedding_002Options = BaseEmbeddingModelOptions;\ntype Text_Multilingual_Embedding_002OptionsType = z.infer<typeof Text_Multilingual_Embedding_002Options>;\n\nclass Text_Multilingual_Embedding_002 extends BaseEmbeddingModel {\n  constructor(options: Text_Multilingual_Embedding_002OptionsType) {\n    super(Text_Multilingual_Embedding_002Schema, options);\n  }\n}\n\nexport {\n  Text_Multilingual_Embedding_002,\n  Text_Multilingual_Embedding_002Options,\n  Text_Multilingual_Embedding_002Schema,\n  Text_Multilingual_Embedding_002Literal,\n  type Text_Multilingual_Embedding_002OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { VertexEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.vertex\";\nimport { VertexEmbeddingModelModalities, VertexEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst Text_Embedding_Gecko_Multilingual_001Literal = \"textembedding-gecko-multilingual@001\";\nconst Text_Embedding_Gecko_Multilingual_001_Description = \"textembedding-gecko-multilingual@001\";\n\nconst Text_Embedding_Gecko_Multilingual_001Schema = EmbeddingModelSchema(VertexEmbeddingModelModalitiesEnum).parse({\n  name: Text_Embedding_Gecko_Multilingual_001Literal,\n  description: Text_Embedding_Gecko_Multilingual_001_Description,\n  modalities: VertexEmbeddingModelModalities,\n  maxInputTokens: 2048,\n  maxOutputTokens: 768,\n  config: {\n    def: VertexEmbeddingModelConfigs.base(768).def,\n    schema: VertexEmbeddingModelConfigs.base(768).schema,\n  },\n});\n\nconst Text_Embedding_Gecko_Multilingual_001Options = BaseEmbeddingModelOptions;\ntype Text_Embedding_Gecko_Multilingual_001OptionsType = z.infer<typeof Text_Embedding_Gecko_Multilingual_001Options>;\n\nclass Text_Embedding_Gecko_Multilingual_001 extends BaseEmbeddingModel {\n  constructor(options: Text_Embedding_Gecko_Multilingual_001OptionsType) {\n    super(Text_Embedding_Gecko_Multilingual_001Schema, options);\n  }\n}\n\nexport {\n  Text_Embedding_Gecko_Multilingual_001,\n  Text_Embedding_Gecko_Multilingual_001Options,\n  Text_Embedding_Gecko_Multilingual_001Schema,\n  Text_Embedding_Gecko_Multilingual_001Literal,\n  type Text_Embedding_Gecko_Multilingual_001OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { VertexEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.vertex\";\nimport { VertexEmbeddingModelModalities, VertexEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst Text_Embedding_Gecko_003Literal = \"textembedding-gecko@003\";\nconst Text_Embedding_Gecko_003_Description = \"textembedding-gecko@003\";\n\nconst Text_Embedding_Gecko_003Schema = EmbeddingModelSchema(VertexEmbeddingModelModalitiesEnum).parse({\n  name: Text_Embedding_Gecko_003Literal,\n  description: Text_Embedding_Gecko_003_Description,\n  modalities: VertexEmbeddingModelModalities,\n  maxInputTokens: 2048,\n  maxOutputTokens: 768,\n  config: {\n    def: VertexEmbeddingModelConfigs.base(768).def,\n    schema: VertexEmbeddingModelConfigs.base(768).schema,\n  },\n});\n\nconst Text_Embedding_Gecko_003Options = BaseEmbeddingModelOptions;\ntype Text_Embedding_Gecko_003OptionsType = z.infer<typeof Text_Embedding_Gecko_003Options>;\n\nclass Text_Embedding_Gecko_003 extends BaseEmbeddingModel {\n  constructor(options: Text_Embedding_Gecko_003OptionsType) {\n    super(Text_Embedding_Gecko_003Schema, options);\n  }\n}\n\nexport {\n  Text_Embedding_Gecko_003,\n  Text_Embedding_Gecko_003Options,\n  Text_Embedding_Gecko_003Schema,\n  Text_Embedding_Gecko_003Literal,\n  type Text_Embedding_Gecko_003OptionsType,\n};\n"]}