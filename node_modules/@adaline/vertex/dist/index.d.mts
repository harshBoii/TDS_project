import { z } from 'zod';
import { BaseChatModel } from '@adaline/google';
import { ChatModelSchemaType, HeadersType, EmbeddingModelV1, EmbeddingModelSchemaType, UrlType, ParamsType, ProviderV1, ChatModelV1 } from '@adaline/provider';
import { ChatModelPriceType, EmbeddingRequestsType, ConfigType, EmbeddingResponseType } from '@adaline/types';

declare const BaseChatModelOptions: z.ZodObject<{
    accessToken: z.ZodString;
    modelName: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    publisher: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}>;
type BaseChatModelOptionsType = z.infer<typeof BaseChatModelOptions>;
declare class BaseChatModelVertex extends BaseChatModel {
    readonly version: "v1";
    modelSchema: ChatModelSchemaType;
    modelName: string;
    private readonly accessToken;
    private readonly location;
    private readonly projectId;
    private readonly publisher;
    constructor(modelSchema: ChatModelSchemaType, options: BaseChatModelOptionsType);
    getDefaultHeaders(): HeadersType;
    getModelPricing(): ChatModelPriceType;
}

declare const Gemini1_0Pro001Literal: "gemini-1.0-pro-001";
declare const Gemini1_0Pro001Schema: {
    readonly price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            maxTokens: null;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
        }[];
    };
    readonly description: string;
    readonly maxOutputTokens: number;
    readonly name: string;
    readonly roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    readonly modalities: ["text" | "tool-call" | "tool-response", ...("text" | "tool-call" | "tool-response")[]];
    readonly maxInputTokens: number;
    readonly config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    readonly maxReasoningTokens?: number | undefined;
};
declare const Gemini1_0Pro001Options: z.ZodObject<{
    accessToken: z.ZodString;
    modelName: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    publisher: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}>;
type Gemini1_0Pro001OptionsType = z.infer<typeof Gemini1_0Pro001Options>;
declare class Gemini1_0Pro001 extends BaseChatModelVertex {
    constructor(options: Gemini1_0Pro001OptionsType);
}

declare const Gemini1_0ProVisionLiteral: "gemini-1.0-pro-vision";
declare const Gemini1_0ProVisionSchema: {
    price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            maxTokens: null;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
        }[];
    };
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image", ...("text" | "image")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini1_0ProVisionOptions: z.ZodObject<{
    accessToken: z.ZodString;
    modelName: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    publisher: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}>;
type Gemini1_0ProVisionOptionsType = z.infer<typeof Gemini1_0ProVisionOptions>;
declare class Gemini1_0ProVision extends BaseChatModelVertex {
    constructor(options: Gemini1_0ProVisionOptionsType);
}

declare const Gemini1_0ProLiteral: "gemini-1.0-pro";
declare const Gemini1_0ProSchema: {
    readonly price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            maxTokens: null;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
        }[];
    };
    readonly description: string;
    readonly maxOutputTokens: number;
    readonly name: string;
    readonly roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    readonly modalities: ["text" | "tool-call" | "tool-response", ...("text" | "tool-call" | "tool-response")[]];
    readonly maxInputTokens: number;
    readonly config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    readonly maxReasoningTokens?: number | undefined;
};
declare const Gemini1_0ProOptions: z.ZodObject<{
    accessToken: z.ZodString;
    modelName: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    publisher: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}>;
type Gemini1_0ProOptionsType = z.infer<typeof Gemini1_0ProOptions>;
declare class Gemini1_0Pro extends BaseChatModelVertex {
    constructor(options: Gemini1_0ProOptionsType);
}

declare const Gemini1_5Flash001Literal: "gemini-1.5-flash-001";
declare const Gemini1_5Flash001Schema: {
    readonly price: {
        modelName: string;
        currency: string;
        tokenRanges: ({
            minTokens: number;
            maxTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
        } | {
            minTokens: number;
            maxTokens: null;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
        })[];
    };
    readonly description: string;
    readonly maxOutputTokens: number;
    readonly name: string;
    readonly roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    readonly modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    readonly maxInputTokens: number;
    readonly config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    readonly maxReasoningTokens?: number | undefined;
};
declare const Gemini1_5Flash001Options: z.ZodObject<{
    accessToken: z.ZodString;
    modelName: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    publisher: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}>;
type Gemini1_5Flash001OptionsType = z.infer<typeof Gemini1_5Flash001Options>;
declare class Gemini1_5Flash001 extends BaseChatModelVertex {
    constructor(options: Gemini1_5Flash001OptionsType);
}

declare const Gemini1_5Flash002Literal: "gemini-1.5-flash-002";
declare const Gemini1_5Flash002Schema: {
    price: {
        modelName: string;
        currency: string;
        tokenRanges: ({
            minTokens: number;
            maxTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
        } | {
            minTokens: number;
            maxTokens: null;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
        })[];
    };
    description: string;
    maxOutputTokens: number;
    name: string;
    roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    maxInputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    maxReasoningTokens?: number | undefined;
};
declare const Gemini1_5Flash002Options: z.ZodObject<{
    accessToken: z.ZodString;
    modelName: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    publisher: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}>;
type Gemini1_5Flash002OptionsType = z.infer<typeof Gemini1_5Flash002Options>;
declare class Gemini1_5Flash002 extends BaseChatModelVertex {
    constructor(options: Gemini1_5Flash002OptionsType);
}

declare const Gemini1_5FlashLiteral: "gemini-1.5-flash";
declare const Gemini1_5FlashSchema: ChatModelSchemaType;
declare const Gemini1_5FlashOptions: z.ZodObject<{
    accessToken: z.ZodString;
    modelName: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    publisher: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}>;
type Gemini1_5FlashOptionsType = z.infer<typeof Gemini1_5FlashOptions>;
declare class Gemini1_5Flash extends BaseChatModelVertex {
    constructor(options: Gemini1_5FlashOptionsType);
}

declare const Gemini1_5Pro001Literal: "gemini-1.5-pro-001";
declare const Gemini1_5Pro001Schema: {
    readonly price: {
        modelName: string;
        currency: string;
        tokenRanges: ({
            minTokens: number;
            maxTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
        } | {
            minTokens: number;
            maxTokens: null;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
        })[];
    };
    readonly description: string;
    readonly maxOutputTokens: number;
    readonly name: string;
    readonly roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    readonly modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    readonly maxInputTokens: number;
    readonly config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    readonly maxReasoningTokens?: number | undefined;
};
declare const Gemini1_5Pro001Options: z.ZodObject<{
    accessToken: z.ZodString;
    modelName: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    publisher: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}>;
type Gemini1_5Pro001OptionsType = z.infer<typeof Gemini1_5Pro001Options>;
declare class Gemini1_5Pro001 extends BaseChatModelVertex {
    constructor(options: Gemini1_5Pro001OptionsType);
}

declare const Gemini1_5Pro002Literal: "gemini-1.5-pro-002";
declare const Gemini1_5Pro002Schema: {
    readonly price: {
        modelName: string;
        currency: string;
        tokenRanges: ({
            minTokens: number;
            maxTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
        } | {
            minTokens: number;
            maxTokens: null;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
        })[];
    };
    readonly description: string;
    readonly maxOutputTokens: number;
    readonly name: string;
    readonly roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    readonly modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    readonly maxInputTokens: number;
    readonly config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    readonly maxReasoningTokens?: number | undefined;
};
declare const Gemini1_5Pro002Options: z.ZodObject<{
    accessToken: z.ZodString;
    modelName: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    publisher: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}>;
type Gemini1_5Pro002OptionsType = z.infer<typeof Gemini1_5Pro002Options>;
declare class Gemini1_5Pro002 extends BaseChatModelVertex {
    constructor(options: Gemini1_5Pro002OptionsType);
}

declare const Gemini1_5ProLiteral: "gemini-1.5-pro";
declare const Gemini1_5ProSchema: {
    readonly price: {
        modelName: string;
        currency: string;
        tokenRanges: ({
            minTokens: number;
            maxTokens: number;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
        } | {
            minTokens: number;
            maxTokens: null;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
        })[];
    };
    readonly description: string;
    readonly maxOutputTokens: number;
    readonly name: string;
    readonly roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    readonly modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    readonly maxInputTokens: number;
    readonly config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    readonly maxReasoningTokens?: number | undefined;
};
declare const Gemini1_5ProOptions: z.ZodObject<{
    accessToken: z.ZodString;
    modelName: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    publisher: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}>;
type Gemini1_5ProOptionsType = z.infer<typeof Gemini1_5ProOptions>;
declare class Gemini1_5Pro extends BaseChatModelVertex {
    constructor(options: Gemini1_5ProOptionsType);
}

declare const Gemini2_0FlashExpLiteral: "gemini-2.0-flash-exp";
declare const Gemini2_0FlashExpSchema: {
    readonly price: {
        modelName: string;
        currency: string;
        tokenRanges: {
            minTokens: number;
            maxTokens: null;
            prices: {
                base: {
                    inputPricePerMillion: number;
                    outputPricePerMillion: number;
                };
            };
        }[];
    };
    readonly description: string;
    readonly maxOutputTokens: number;
    readonly name: string;
    readonly roles: Partial<Record<"system" | "user" | "assistant" | "tool", string | undefined>>;
    readonly modalities: ["text" | "image" | "tool-call" | "tool-response", ...("text" | "image" | "tool-call" | "tool-response")[]];
    readonly maxInputTokens: number;
    readonly config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
    readonly maxReasoningTokens?: number | undefined;
};
declare const Gemini2_0FlashExpOptions: z.ZodObject<{
    accessToken: z.ZodString;
    modelName: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    publisher: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}>;
type Gemini2_0FlashExpOptionsType = z.infer<typeof Gemini2_0FlashExpOptions>;
declare class Gemini2_0FlashExp extends BaseChatModelVertex {
    constructor(options: Gemini2_0FlashExpOptionsType);
}

declare const BaseEmbeddingModelOptions: z.ZodObject<{
    accessToken: z.ZodString;
    modelName: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    publisher: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}>;
type BaseEmbeddingModelOptionsType = z.infer<typeof BaseEmbeddingModelOptions>;
declare class BaseEmbeddingModel implements EmbeddingModelV1<EmbeddingModelSchemaType> {
    readonly version: "v1";
    modelSchema: EmbeddingModelSchemaType;
    modelName: string;
    private readonly accessToken;
    private readonly baseUrl;
    private readonly getEmbeddingsUrl;
    private readonly location;
    private readonly projectId;
    private readonly publisher;
    constructor(modelSchema: EmbeddingModelSchemaType, options: BaseEmbeddingModelOptionsType);
    getDefaultBaseUrl(): UrlType;
    getDefaultHeaders(): HeadersType;
    getDefaultParams(): ParamsType;
    getRetryDelay(responseHeaders: HeadersType): {
        shouldRetry: boolean;
        delayMs: number;
    };
    getTokenCount(requests: EmbeddingRequestsType): number;
    transformModelRequest(request: any): {
        modelName: string | undefined;
        config: ConfigType;
        embeddingRequests: EmbeddingRequestsType;
    };
    transformConfig(config: ConfigType, requests?: EmbeddingRequestsType): ParamsType;
    transformEmbeddingRequests(requests: EmbeddingRequestsType): ParamsType;
    getGetEmbeddingsUrl(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<UrlType>;
    getGetEmbeddingsHeaders(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<HeadersType>;
    getGetEmbeddingsData(config: ConfigType, requests: EmbeddingRequestsType): Promise<ParamsType>;
    transformGetEmbeddingsResponse(response: any): EmbeddingResponseType;
}

declare const Text_Embedding_004Literal = "text-embedding-004";
declare const Text_Embedding_004Schema: {
    description: string;
    name: string;
    modalities: ["text", ..."text"[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
};
declare const Text_Embedding_004Options: z.ZodObject<{
    accessToken: z.ZodString;
    modelName: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    publisher: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}>;
type Text_Embedding_004OptionsType = z.infer<typeof Text_Embedding_004Options>;
declare class Text_Embedding_004 extends BaseEmbeddingModel {
    constructor(options: Text_Embedding_004OptionsType);
}

declare const Text_Multilingual_Embedding_002Literal = "text-multilingual-embedding-002";
declare const Text_Multilingual_Embedding_002Schema: {
    description: string;
    name: string;
    modalities: ["text", ..."text"[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
};
declare const Text_Multilingual_Embedding_002Options: z.ZodObject<{
    accessToken: z.ZodString;
    modelName: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    publisher: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}>;
type Text_Multilingual_Embedding_002OptionsType = z.infer<typeof Text_Multilingual_Embedding_002Options>;
declare class Text_Multilingual_Embedding_002 extends BaseEmbeddingModel {
    constructor(options: Text_Multilingual_Embedding_002OptionsType);
}

declare const Text_Embedding_Gecko_Multilingual_001Literal = "textembedding-gecko-multilingual@001";
declare const Text_Embedding_Gecko_Multilingual_001Schema: {
    description: string;
    name: string;
    modalities: ["text", ..."text"[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
};
declare const Text_Embedding_Gecko_Multilingual_001Options: z.ZodObject<{
    accessToken: z.ZodString;
    modelName: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    publisher: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}>;
type Text_Embedding_Gecko_Multilingual_001OptionsType = z.infer<typeof Text_Embedding_Gecko_Multilingual_001Options>;
declare class Text_Embedding_Gecko_Multilingual_001 extends BaseEmbeddingModel {
    constructor(options: Text_Embedding_Gecko_Multilingual_001OptionsType);
}

declare const Text_Embedding_Gecko_003Literal = "textembedding-gecko@003";
declare const Text_Embedding_Gecko_003Schema: {
    description: string;
    name: string;
    modalities: ["text", ..."text"[]];
    maxInputTokens: number;
    maxOutputTokens: number;
    config: {
        def: Record<string, {
            type: "multi-string";
            param: string;
            title: string;
            description: string;
            max: number;
        } | {
            type: "object-schema";
            param: string;
            title: string;
            description: string;
            objectSchema?: any;
        } | {
            type: "range";
            param: string;
            title: string;
            description: string;
            max: number;
            default: number;
            min: number;
            step: number;
        } | {
            type: "select-boolean";
            param: string;
            title: string;
            description: string;
            default: boolean | null;
        } | {
            type: "select-string";
            param: string;
            title: string;
            description: string;
            default: string;
            choices: string[];
        }>;
        schema: z.ZodObject<z.ZodRawShape, z.UnknownKeysParam, z.ZodTypeAny, unknown, unknown>;
    };
};
declare const Text_Embedding_Gecko_003Options: z.ZodObject<{
    accessToken: z.ZodString;
    modelName: z.ZodString;
    baseUrl: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    publisher: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}, {
    accessToken: string;
    modelName: string;
    baseUrl?: string | undefined;
    location?: string | undefined;
    projectId?: string | undefined;
    publisher?: string | undefined;
}>;
type Text_Embedding_Gecko_003OptionsType = z.infer<typeof Text_Embedding_Gecko_003Options>;
declare class Text_Embedding_Gecko_003 extends BaseEmbeddingModel {
    constructor(options: Text_Embedding_Gecko_003OptionsType);
}

declare class Vertex<C extends BaseChatModelOptionsType, E extends BaseEmbeddingModelOptionsType> implements ProviderV1<C, E> {
    readonly version: "v1";
    readonly name = "vertex";
    static readonly baseUrl: (location: string, projectId: string, publisher?: string) => string;
    private readonly chatModelFactories;
    private readonly embeddingModelFactories;
    chatModelLiterals(): string[];
    chatModelSchemas(): Record<string, ChatModelSchemaType>;
    chatModel(options: C): ChatModelV1;
    embeddingModelLiterals(): string[];
    embeddingModelSchemas(): Record<string, EmbeddingModelSchemaType>;
    embeddingModel(options: E): EmbeddingModelV1;
}

export { BaseChatModelOptions, type BaseChatModelOptionsType, BaseChatModelVertex, BaseEmbeddingModel, BaseEmbeddingModelOptions, type BaseEmbeddingModelOptionsType, Gemini1_0Pro, Gemini1_0Pro001, Gemini1_0Pro001Literal, Gemini1_0Pro001Options, type Gemini1_0Pro001OptionsType, Gemini1_0Pro001Schema, Gemini1_0ProLiteral, Gemini1_0ProOptions, type Gemini1_0ProOptionsType, Gemini1_0ProSchema, Gemini1_0ProVision, Gemini1_0ProVisionLiteral, Gemini1_0ProVisionOptions, type Gemini1_0ProVisionOptionsType, Gemini1_0ProVisionSchema, Gemini1_5Flash, Gemini1_5Flash001, Gemini1_5Flash001Literal, Gemini1_5Flash001Options, type Gemini1_5Flash001OptionsType, Gemini1_5Flash001Schema, Gemini1_5Flash002, Gemini1_5Flash002Literal, Gemini1_5Flash002Options, type Gemini1_5Flash002OptionsType, Gemini1_5Flash002Schema, Gemini1_5FlashLiteral, Gemini1_5FlashOptions, type Gemini1_5FlashOptionsType, Gemini1_5FlashSchema, Gemini1_5Pro, Gemini1_5Pro001, Gemini1_5Pro001Literal, Gemini1_5Pro001Options, type Gemini1_5Pro001OptionsType, Gemini1_5Pro001Schema, Gemini1_5Pro002, Gemini1_5Pro002Literal, Gemini1_5Pro002Options, type Gemini1_5Pro002OptionsType, Gemini1_5Pro002Schema, Gemini1_5ProLiteral, Gemini1_5ProOptions, type Gemini1_5ProOptionsType, Gemini1_5ProSchema, Gemini2_0FlashExp, Gemini2_0FlashExpLiteral, Gemini2_0FlashExpOptions, type Gemini2_0FlashExpOptionsType, Gemini2_0FlashExpSchema, Text_Embedding_004, Text_Embedding_004Literal, Text_Embedding_004Options, type Text_Embedding_004OptionsType, Text_Embedding_004Schema, Text_Embedding_Gecko_003, Text_Embedding_Gecko_003Literal, Text_Embedding_Gecko_003Options, type Text_Embedding_Gecko_003OptionsType, Text_Embedding_Gecko_003Schema, Text_Embedding_Gecko_Multilingual_001, Text_Embedding_Gecko_Multilingual_001Literal, Text_Embedding_Gecko_Multilingual_001Options, type Text_Embedding_Gecko_Multilingual_001OptionsType, Text_Embedding_Gecko_Multilingual_001Schema, Text_Multilingual_Embedding_002, Text_Multilingual_Embedding_002Literal, Text_Multilingual_Embedding_002Options, type Text_Multilingual_Embedding_002OptionsType, Text_Multilingual_Embedding_002Schema, Vertex };
