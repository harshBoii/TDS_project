"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/tsup/assets/cjs_shims.js
var init_cjs_shims = __esm({
  "node_modules/tsup/assets/cjs_shims.js"() {
    "use strict";
  }
});

// src/errors.ts
init_cjs_shims();
var _pqueuecompat = require('p-queue-compat'); var _pqueuecompat2 = _interopRequireDefault(_pqueuecompat);
var BaseError = class extends Error {
};
var InvalidInputError = class extends BaseError {
};
var InternalError = class extends BaseError {
};
var RequestError = class extends BaseError {
};
var NetworkError = class extends RequestError {
};
var HttpError = class extends RequestError {
  
  
  
  constructor(error) {
    super(error.message, { cause: error });
    this.error = error.error;
    this.status_code = error.status_code;
    this.extensions = error.extensions;
  }
};
var AbortError = _pqueuecompat.AbortError ? _pqueuecompat.AbortError : class AbortError2 extends Error {
};

// src/buildInfo.ts
init_cjs_shims();
var version = "3.2.4";

// src/client.ts
init_cjs_shims();
var _fetchretry = require('fetch-retry'); var _fetchretry2 = _interopRequireDefault(_fetchretry);
var _httpstatuscodes = require('http-status-codes');

// src/helpers/config.ts
init_cjs_shims();
var _os = require('os'); var _os2 = _interopRequireDefault(_os);
var _path = require('path'); var _path2 = _interopRequireDefault(_path);
var _fs = require('fs'); var _fs2 = _interopRequireDefault(_fs);
var _yaml = require('yaml'); var _yaml2 = _interopRequireDefault(_yaml);
function lookupEndpoint() {
  return process.env.GENAI_ENDPOINT || "https://bam-api.res.ibm.com";
}
function lookupApiKey() {
  if (process.env.GENAI_API_KEY) {
    return process.env.GENAI_API_KEY;
  }
  const credentialsPath = _path2.default.join(_os2.default.homedir(), ".genai", "credentials.yml");
  if (_fs2.default.existsSync(credentialsPath)) {
    try {
      const fileContent = _fs2.default.readFileSync(credentialsPath, "utf8");
      return _yaml2.default.parse(fileContent).apiKey;
    } catch (err) {
      console.warn("Failed to read credentials");
    }
  }
  return null;
}

// src/api/client.ts
init_cjs_shims();
var _openapifetch = require('openapi-fetch'); var _openapifetch2 = _interopRequireDefault(_openapifetch);
function createApiClient(...params) {
  return _openapifetch2.default.call(void 0, ...params);
}

// src/api/streaming-client.ts
init_cjs_shims();



var _nodefetcheventsource = require('@ai-zen/node-fetch-event-source');


// src/utils/stream.ts
init_cjs_shims();
var _stream = require('stream');
var TypedReadable = class extends _stream.Readable {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _read(size) {
  }
  addListener(event, listener) {
    return super.addListener(event, listener);
  }
  on(event, listener) {
    return super.on(event, listener);
  }
  [Symbol.asyncIterator]() {
    return super[Symbol.asyncIterator]();
  }
};

// src/helpers/common.ts
init_cjs_shims();
var _util = require('util');
var _url = require('url');
function isTruthy(value) {
  return Boolean(value);
}
function concatUnique(...arrays) {
  const merged = arrays.filter(isTruthy).flat();
  return Array.from(new Set(merged).values());
}
function safeParseJson(value) {
  try {
    return JSON.parse(typeof value === "string" ? value : String(value));
  } catch (e2) {
    return null;
  }
}
function isNullish(value) {
  return value === null || value === void 0;
}

// src/api/streaming-client.ts
function createStreamingApiClient(clientOptions) {
  return {
    stream: function fetchSSE({
      url,
      headers,
      body,
      signal
    }) {
      const outputStream = new TypedReadable({
        autoDestroy: true,
        objectMode: true,
        signal
      });
      const onClose = () => {
        if (outputStream.readable) {
          outputStream.push(null);
        }
      };
      const delegatedController = new AbortController();
      if (signal) {
        signal.addEventListener(
          "abort",
          () => {
            delegatedController.abort();
          },
          {
            once: true
          }
        );
      }
      const onError = (e) => {
        const err = e instanceof BaseError ? e : new InternalError("Unexpected error", { cause: e });
        delegatedController.abort();
        if (outputStream.readable) {
          outputStream.emit("error", err);
          throw err;
        }
        onClose();
      };
      _nodefetcheventsource.fetchEventSource.call(void 0, new URL(url, clientOptions.baseUrl).toString(), {
        method: "POST",
        body: JSON.stringify(body),
        headers: Object.fromEntries(
          _openapifetch.mergeHeaders.call(void 0, clientOptions.headers, headers, {
            "Content-Type": "application/json"
          })
          // Types are incomplete, support is there in Node 18 https://developer.mozilla.org/en-US/docs/Web/API/Headers
        ),
        signal: delegatedController.signal,
        onclose: onClose,
        async onopen(response) {
          const contentType = response.headers.get("content-type") || "";
          if (response.ok && contentType === _nodefetcheventsource.EventStreamContentType) {
            return;
          }
          const responseData = contentType.startsWith("application/json") ? await response.json().catch(() => null) : await response.text();
          onError(new HttpError(responseData));
        },
        onmessage(message) {
          if (message.event === "close") {
            onClose();
            return;
          }
          if (message.data === "") {
            return;
          }
          const result = safeParseJson(message.data);
          if (result === null) {
            onError(
              new InternalError(
                `Failed to parse message "${JSON.stringify(message)}"`
              )
            );
            return;
          }
          if (message.event === "error") {
            onError(new HttpError(result));
            return;
          }
          outputStream.push(result);
        },
        onerror: onError
      }).catch(() => {
      });
      return outputStream;
    }
  };
}

// src/services/text/TextService.ts
init_cjs_shims();

// src/services/BaseService.ts
init_cjs_shims();
var BaseService = class {
  constructor(_client, _streamingClient) {
    this._client = _client;
    this._streamingClient = _streamingClient;
  }
};

// src/utils/concurrency.ts
init_cjs_shims();

function isConcurrencyLimitError(err) {
  return err instanceof HttpError && _optionalChain([err, 'access', _ => _.extensions, 'optionalAccess', _2 => _2.code]) === "TOO_MANY_REQUESTS";
}
var ConcurrencyLimiter = class {
  constructor(limiter) {
    this.limiter = limiter;
  }
  
  
  async execute(task, options) {
    await this._initQueue();
    while (true) {
      try {
        return await this._queue.add(task, {
          ...options,
          throwOnTimeout: true
        });
      } catch (err) {
        if (isConcurrencyLimitError(err))
          continue;
        throw err;
      }
    }
  }
  async _initQueue() {
    if (this._queue)
      return;
    if (this._limiterPromise) {
      await this._limiterPromise;
      return;
    }
    this._limiterPromise = this.limiter();
    const { limit } = await this._limiterPromise;
    this._queue = new (0, _pqueuecompat2.default)({ concurrency: limit });
  }
};

// src/utils/errors.ts
init_cjs_shims();
function isAbortError(err) {
  return Boolean(
    err && err instanceof Error && (err.name === "AbortError" || err instanceof AbortError || err.code === "ABORT_ERR")
  );
}
var ServiceUnavailableErrorCodes = /* @__PURE__ */ new Set([
  "ENOTFOUND",
  "ETIMEDOUT",
  "ECONNRESET",
  "EHOSTDOWN",
  "ECONNREFUSED",
  "ENETUNREACH",
  // macOS
  "EHOSTUNREACH",
  // Linux
  "UND_ERR_CONNECT_TIMEOUT",
  "EAI_AGAIN"
]);
function isServiceError(err) {
  const code = _optionalChain([err, 'optionalAccess', _3 => _3.code]);
  return !!code && ServiceUnavailableErrorCodes.has(code);
}
async function clientErrorWrapper(request) {
  try {
    const response = await request;
    if (response.error != void 0) {
      throw new HttpError(
        response.error
      );
    }
    return response.data;
  } catch (err) {
    if (err instanceof HttpError)
      throw err;
    if (isAbortError(err))
      throw err;
    if (isServiceError(err))
      throw new NetworkError("Unable to connect", { cause: err });
    throw new InternalError("Request failed", { cause: err });
  }
}

// src/services/text/TextGenerationService.ts
init_cjs_shims();
var TextGenerationService = class extends BaseService {
  constructor(_client, _streamingClient, _limiter) {
    super(_client, _streamingClient);
    this._client = _client;
    this._streamingClient = _streamingClient;
    this._limiter = _limiter;
  }
  async create(input, opts) {
    return this._limiter.execute(
      () => clientErrorWrapper(
        this._client.POST("/v2/text/generation", {
          ...opts,
          params: { query: { version: "2024-03-19" } },
          body: input
        })
      ),
      { signal: _optionalChain([opts, 'optionalAccess', _4 => _4.signal]) }
    );
  }
  create_stream(input, opts) {
    return this._limiter.execute(
      async () => this._streamingClient.stream({
        url: "/v2/text/generation_stream?version=2024-03-19",
        body: input,
        signal: _optionalChain([opts, 'optionalAccess', _5 => _5.signal])
      }),
      { signal: _optionalChain([opts, 'optionalAccess', _6 => _6.signal]) }
    );
  }
};

// src/services/text/TextTokenizationService.ts
init_cjs_shims();
var TextTokenizationService = class extends BaseService {
  create(input, opts) {
    return clientErrorWrapper(
      this._client.POST("/v2/text/tokenization", {
        ...opts,
        params: { query: { version: "2024-01-10" } },
        body: input
      })
    );
  }
};

// src/services/text/TextEmbeddingService.ts
init_cjs_shims();
var TextEmbeddingService = class extends BaseService {
  constructor(_client, _streamingClient, _limiter) {
    super(_client, _streamingClient);
    this._client = _client;
    this._streamingClient = _streamingClient;
    this._limiter = _limiter;
  }
  create(input, opts) {
    return this._limiter.execute(
      () => clientErrorWrapper(
        this._client.POST("/v2/text/embeddings", {
          ...opts,
          params: { query: { version: "2024-04-15" } },
          body: input
        })
      ),
      { signal: _optionalChain([opts, 'optionalAccess', _7 => _7.signal]) }
    );
  }
};

// src/services/text/TextChatService.ts
init_cjs_shims();
var TextChatService = class extends BaseService {
  constructor(_client, _streamingClient, _limiter) {
    super(_client, _streamingClient);
    this._client = _client;
    this._streamingClient = _streamingClient;
    this._limiter = _limiter;
  }
  create(input, opts) {
    return this._limiter.execute(
      () => clientErrorWrapper(
        this._client.POST("/v2/text/chat", {
          ...opts,
          params: { query: { version: "2024-03-19" } },
          body: input
        })
      ),
      { signal: _optionalChain([opts, 'optionalAccess', _8 => _8.signal]) }
    );
  }
  create_stream(input, opts) {
    return this._limiter.execute(
      async () => this._streamingClient.stream({
        url: "/v2/text/chat_stream?version=2024-03-19",
        body: input,
        signal: _optionalChain([opts, 'optionalAccess', _9 => _9.signal])
      }),
      { signal: _optionalChain([opts, 'optionalAccess', _10 => _10.signal]) }
    );
  }
};

// src/services/text/TextSentenceSimilarityService.ts
init_cjs_shims();
var TextSentenceSimilarityService = class extends BaseService {
  constructor(_client, _streamingClient, _limiter) {
    super(_client, _streamingClient);
    this._client = _client;
    this._streamingClient = _streamingClient;
    this._limiter = _limiter;
  }
  create(input, opts) {
    return this._limiter.execute(
      () => clientErrorWrapper(
        this._client.POST("/v2/beta/text/sentence-similarity", {
          ...opts,
          params: { query: { version: "2023-11-22" } },
          body: input
        })
      ),
      { signal: _optionalChain([opts, 'optionalAccess', _11 => _11.signal]) }
    );
  }
};

// src/services/text/TextService.ts
var TextService = class extends BaseService {
  
  
  
  
  
  constructor(client, streamingClient) {
    super(client, streamingClient);
    const generationLimiter = new ConcurrencyLimiter(async () => {
      const {
        result: { concurrency }
      } = await clientErrorWrapper(
        this._client.GET("/v2/text/generation/limits", {
          params: { query: { version: "2023-11-22" } }
        })
      );
      return concurrency;
    });
    const embeddingLimiter = new ConcurrencyLimiter(async () => {
      const {
        result: { concurrency }
      } = await clientErrorWrapper(
        this._client.GET("/v2/text/embeddings/limits", {
          params: { query: { version: "2023-11-22" } }
        })
      );
      return concurrency;
    });
    this.generation = new TextGenerationService(
      client,
      streamingClient,
      generationLimiter
    );
    this.tokenization = new TextTokenizationService(client, streamingClient);
    this.embedding = new TextEmbeddingService(
      client,
      streamingClient,
      embeddingLimiter
    );
    this.chat = new TextChatService(client, streamingClient, generationLimiter);
    this.experimental = {
      sentenceSimilarity: new TextSentenceSimilarityService(
        client,
        streamingClient,
        embeddingLimiter
      )
    };
  }
};

// src/services/ModelService.ts
init_cjs_shims();
var ModelService = class extends BaseService {
  async list(input, opts) {
    return await clientErrorWrapper(
      this._client.GET("/v2/models", {
        ...opts,
        params: {
          query: {
            ...input,
            version: "2023-11-22"
          }
        }
      })
    );
  }
  async retrieve(input, opts) {
    return clientErrorWrapper(
      this._client.GET("/v2/models/{id}", {
        ...opts,
        params: {
          path: input,
          query: {
            version: "2024-01-30"
          }
        }
      })
    );
  }
};

// src/services/PromptService.ts
init_cjs_shims();
var PromptService = class extends BaseService {
  async list(input, opts) {
    return clientErrorWrapper(
      this._client.GET("/v2/prompts", {
        ...opts,
        params: {
          query: {
            ...input,
            version: "2024-03-19"
          }
        }
      })
    );
  }
  async retrieve(input, opts) {
    return clientErrorWrapper(
      this._client.GET("/v2/prompts/{id}", {
        ...opts,
        params: {
          query: {
            version: "2024-03-19"
          },
          path: input
        }
      })
    );
  }
  async create(input, opts) {
    return clientErrorWrapper(
      this._client.POST("/v2/prompts", {
        ...opts,
        body: input,
        params: {
          query: {
            version: "2024-03-19"
          }
        }
      })
    );
  }
  async delete(input, opts) {
    return clientErrorWrapper(
      this._client.DELETE("/v2/prompts/{id}", {
        ...opts,
        params: {
          query: {
            version: "2023-11-22"
          },
          path: input
        }
      })
    );
  }
};

// src/services/RequestService.ts
init_cjs_shims();
var RequestService = class extends BaseService {
  async list(input, opts) {
    return clientErrorWrapper(
      this._client.GET("/v2/requests", {
        ...opts,
        params: { query: { ...input, version: "2023-11-22" } }
      })
    );
  }
  async delete(input, opts) {
    return clientErrorWrapper(
      this._client.DELETE("/v2/requests/{id}", {
        ...opts,
        params: { path: input, query: { version: "2023-11-22" } }
      })
    );
  }
  async chat(input, opts) {
    return clientErrorWrapper(
      this._client.GET("/v2/requests/chat/{conversation_id}", {
        ...opts,
        params: { path: input, query: { version: "2024-03-19" } }
      })
    );
  }
};

// src/services/TuneService.ts
init_cjs_shims();
var TuneService = class extends BaseService {
  async create(input, opts) {
    return clientErrorWrapper(
      this._client.POST("/v2/tunes", {
        ...opts,
        params: { query: { version: "2023-11-22" } },
        body: input
      })
    );
  }
  async read(input, opts) {
    return clientErrorWrapper(
      this._client.GET("/v2/tunes/{id}/content/{type}", {
        ...opts,
        params: { path: input, query: { version: "2023-12-15" } },
        parseAs: "blob"
      })
    );
  }
  async retrieve(input, opts) {
    return clientErrorWrapper(
      this._client.GET("/v2/tunes/{id}", {
        ...opts,
        params: { path: input, query: { version: "2023-11-22" } }
      })
    );
  }
  async delete(input, opts) {
    return clientErrorWrapper(
      this._client.DELETE("/v2/tunes/{id}", {
        ...opts,
        params: { path: input, query: { version: "2023-11-22" } }
      })
    );
  }
  async list(input, opts) {
    return clientErrorWrapper(
      this._client.GET("/v2/tunes", {
        ...opts,
        params: { query: { ...input, version: "2023-11-22" } }
      })
    );
  }
  async types(input, opts) {
    return clientErrorWrapper(
      this._client.GET("/v2/tuning_types", {
        ...opts,
        params: { query: { version: "2024-01-30" } }
      })
    );
  }
};

// src/services/UserService.ts
init_cjs_shims();
var UserService = class extends BaseService {
  async create(input, opts) {
    return clientErrorWrapper(
      this._client.POST("/v2/user", {
        ...opts,
        body: input,
        params: {
          query: {
            version: "2023-11-22"
          }
        }
      })
    );
  }
  async retrieve(input, opts) {
    return clientErrorWrapper(
      this._client.GET("/v2/user", {
        ...opts,
        params: {
          query: {
            version: "2023-11-22"
          }
        }
      })
    );
  }
  async update(input, opts) {
    return clientErrorWrapper(
      this._client.PATCH("/v2/user", {
        ...opts,
        params: {
          query: {
            version: "2023-11-22"
          }
        },
        body: input
      })
    );
  }
  async delete(input, opts) {
    return clientErrorWrapper(
      this._client.DELETE("/v2/user", {
        ...opts,
        params: {
          query: {
            version: "2023-11-22"
          }
        }
      })
    );
  }
};

// src/services/FileService.ts
init_cjs_shims();
var FileService = class extends BaseService {
  async create(input, opts) {
    return clientErrorWrapper(
      this._client.POST("/v2/files", {
        ...opts,
        body: { ...input, file: input.file.content },
        // file is supplied just to avoid typecast
        bodySerializer(body) {
          const formData = new FormData();
          formData.append("purpose", body.purpose);
          formData.append("file", input.file.content, input.file.name);
          return formData;
        },
        params: {
          query: {
            version: "2024-05-13"
          }
        }
      })
    );
  }
  async retrieve(input, opts) {
    return clientErrorWrapper(
      this._client.GET("/v2/files/{id}", {
        ...opts,
        params: {
          path: input,
          query: {
            version: "2024-05-13"
          }
        }
      })
    );
  }
  async read(input, opts) {
    return clientErrorWrapper(
      this._client.GET("/v2/files/{id}/content", {
        ...opts,
        params: {
          path: input,
          query: {
            version: "2023-11-22"
          }
        },
        parseAs: "blob"
      })
    );
  }
  async delete(input, opts) {
    return clientErrorWrapper(
      this._client.DELETE("/v2/files/{id}", {
        ...opts,
        params: {
          path: input,
          query: {
            version: "2023-11-22"
          }
        }
      })
    );
  }
  async list(input, opts) {
    return clientErrorWrapper(
      this._client.GET("/v2/files", {
        ...opts,
        params: {
          query: {
            ...input,
            version: "2024-05-13"
          }
        }
      })
    );
  }
};

// src/services/SystemPromptService.ts
init_cjs_shims();
var SystemPromptService = class extends BaseService {
  async create(input, opts) {
    return clientErrorWrapper(
      this._client.POST("/v2/system_prompts", {
        ...opts,
        body: input,
        params: {
          query: {
            version: "2023-11-22"
          }
        }
      })
    );
  }
  async retrieve(input, opts) {
    return clientErrorWrapper(
      this._client.GET("/v2/system_prompts/{id}", {
        ...opts,
        params: {
          query: {
            version: "2023-11-22"
          },
          path: input
        }
      })
    );
  }
  async update(input, opts) {
    const { id, ...body } = input;
    return clientErrorWrapper(
      this._client.PUT("/v2/system_prompts/{id}", {
        ...opts,
        params: {
          query: {
            version: "2023-11-22"
          },
          path: { id }
        },
        body
      })
    );
  }
  async delete(input, opts) {
    return clientErrorWrapper(
      this._client.DELETE("/v2/system_prompts/{id}", {
        ...opts,
        params: {
          query: {
            version: "2023-11-22"
          },
          path: input
        }
      })
    );
  }
  async list(input, opts) {
    return clientErrorWrapper(
      this._client.GET("/v2/system_prompts", {
        ...opts,
        params: {
          query: {
            ...input,
            version: "2023-11-22"
          }
        }
      })
    );
  }
};

// src/client.ts
var Client = class {
  
  
  
  
  
  
  
  
  constructor(config = {}) {
    const endpoint = _nullishCoalesce(config.endpoint, () => ( lookupEndpoint()));
    if (!endpoint) {
      throw new InvalidInputError("Configuration endpoint is missing!");
    }
    const apiKey = _nullishCoalesce(config.apiKey, () => ( lookupApiKey()));
    if (!apiKey) {
      throw new InvalidInputError("Configuration API key is missing!");
    }
    const agent = version ? `node-sdk/${version}` : "node-sdk";
    const headers = new Headers(config.headers);
    headers.set("user-agent", agent);
    headers.set("x-request-origin", agent);
    headers.set("authorization", `Bearer ${apiKey}`);
    const _client = createApiClient({
      baseUrl: endpoint,
      headers,
      fetch: _fetchretry2.default.call(void 0, fetch, {
        retryOn: [
          _httpstatuscodes.StatusCodes.TOO_MANY_REQUESTS,
          // Retry also when concurrency limits (due to external factors) are hit
          _httpstatuscodes.StatusCodes.BAD_GATEWAY,
          _httpstatuscodes.StatusCodes.SERVICE_UNAVAILABLE,
          _httpstatuscodes.StatusCodes.CONFLICT,
          _httpstatuscodes.StatusCodes.GATEWAY_TIMEOUT,
          _httpstatuscodes.StatusCodes.REQUEST_TIMEOUT,
          _httpstatuscodes.StatusCodes.INTERNAL_SERVER_ERROR
        ],
        retryDelay: function(attempt) {
          return Math.pow(2, attempt) * 1e3;
        }
      })
    });
    const _streamingClient = createStreamingApiClient({
      baseUrl: endpoint,
      headers
    });
    this.text = new TextService(_client, _streamingClient);
    this.model = new ModelService(_client, _streamingClient);
    this.request = new RequestService(_client, _streamingClient);
    this.prompt = new PromptService(_client, _streamingClient);
    this.tune = new TuneService(_client, _streamingClient);
    this.user = new UserService(_client, _streamingClient);
    this.file = new FileService(_client, _streamingClient);
    this.systemPrompt = new SystemPromptService(_client, _streamingClient);
  }
};
















exports.__commonJS = __commonJS; exports.__toESM = __toESM; exports.init_cjs_shims = init_cjs_shims; exports.BaseError = BaseError; exports.InvalidInputError = InvalidInputError; exports.InternalError = InternalError; exports.RequestError = RequestError; exports.NetworkError = NetworkError; exports.HttpError = HttpError; exports.AbortError = AbortError; exports.version = version; exports.concatUnique = concatUnique; exports.isNullish = isNullish; exports.Client = Client;
